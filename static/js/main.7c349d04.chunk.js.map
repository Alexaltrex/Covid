{"version":3,"sources":["components/Main/Statistic/Canvas/Canvas.module.css","components/Main/Summary/SummaryItems/SummaryItem/SummaryItem.module.css","components/Main/Statistic/Canvas/Info/Info.module.css","App.module.css","components/Main/Main.module.css","components/Main/Home/Home.module.css","components/common/Preloader/Preloader.module.css","assets/preloader/circles.svg","components/Main/Statistic/Country/CountryStatistic.module.css","components/Main/Statistic/Canvas/Dates/Date/Date.module.css","components/Main/Statistic/Canvas/Values/Value/Value.module.css","components/Main/Statistic/Statistic.module.css","components/Main/Summary/Summary.module.css","components/Header/Header.jsx","components/Main/Home/Home.jsx","components/common/Preloader/Preloader.jsx","components/Main/Summary/SummaryItems/SummaryItem/SummaryItem.jsx","components/Main/Summary/SummaryItems/SummaryItems.jsx","DAL/date.js","DAL/api.js","store/summary-reducer.js","components/Main/Summary/Country/Country.jsx","components/Main/Summary/Country/CountryContainer.jsx","components/Main/Summary/Summary.jsx","components/Main/Summary/SummaryContainer.jsx","DAL/canvas.js","store/statistic-reducer.js","components/Main/Statistic/Country/Country.jsx","components/Main/Statistic/Country/CountryContainer.jsx","components/Main/Statistic/Period/Period.jsx","components/Main/Statistic/Period/PeriodContainer.jsx","components/Main/Statistic/Type/Type.jsx","components/Main/Statistic/Type/TypeContainer.jsx","components/Main/Statistic/Canvas/Info/Info.jsx","components/Main/Statistic/Canvas/Info/InfoContainer.jsx","components/Main/Statistic/Canvas/Dates/Date/Date.jsx","components/Main/Statistic/Canvas/Dates/Dates.jsx","components/Main/Statistic/Canvas/Dates/DatesContainer.jsx","components/Main/Statistic/Canvas/Values/Value/Value.jsx","components/Main/Statistic/Canvas/Values/Values.jsx","components/Main/Statistic/Canvas/Values/ValuesContainer.jsx","components/Main/Statistic/Canvas/Canvas.jsx","components/Main/Statistic/Canvas/CanvasContainer.jsx","components/Main/Statistic/CaseType/CaseType.jsx","components/Main/Statistic/CaseType/CaseTypeContainer.jsx","components/Main/Statistic/Statistic.jsx","components/Main/Statistic/StatisticContainer.jsx","components/Main/Main.jsx","App.jsx","store/store.js","index.jsx","components/Header/Header.module.css"],"names":["module","exports","Header","className","style","header","logo","nav","to","navItem","activeClassName","active","Home","props","home","href","Preloader","preloader","src","alt","SummaryItem","itemStyle","color","item","type","value","SummaryItems","SummaryItemElements","cases","map","i","key","items","DATE","getCurrentDate","Date","dateJsToAPI","date","year","getFullYear","month","getMonth","day","getDate","dateAPIToJs","slice","getStartPeriodDate","period","endPeriodDateJS","this","startPeriodDateJS","getTime","getStartPeriodDateActual","getDates","dateEnd","dates","push","instance","axios","baseURL","summaryAPI","get","then","response","data","statisticAPI","country","dateStart","stateInitial","isLoading","global","countries","countriesList","currentCountry","toggleLoading","setCurrentCountry","summaryReducer","state","action","NewConfirmed","TotalConfirmed","NewRecovered","TotalRecovered","NewDeaths","TotalDeaths","find","el","length","Country","optionElements","onChange","e","currentTarget","changeCases","CountryContainer","connect","summaryPage","Summary","summary","blocks","block","title","SummaryAJAX","getInitial","prevProps","React","Component","SummaryContainer","dispatch","Global","Countries","setCountriesList","CANVAS","marginLeftX","paddingLeftX","marginRightX","marginY","canvasW","canvasH","deltaGridYf","DELTA","countriesData","periodInput","periodByFirstDay","valuesConfirmedNew","valuesConfirmedTotal","valuesRecoveredNew","valuesRecoveredTotal","valuesDeathsNew","valuesDeathsTotal","mouseX","mouseY","mouseHoverCanvas","caseType","valuesCurrent","showInfo","infoValue","infoDate","xPoint","yPoint","setValues","values","typeTime","setMouseHoverCanvas","setCurrentValues","statisticReducer","sort","a","b","i0","Confirmed","Recovered","Deaths","typeValue","valueMin","Math","min","apply","filter","valueMax","max","deltaGridY","valueMinGrid","floor","valueMaxGrid","ceil","deltaX","deltaY","canvasX","canvasY","iPoint","round","select","statisticPage","Period","setPeriod","PeriodContainer","Type","setType","TypeContainer","Info","left","iMouseGrid","xMouseGrid","colorValue","styleInfo","top","styleValue","onMouseEnter","onMouseLeave","info","InfoContainer","styleInline","Dates","k","datesElements","leftArr","DatesContainer","Value","Values","valuesElements","valuesArr","topArr","ValuesContainer","y","Canvas","drawCanvasAxis","ctx","refs","canvasAxis","getContext","clearRect","fillStyle","fillRect","strokeStyle","lineWidth","setLineDash","beginPath","moveTo","lineTo","stroke","drawCanvasGraph","canvasGraph","yLineStart","drawCanvasPoint","canvasPoint","lineJoin","arc","PI","fill","onMouseMove","canvas","target","getBoundingClientRect","x","clientX","clientY","setMouseXY","prevState","snapshot","valueIsExists","canvasWrapperStyle","width","height","canvasWrapper","ref","CanvasContainer","setShowInfo","CaseType","setCaseType","CaseTypeContainer","Statistic","statistic","selects","selectBlock","selectTitle","StatisticAJAX","getValues","StatisticContainer","setDateEnd","dateEndAPI","dateEndJS","dateStartJS","dateStartAPI","console","log","setPeriodByFirstDay","Main","main","exact","path","render","App","appWrapper","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7c349d04.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"Canvas_canvas__1oeia\",\"canvasWrapper\":\"Canvas_canvasWrapper__H74z-\",\"canvasAxis\":\"Canvas_canvasAxis__1Bly_\",\"canvasGraph\":\"Canvas_canvasGraph__2HJMp\",\"canvasPoint\":\"Canvas_canvasPoint__2p_Lg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SummaryItem_item__2BGAE\",\"type\":\"SummaryItem_type__2bPut\",\"value\":\"SummaryItem_value__3yGm9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"Info_info__2gkNM\",\"value\":\"Info_value__3nvX_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__2lG0z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__2FTig\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__2AIWm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__2WkBw\"};","module.exports = __webpack_public_path__ + \"static/media/circles.1181204b.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"CountryStatistic_select__M0G8x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"value\":\"Date_value__2cCah\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"value\":\"Value_value__3g19r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistic\":\"Statistic_statistic__ZlvCf\",\"selects\":\"Statistic_selects___zXZa\",\"selectBlock\":\"Statistic_selectBlock__2BVku\",\"selectTitle\":\"Statistic_selectTitle__34FJY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"summary\":\"Summary_summary__1a_gv\",\"blocks\":\"Summary_blocks__2yTKK\",\"block\":\"Summary_block__Uxol1\",\"title\":\"Summary_title__idFCO\",\"date\":\"Summary_date__a2OlZ\"};","import React from 'react';\r\nimport style from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={style.header}>\r\n            <div className={style.logo}>\r\n                Covid\r\n            </div>\r\n            <nav className={style.nav}>\r\n                <NavLink to='/' className={style.navItem}>Home</NavLink>\r\n                <NavLink to='/summary' className={style.navItem} activeClassName={style.active}>Summary</NavLink>\r\n                <NavLink to='/statistic' className={style.navItem} activeClassName={style.active}>Statistic</NavLink>\r\n            </nav>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport style from './Home.module.css';\r\n\r\nconst Home = (props) => {\r\n    return (\r\n        <div className={style.home}>\r\n            <div>Интерфейс разработан на базе API: <a href=\"https://api.covid19api.com\">https://api.covid19api.com</a></div>\r\n            <div>с использованием <span>React</span> + <span>Redux</span></div>\r\n            <div>Использованы модули: 'react-router-dom', 'redux', 'react-redux', 'redux-thunk', 'axios'</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Home;\r\n","import React from 'react';\r\nimport style from './Preloader.module.css';\r\nimport preloader from './../../../assets/preloader/circles.svg'\r\n\r\nlet Preloader = () => {\r\n    return (\r\n        <div className={style.preloader}>\r\n            <img src={preloader} alt=\"\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader;\r\n\r\n","import React from 'react';\r\nimport style from './SummaryItem.module.css';\r\n\r\nconst SummaryItem = (props) => {\r\n    let itemStyle = {color: props.color};\r\n    return (\r\n        <div className={style.item}>\r\n            <div className={style.type} style={itemStyle}>{props.type}</div>\r\n            <div className={style.value}>{props.value}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SummaryItem;","import React from 'react';\r\nimport style from \"../Summary.module.css\";\r\nimport SummaryItem from \"./SummaryItem/SummaryItem\";\r\n\r\nconst SummaryItems = (props) => {\r\n    let color = ['darkred', 'darkred', 'darkgreen', 'darkgreen', 'darkblue', 'darkblue'];\r\n    let type = ['Confirmed new', 'Confirmed total', 'Recovered new', 'Recovered total', 'Deaths new', 'Deaths total'];\r\n    let SummaryItemElements = props.cases.map((value, i) => <SummaryItem key={i} value={value} color={color[i]}\r\n                                                                         type={type[i]}/>)\r\n    //console.log(props.cases);\r\n    //Color[index]\r\n    return (\r\n        <div className={style.items}>\r\n            {SummaryItemElements}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SummaryItems;","export const DATE = {\r\n    // получение текущей даты\r\n    // RETURN - JS DATE\r\n    getCurrentDate() {\r\n        return new Date();\r\n    },\r\n\r\n    // перевод из формата js в формат API\r\n    dateJsToAPI(date) {\r\n        let year = date.getFullYear();\r\n        let month = date.getMonth() + 1;\r\n        if (month < 10) {\r\n            month = '0' + month;\r\n        }\r\n        let day = date.getDate();\r\n        if (day < 10) {\r\n            day = '0' + day;\r\n        }\r\n        return `${year}-${month}-${day}T00:00:00Z`;\r\n    },\r\n\r\n    // перевод даты из формата API в формат js\r\n    //\"2020-07-09T00:00:00Z\"\r\n    dateAPIToJs(date){\r\n       let year = date.slice(0,4);\r\n       let month = date.slice(5,7) - 1;\r\n       let day = date.slice(8,10)\r\n       return new Date(year, month, day);\r\n    },\r\n\r\n    // определение даты начала периода (зависит от текущей последней) в формате API\r\n    getStartPeriodDate(period) {\r\n        // period = 7, 14, 30\r\n        // return = API\r\n        let endPeriodDateJS = this.getCurrentDate();\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - period * 24 * 60 * 60 * 1000);\r\n        return this.dateJsToAPI(startPeriodDateJS);\r\n    },\r\n\r\n    // определение актуальной даты начала периода (зависит от актуальной последней) в формате API\r\n    getStartPeriodDateActual(period, date) {\r\n        // date = dateEnd, API\r\n        // period = 7, 14, 30\r\n        // return = API\r\n        let endPeriodDateJS = this.dateAPIToJs(date);\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - period * 24 * 60 * 60 * 1000);\r\n        return this.dateJsToAPI(startPeriodDateJS);\r\n    },\r\n\r\n    // получение массива дат для canvas в формате 'DD.MM'\r\n    getDates(period, dateEnd) {\r\n        // dateEnd = API\r\n        let dates = [];\r\n        let endPeriodDateJS = this.dateAPIToJs(dateEnd);\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - (period - 1) * 24 * 60 * 60 * 1000);\r\n        //console.log(`dateEndAPI - ${dateEnd}`)\r\n        //console.log(`dateEndJS - ${endPeriodDateJS}`)\r\n        //console.log(startPeriodDateJS)\r\n        for (let i = 0; i < period; i++){\r\n            let month = startPeriodDateJS.getMonth() + 1;\r\n            if (month < 10) {\r\n                month = '0' + month;\r\n            }\r\n            let day = startPeriodDateJS.getDate();\r\n            if (day < 10) {\r\n                day = '0' + day;\r\n            }\r\n            dates.push(`${day}.${month}`);\r\n            startPeriodDateJS = new Date(startPeriodDateJS.getTime() + 1 * 24 * 60 * 60 * 1000);\r\n        }\r\n        return dates;\r\n    }\r\n\r\n}","import * as axios from \"axios\";\r\nimport {DATE} from \"./date\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.covid19api.com/'\r\n});\r\n\r\nexport const summaryAPI = {\r\n    getInitial(){\r\n        return instance.get('summary')\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\n\r\n// total/country/russia?from=2020-07-05T00:00:00Z&to=2020-07-06T00:00:00Z\r\nexport const statisticAPI = {\r\n    getCountries(){\r\n        return instance.get('countries')\r\n            .then(response => response.data)\r\n    },\r\n    getValues(country, dateStart, dateEnd) {\r\n        return instance.get(`total/country/${country}?from=${dateStart}&to=${dateEnd}`)\r\n            .then(response => response.data)\r\n    },\r\n    // получение актуальной последней даты (может не совпадать с текущей или вчерашней)\r\n    getDateEnd(country){\r\n        let dateStart = DATE.getStartPeriodDate(2);\r\n        let dateEnd = DATE.dateJsToAPI(DATE.getCurrentDate());\r\n        return instance.get(`total/country/${country}?from=${dateStart}&to=${dateEnd}`)\r\n            .then(response => response.data)\r\n    },\r\n    // получить все типы для заданной страны с первого дня\r\n    getValuesFromDayOne(country){\r\n        return instance.get(`dayone/country/${country}`)\r\n            .then(response => response.data)\r\n    }\r\n}","import {summaryAPI} from \"../DAL/api\";\r\n\r\nconst TOGGLE_LOADING = 'TOGGLE-LOADING';\r\nconst SET_DATE = 'SET_DATE';\r\nconst SET_GLOBAL = 'SET-GLOBAL';\r\nconst SET_COUNTRIES = 'SET-COUNTRIES';\r\nconst SET_COUNTRIES_LIST = 'SET_COUNTRIES_LIST';\r\nconst SET_CURRENT_COUNTRY = 'SET-CURRENT-COUNTRY';\r\nconst INITIAL_SET_CASES = 'INITIAL-SET-CASES';\r\nconst CHANGE_CASES = 'CHANGE_CASES';\r\n\r\nlet stateInitial = {\r\n    isLoading: false,\r\n    date: '', // дата заппроса\r\n    // [confirmedNew, confirmedTotal, recoveredNew, recoveredTotal, deathsNew, deathsTotal]\r\n    global: [], // массив значений по всему миру\r\n    cases: [], // массив значений выбранной страны\r\n    // [{Country: \"Country\", cases: [confirmedNew, confirmedTotal, recoveredNew, recoveredTotal, deathsNew, deathsTotal]}, ...]\r\n    countries: [],// массив значений по странам\r\n    countriesList: [], //список стран\r\n    currentCountry: '' // выбранная страна\r\n\r\n\r\n};\r\n\r\nconst summaryReducer = (state = stateInitial, action) => {\r\n    switch (action.type) {\r\n\r\n        case TOGGLE_LOADING: {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n\r\n        case SET_DATE: {\r\n            return {...state, date: action.date}\r\n        }\r\n\r\n        case SET_GLOBAL: {\r\n            let global = [];\r\n            global.push(action.global.NewConfirmed);\r\n            global.push(action.global.TotalConfirmed);\r\n            global.push(action.global.NewRecovered);\r\n            global.push(action.global.TotalRecovered);\r\n            global.push(action.global.NewDeaths);\r\n            global.push(action.global.TotalDeaths);\r\n            return {...state, global: global}\r\n        }\r\n\r\n        case INITIAL_SET_CASES: {\r\n            let cases = [];\r\n            cases.push(action.country.NewConfirmed);\r\n            cases.push(action.country.TotalConfirmed);\r\n            cases.push(action.country.NewRecovered);\r\n            cases.push(action.country.TotalRecovered);\r\n            cases.push(action.country.NewDeaths);\r\n            cases.push(action.country.TotalDeaths);\r\n            return {...state, cases: cases}\r\n        }\r\n\r\n        case CHANGE_CASES: {\r\n            let cases = state.countries.find(el => el.country === action.country).cases;\r\n            return {...state, cases: cases};\r\n        }\r\n\r\n        case SET_COUNTRIES: {\r\n            let countries = [];\r\n            for (let i = 0; i < action.countries.length; i++) {\r\n                countries[i] = {};\r\n                countries[i].country = action.countries[i].Country;\r\n                countries[i].cases = [];\r\n                countries[i].cases.push(action.countries[i].NewConfirmed);\r\n                countries[i].cases.push(action.countries[i].TotalConfirmed);\r\n                countries[i].cases.push(action.countries[i].NewRecovered);\r\n                countries[i].cases.push(action.countries[i].TotalRecovered);\r\n                countries[i].cases.push(action.countries[i].NewDeaths);\r\n                countries[i].cases.push(action.countries[i].TotalDeaths);\r\n            }\r\n            return {...state, countries: countries}\r\n        }\r\n\r\n        case SET_CURRENT_COUNTRY: {\r\n            return {...state, currentCountry: action.country};\r\n        }\r\n\r\n        case SET_COUNTRIES_LIST: {\r\n            let countriesList = [];\r\n            for (let i = 0; i < action.countries.length; i++) {\r\n                countriesList.push(action.countries[i].Country);\r\n            }\r\n            return {...state, countriesList: countriesList};\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const toggleLoading = (isLoading) => ({type: TOGGLE_LOADING, isLoading});\r\nexport const setDate = (date) => ({type: SET_DATE, date});\r\nexport const setGlobal = (global) => ({type: SET_GLOBAL, global});\r\nexport const setCountries = (countries) => ({type: SET_COUNTRIES, countries});\r\nexport const setCurrentCountry = (country) => ({type: SET_CURRENT_COUNTRY, country});\r\nexport const setCountriesList = (countries) => ({type: SET_COUNTRIES_LIST, countries});\r\nexport const initialSetCases = (country) => ({type: INITIAL_SET_CASES, country});\r\nexport const changeCases = (country) => ({type: CHANGE_CASES, country});\r\n\r\nexport const getInitial = () => dispatch => {\r\n    dispatch(toggleLoading(true));\r\n    summaryAPI.getInitial()\r\n        .then(data => {\r\n            dispatch(setDate(data.Date));\r\n            dispatch(setGlobal(data.Global));\r\n            dispatch(initialSetCases(data.Countries[138]))\r\n            dispatch(setCountries(data.Countries));\r\n            dispatch(setCountriesList(data.Countries));\r\n            dispatch(setCurrentCountry(data.Countries[138].Country));\r\n            dispatch(toggleLoading(false));\r\n        })\r\n}\r\n\r\nexport default summaryReducer;","import React from 'react';\r\n\r\nconst Country = (props) => {\r\n    let onChange = (e) => {\r\n        props.setCurrentCountry(e.currentTarget.value);\r\n        props.changeCases(e.currentTarget.value);\r\n    }\r\n    let optionElements = props.countriesList.map((country, i) =>\r\n        (<option key={i} value={country}>\r\n            {country}\r\n        </option>))\r\n    return (\r\n        <select onChange={onChange} value={props.currentCountry}>\r\n            {optionElements}\r\n        </select>\r\n    )\r\n};\r\n\r\nexport default Country;\r\n\r\n","import {changeCases, setCurrentCountry} from \"../../../../store/summary-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Country from \"./Country\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currentCountry: state.summaryPage.currentCountry,\r\n    countriesList: state.summaryPage.countriesList\r\n});\r\n\r\nconst CountryContainer = connect(mapStateToProps, {setCurrentCountry, changeCases})(Country);\r\n\r\nexport default CountryContainer;","import React from 'react';\r\nimport style from './Summary.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport SummaryItems from \"./SummaryItems/SummaryItems\";\r\nimport CountryContainer from \"./Country/CountryContainer\";\r\n\r\nconst Summary = (props) => {\r\n    if (props.isLoading) return <Preloader/>\r\n    return (\r\n        <div className={style.summary}>\r\n            <div className={style.blocks}>\r\n                <div className={style.block}>\r\n                    <div className={style.title}>\r\n                        Global\r\n                    </div>\r\n                    <SummaryItems cases={props.global}/>\r\n                </div>\r\n                <div className={style.block}>\r\n                    <div className={style.title}>\r\n                        By country\r\n                    </div>\r\n                    <div>\r\n                        <CountryContainer/>\r\n                    </div>\r\n                    <SummaryItems cases={props.cases}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={style.date}>{props.date}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Summary;","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport Summary from \"./Summary\";\r\nimport {getInitial} from \"../../../store/summary-reducer\";\r\n\r\nclass SummaryAJAX extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getInitial();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n    }\r\n\r\n    render() {\r\n       return <Summary date={this.props.date}\r\n                        global={this.props.global}\r\n                        cases={this.props.cases}/>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = state => {\r\n    return {\r\n        date: state.summaryPage.date,\r\n        global: state.summaryPage.global,\r\n        cases: state.summaryPage.cases,\r\n        isLoading: state.summaryPage.isLoading\r\n    }\r\n}\r\n\r\nlet SummaryContainer = connect(mapStateToProps, {getInitial})(SummaryAJAX);\r\n\r\nexport default SummaryContainer;","export const CANVAS = {\r\n    marginLeftX: 30,\r\n    paddingLeftX: 30,\r\n    marginRightX: 30,\r\n    marginY: 30, // вниз\r\n    canvasW: function() { return 800 + this.marginLeftX + this.paddingLeftX + this.marginRightX},\r\n    canvasH: function() { return 300 + this.marginY},\r\n    deltaGridYf(DELTA) {\r\n        if (DELTA <= 10) {\r\n            return 1;\r\n        } else if (DELTA > 10 && DELTA <= 50) {\r\n            return 5;\r\n        } else if (DELTA > 50 && DELTA <= 100) {\r\n            return 10;\r\n        } else if (DELTA > 100 && DELTA <= 500) {\r\n            return 50;\r\n        } else if (DELTA > 500 && DELTA <= 1000) {\r\n            return 100;\r\n        } else if (DELTA > 1000 && DELTA <= 5000) {\r\n            return 500;\r\n        } else if (DELTA > 5000 && DELTA <= 10000) {\r\n            return 1000;\r\n        } else if (DELTA > 10000 && DELTA <= 50000) {\r\n            return 5000;\r\n        } else if (DELTA > 50000 && DELTA <= 100000) {\r\n            return 10000;\r\n        } else if (DELTA > 100000 && DELTA <= 500000) {\r\n            return 50000;\r\n        } else if (DELTA > 500000 && DELTA <= 1000000) {\r\n            return 100000;\r\n        } else if (DELTA > 1000000 && DELTA <= 5000000) {\r\n            return 500000;\r\n        } else if (DELTA > 5000000 && DELTA <= 10000000) {\r\n            return 1000000;\r\n        }\r\n\r\n    }\r\n};","import {statisticAPI} from \"../DAL/api\";\r\nimport {DATE} from \"../DAL/date\";\r\nimport {CANVAS} from \"../DAL/canvas\";\r\n\r\nconst TOGGLE_LOADING = 'TOGGLE-LOADING';\r\nconst SET_COUNTRIES_DATA = 'SET-COUNTRIES-DATA';\r\nconst SET_CURRENT_COUNTRY = 'SET-CURRENT-COUNTRY';\r\nconst SET_PERIOD = 'SET-PERIOD';\r\nconst SET_PERIOD_BY_FIRST_DAY = 'SET_PERIOD_BY_FIRST_DAY';\r\nconst SET_VALUES = 'SET-VALUES';\r\nconst SET_TYPE = 'SET-TYPE';\r\nconst SET_MOUSE_XY = 'SET-MOUSE-XY';\r\n\r\nconst SET_MOUSE_HOVER_CANVAS = 'SET-MOUSE-HOVER-CANVAS';\r\nconst SET_DATE_END = 'SET-DATE-END';\r\nconst SET_CASE_TYPE = 'SET-CASE-TYPE';\r\nconst SET_CURRENT_VALUES = 'SET-CURRENT-VALUES';\r\nconst SET_SHOW_INFO = 'SET_SHOW_INFO';\r\n\r\nlet stateInitial = {\r\n    isLoading: false,\r\n    // [{Country: 'Country', Slug: 'Slug', ISO2: 'ISO2'}, ...]\r\n    countriesData: [], // Список названий, слагов стран и ISO2\r\n    periodInput: 14, // 7, 14, 30, -1 значение из input select\r\n    periodByFirstDay: null, // вычисленное с первого дня до текеущего\r\n    period: 14, // результирующее значение для всех типов (в днях)\r\n    dateEnd: null, // последняя актуальная дата (в формате API)\r\n    dates: null,// массив дат в формате DD.MM\r\n    currentCountry: 'Russian Federation', //'Australia', // выбранная страна\r\n    valuesConfirmedNew: [], // [['DD MM YYYY', value], ....] new === by day\r\n    valuesConfirmedTotal: [], // [['DD MM YYYY', value], ....]\r\n    valuesRecoveredNew: [], // [['DD MM YYYY', value], ....] new === by day\r\n    valuesRecoveredTotal: [], // [['DD MM YYYY', value], ....]\r\n    valuesDeathsNew: [], // [['DD MM YYYY', value], ....] new === by day\r\n    valuesDeathsTotal: [], // [['DD MM YYYY', value], ....]\r\n    type: 'byDay', // 'byDay', 'total'\r\n    mouseX: null,\r\n    mouseY: null,\r\n    mouseHoverCanvas: false, // курсор над канвасом,\r\n    caseType: 'confirmed', // 'confirmed', 'recovered', 'deaths'\r\n    // зависит от type и caseType\r\n    // изменение происходит в getInitial, getValues - после получения данных с сервера\r\n    // в getInitial значения type и caseType из stateInitial\r\n    // в getValues - текущие выбранные\r\n    // также изменение в setCurrentValues без API запроса, по уже полученным данным\r\n    // в зависимости от выбранных параметров type и caseType\r\n    valuesCurrent: null,\r\n    showInfo: false, // показывать или нет\r\n    infoValue: null, // значение\r\n    infoDate: null, // дата\r\n    xPoint: null, // координаты точки и линии\r\n    yPoint: null  // координаты точки и линии\r\n\r\n};\r\n\r\nconst statisticReducer = (state = stateInitial, action) => {\r\n    switch (action.type) {\r\n\r\n        // переключение статуса загрузки\r\n        case TOGGLE_LOADING: {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n\r\n        case SET_COUNTRIES_DATA: {\r\n            action.countriesData.sort((a, b) => {\r\n                if (a.Country > b.Country) {\r\n                    return 1;\r\n                }\r\n                if (a.Country < b.Country) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            })\r\n            return {...state, countriesData: action.countriesData};\r\n        }\r\n\r\n        // установка выбранной страны\r\n        case SET_CURRENT_COUNTRY: {\r\n            return {...state, currentCountry: action.country};\r\n        }\r\n\r\n        // установка периода\r\n        case SET_PERIOD: {\r\n            return {...state, periodInput: +action.period, period: +action.period}\r\n        }\r\n\r\n        // установка периода от начала до текущей даты\r\n        case SET_PERIOD_BY_FIRST_DAY: {\r\n            return {...state, periodByFirstDay: action.data.length, period: action.data.length}\r\n        }\r\n\r\n        // установка актуальной даты конца периода\r\n        // установка массив дат в формате DD.MM для canvas\r\n        case SET_DATE_END: {\r\n            let dateEnd = action.data[action.data.length - 1].Date;\r\n            //let dates = DATE.getDates(state.period, dateEnd)\r\n            return {...state, dateEnd: dateEnd} //, dates: dates\r\n        }\r\n\r\n        case SET_VALUES: {\r\n            let valuesConfirmedNew = [];\r\n            let valuesConfirmedTotal = [];\r\n            let valuesRecoveredNew = [];\r\n            let valuesRecoveredTotal = [];\r\n            let valuesDeathsNew = [];\r\n            let valuesDeathsTotal = [];\r\n            let dates = [];\r\n            // если period=7,14,30, длина массива данных равно period+1 для получения значений разницы (за один день)\r\n            let i0; //индекс начала итерации\r\n            if (action.values.length <= 31) {\r\n                i0 = 1;\r\n            } else {\r\n                i0 = 0;\r\n            }\r\n            for (let i = i0; i < action.values.length; i++) {\r\n                // заполнение  массива dates - Date: \"2020-07-11T00:00:00Z\"\r\n                let day = action.values[i].Date.slice(8, 10);\r\n                let month = action.values[i].Date.slice(5, 7);\r\n                dates.push(`${day}.${month}`);\r\n\r\n                if (i0 === 0 && i === 0) {\r\n                    valuesConfirmedNew.push(action.values[i].Confirmed);\r\n                    valuesConfirmedTotal.push(action.values[i].Confirmed);\r\n                    valuesRecoveredNew.push(action.values[i].Recovered);\r\n                    valuesRecoveredTotal.push(action.values[i].Recovered);\r\n                    valuesDeathsNew.push(action.values[i].Deaths);\r\n                    valuesDeathsTotal.push(action.values[i].Deaths);\r\n                } else {\r\n                    // проверка присланных данных на ошибки\r\n                    // может быть общее послед. меньше, чем общее предыдущее\r\n                    if (action.values[i].Confirmed >= action.values[i - 1].Confirmed) {\r\n                        valuesConfirmedTotal.push(action.values[i].Confirmed);\r\n                        valuesConfirmedNew.push(action.values[i].Confirmed - action.values[i - 1].Confirmed);\r\n                    } else {\r\n                        valuesConfirmedTotal.push(null);\r\n                        valuesConfirmedNew.push(null);\r\n                    }\r\n\r\n                    if (action.values[i].Recovered >= action.values[i - 1].Recovered) {\r\n                        valuesRecoveredTotal.push(action.values[i].Recovered);\r\n                        valuesRecoveredNew.push(action.values[i].Recovered - action.values[i - 1].Recovered);\r\n                    } else {\r\n                        valuesRecoveredTotal.push(null);\r\n                        valuesRecoveredNew.push(null);\r\n                    }\r\n\r\n                    if (action.values[i].Deaths >= action.values[i - 1].Deaths) {\r\n                        valuesDeathsTotal.push(action.values[i].Deaths);\r\n                        valuesDeathsNew.push(action.values[i].Deaths - action.values[i - 1].Deaths);\r\n                    } else {\r\n                        valuesDeathsTotal.push(null);\r\n                        valuesDeathsNew.push(null);\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n            // текущее выбранное\r\n            let valuesCurrent = [];\r\n            if (action.typeTime === 'byDay' && action.caseType === 'confirmed') {\r\n                valuesCurrent = valuesConfirmedNew\r\n            }\r\n            if (action.typeTime === 'total' && action.caseType === 'confirmed') {\r\n                valuesCurrent = valuesConfirmedTotal\r\n            }\r\n            if (action.typeTime === 'byDay' && action.caseType === 'recovered') {\r\n                valuesCurrent = valuesRecoveredNew\r\n            }\r\n            if (action.typeTime === 'total' && action.caseType === 'recovered') {\r\n                valuesCurrent = valuesRecoveredTotal\r\n            }\r\n            if (action.typeTime === 'byDay' && action.caseType === 'deaths') {\r\n                valuesCurrent = valuesDeathsNew\r\n            }\r\n            if (action.typeTime === 'total' && action.caseType === 'deaths') {\r\n                valuesCurrent = valuesDeathsTotal\r\n            }\r\n            return {\r\n                ...state,\r\n                valuesConfirmedNew: valuesConfirmedNew,\r\n                valuesRecoveredNew: valuesRecoveredNew,\r\n                valuesDeathsNew: valuesDeathsNew,\r\n                valuesConfirmedTotal: valuesConfirmedTotal,\r\n                valuesRecoveredTotal: valuesRecoveredTotal,\r\n                valuesDeathsTotal: valuesDeathsTotal,\r\n                valuesCurrent: valuesCurrent,\r\n                dates: dates\r\n            };\r\n        }\r\n\r\n        case SET_TYPE: {\r\n            return {...state, type: action.typeValue}\r\n        }\r\n\r\n        case SET_MOUSE_XY: {\r\n            let showInfo;\r\n            // определение надо ли показывать Info\r\n            if (action.mouseX > CANVAS.marginLeftX + CANVAS.paddingLeftX\r\n                && action.mouseX < CANVAS.canvasW() - CANVAS.marginRightX\r\n                && action.mouseY < CANVAS.canvasH() - CANVAS.marginY) {\r\n                showInfo = true;\r\n            } else {\r\n                showInfo = false;\r\n            }\r\n\r\n            // определение infoValue и infoDate, определение координат вертикальной линии и точки\r\n            let valueMin = Math.min.apply(null, state.valuesCurrent.filter(el => el !== null));\r\n            let valueMax = Math.max.apply(null, state.valuesCurrent.filter(el => el !== null));\r\n            let DELTA = valueMax - valueMin;\r\n            let deltaGridY = CANVAS.deltaGridYf(DELTA); // шаг координатной сетки по оси Y\r\n            let valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);\r\n            let valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);\r\n            let deltaX = (CANVAS.canvasW() - CANVAS.marginLeftX - CANVAS.marginRightX - CANVAS.paddingLeftX) / (state.period - 1);\r\n            let deltaY = (CANVAS.canvasH() - CANVAS.marginY) / (valueMaxGrid - valueMinGrid);\r\n\r\n            let canvasX = (i) => {\r\n                return CANVAS.marginLeftX + CANVAS.paddingLeftX + i * deltaX;\r\n            };\r\n\r\n            let canvasY = (value) => {\r\n                return CANVAS.canvasH() - CANVAS.marginY - deltaY * (value - valueMinGrid);\r\n            }\r\n\r\n            let iPoint = Math.round((action.mouseX - CANVAS.paddingLeftX - CANVAS.marginLeftX) / deltaX);\r\n            let xPoint = canvasX(iPoint);// координата вертикальной линии и точки\r\n            let yPoint;// координата точки\r\n            if (state.valuesCurrent[iPoint] !== null) {\r\n                yPoint = canvasY(state.valuesCurrent[iPoint]);\r\n            } else {\r\n                yPoint = null;\r\n            }\r\n            let infoValue = state.valuesCurrent[iPoint];\r\n            if (infoValue === null) {\r\n                infoValue = 'no data';\r\n            }\r\n            let infoDate = state.dates[iPoint];\r\n\r\n            return {\r\n                ...state, mouseX: action.mouseX, mouseY: action.mouseY,\r\n                showInfo: showInfo, infoValue: infoValue, infoDate: infoDate,\r\n                xPoint: xPoint, yPoint: yPoint\r\n            }\r\n        }\r\n\r\n        case SET_MOUSE_HOVER_CANVAS: {\r\n            return {...state, mouseHoverCanvas: action.value}\r\n        }\r\n\r\n        case SET_CASE_TYPE: {\r\n            return {...state, caseType: action.caseType}\r\n        }\r\n\r\n        case SET_CURRENT_VALUES: {\r\n            // action.typeTime\r\n            // action.caseType\r\n            let values;\r\n            if (action.typeTime === 'byDay' && action.caseType === 'confirmed') {\r\n                values = state.valuesConfirmedNew\r\n            }\r\n            if (action.typeTime === 'total' && action.caseType === 'confirmed') {\r\n                values = state.valuesConfirmedTotal\r\n            }\r\n            if (action.typeTime === 'byDay' && action.caseType === 'recovered') {\r\n                values = state.valuesRecoveredNew\r\n            }\r\n            if (action.typeTime === 'total' && action.caseType === 'recovered') {\r\n                values = state.valuesRecoveredTotal\r\n            }\r\n            if (action.typeTime === 'byDay' && action.caseType === 'deaths') {\r\n                values = state.valuesDeathsNew\r\n            }\r\n            if (action.typeTime === 'total' && action.caseType === 'deaths') {\r\n                values = state.valuesDeathsTotal\r\n            }\r\n            return {...state, valuesCurrent: values}\r\n        }\r\n\r\n        case SET_SHOW_INFO: {\r\n            return {...state, showInfo: action.showInfo}\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const toggleLoading = (isLoading) => ({type: TOGGLE_LOADING, isLoading});\r\nexport const setCountriesData = (countriesData) => ({type: SET_COUNTRIES_DATA, countriesData});\r\nexport const setCurrentCountry = (country) => ({type: SET_CURRENT_COUNTRY, country});\r\nexport const setPeriod = (period) => ({type: SET_PERIOD, period});\r\nexport const setPeriodByFirstDay = (data) => ({type: SET_PERIOD_BY_FIRST_DAY, data});\r\nexport const setDateEnd = (data) => ({type: SET_DATE_END, data});\r\nexport const setValues = (values, type, caseType) => ({type: SET_VALUES, values, typeTime: type, caseType});\r\nexport const setType = (typeValue) => ({type: SET_TYPE, typeValue});\r\nexport const setMouseXY = (mouseX, mouseY) => ({type: SET_MOUSE_XY, mouseX, mouseY});\r\nexport const setMouseHoverCanvas = (value) => ({type: SET_MOUSE_HOVER_CANVAS, value});\r\nexport const setCaseType = (caseType) => ({type: SET_CASE_TYPE, caseType});\r\nexport const setCurrentValues = (type, caseType) => ({type: SET_CURRENT_VALUES, typeTime: type, caseType});\r\nexport const setShowInfo = (showInfo) => ({type: SET_SHOW_INFO, showInfo});\r\n\r\n// 1 - получение списка стран, 2 - получение актуальной последней даты, 3 - получить значения\r\nexport const getInitial = (period, country, type, caseType) => dispatch => {\r\n    dispatch(toggleLoading(true));\r\n    statisticAPI.getCountries()\r\n        .then(data => {\r\n            dispatch(setCountriesData(data));\r\n            return statisticAPI.getDateEnd(country)\r\n        })\r\n        .then(data => {\r\n            dispatch(setDateEnd(data));\r\n            let dateEndAPI = data[data.length - 1].Date;//API\r\n            let dateEndJS = DATE.dateAPIToJs(dateEndAPI);\r\n            // массив values имеет длину period + 1 для определения величины за день\r\n            // valuesDay[0] = valuesTotal[0] - valuesTotal[-1]\r\n            // для этого начальная дата в запросе меньше на день\r\n            let dateStartJS = new Date(dateEndJS.getTime() - (period) * 24 * 60 * 60 * 1000);\r\n            let dateStartAPI = DATE.dateJsToAPI(dateStartJS);\r\n            return statisticAPI.getValues(country, dateStartAPI, dateEndAPI)\r\n        })\r\n        .then(data => {\r\n            dispatch(setValues(data, type, caseType));\r\n            dispatch(toggleLoading(false));\r\n        })\r\n}\r\n\r\nexport const getValues = (dateEnd, period, country, type, caseType) => dispatch => {\r\n    dispatch(toggleLoading(true));\r\n\r\n    if (period === 7 || period === 14 || period === 30) {\r\n        let dateEndJS = DATE.dateAPIToJs(dateEnd);\r\n        let dateStartJS = new Date(dateEndJS.getTime() - (period) * 24 * 60 * 60 * 1000);\r\n        let dateStartAPI = DATE.dateJsToAPI(dateStartJS);\r\n        statisticAPI.getValues(country, dateStartAPI, dateEnd)\r\n            .then(data => {\r\n                dispatch(setValues(data, type, caseType));\r\n                dispatch(toggleLoading(false));\r\n            })\r\n    } else {\r\n        console.log('getValuesFromDayOne')\r\n        statisticAPI.getValuesFromDayOne(country)\r\n            .then(data => {\r\n                dispatch(setPeriodByFirstDay(data));\r\n                dispatch(setValues(data, type, caseType));\r\n                dispatch(toggleLoading(false));\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport default statisticReducer;","import React from 'react';\r\nimport style from './CountryStatistic.module.css';\r\n\r\nconst Country = (props) => {\r\n        let onChange = (e) => {\r\n        props.setCurrentCountry(e.currentTarget.value);\r\n\r\n    }\r\n    let optionElements = props.countriesData.map((el, i) =>\r\n        (<option key={i} value={el.Country}>\r\n            {el.Country}\r\n        </option>))\r\n    return (\r\n        <select onChange={onChange} value={props.currentCountry} className={style.select}>\r\n            {optionElements}\r\n        </select>\r\n    )\r\n};\r\n\r\nexport default Country;\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {setCurrentCountry} from \"../../../../store/statistic-reducer\";\r\nimport Country from \"./Country\";\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currentCountry: state.statisticPage.currentCountry,\r\n    countriesData: state.statisticPage.countriesData\r\n});\r\n\r\nconst CountryContainer = connect(mapStateToProps, {setCurrentCountry})(Country);\r\n\r\nexport default CountryContainer;","import React from 'react';\r\nimport style from './Period.module.css';\r\n\r\nconst Period = (props) => {\r\n    let onChange = (e) => {\r\n        props.setPeriod(e.currentTarget.value);\r\n    }\r\n    let options = [['1 week', 7], ['2 weeks', 14], ['30 days', 30], ['by start', -1]];\r\n    let optionElements = options.map((el, i) =>\r\n        (<option key={i} value={el[1]}>\r\n            {el[0]}\r\n        </option>))\r\n    return (\r\n        <select onChange={onChange} value={props.periodInput} className={style.select}>\r\n            {optionElements}\r\n        </select>\r\n    )\r\n};\r\n\r\nexport default Period;\r\n\r\n","import {connect} from \"react-redux\";\r\nimport Period from \"./Period\";\r\nimport {setPeriod} from \"../../../../store/statistic-reducer\";\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    periodInput: state.statisticPage.periodInput,\r\n});\r\n\r\nconst PeriodContainer = connect(mapStateToProps, {setPeriod})(Period);\r\n\r\nexport default PeriodContainer;","import React from 'react';\r\nimport style from './Type.module.css';\r\n\r\nconst Type = (props) => {\r\n    let onChange = (e) => {\r\n        props.setType(e.currentTarget.value);\r\n        props.setCurrentValues(e.currentTarget.value, props.caseType)\r\n    }\r\n\r\n    return (\r\n        <select onChange={onChange} value={props.type} className={style.select}>\r\n            <option value={'byDay'}>by day</option>\r\n            <option value={'total'}>total</option>\r\n        </select>\r\n    )\r\n};\r\n\r\nexport default Type;\r\n\r\n","import {connect} from \"react-redux\";\r\nimport Type from \"./Type\";\r\nimport {setCurrentValues, setType} from \"../../../../store/statistic-reducer\";\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    type: state.statisticPage.type,\r\n    caseType: state.statisticPage.caseType\r\n});\r\n\r\nconst TypeContainer = connect(mapStateToProps, {setType, setCurrentValues})(Type);\r\n\r\nexport default TypeContainer;","import React from 'react';\r\nimport style from './Info.module.css';\r\nimport {CANVAS} from \"../../../../../DAL/canvas\";\r\n\r\nconst Info = (props) => {\r\n\r\n    let left;\r\n    const deltaX = (CANVAS.canvasW() - CANVAS.marginLeftX - CANVAS.marginRightX - CANVAS.paddingLeftX) / (props.period - 1);\r\n    let canvasX = (i) => {\r\n        return CANVAS.marginLeftX + CANVAS.paddingLeftX + i * deltaX;\r\n    }\r\n    let iMouseGrid = Math.round((props.mouseX - CANVAS.paddingLeftX - CANVAS.marginLeftX) / deltaX);\r\n    let xMouseGrid = canvasX(iMouseGrid);\r\n    if (props.mouseX > CANVAS.marginLeftX + CANVAS.paddingLeftX\r\n        && props.mouseX < CANVAS.canvasW() - CANVAS.marginRightX) {\r\n        left = xMouseGrid;\r\n    }\r\n\r\n    let styleInfo = {\r\n        top: props.mouseY - 50,\r\n        left: left + 10\r\n    };\r\n    let colorValue;\r\n    if (props.caseType === 'confirmed') colorValue = 'red';\r\n    if (props.caseType === 'recovered') colorValue = 'green';\r\n    if (props.caseType === 'deaths') colorValue = 'blue';\r\n    let styleValue = {\r\n        color: colorValue\r\n    }\r\n\r\n    let onMouseEnter = () => {\r\n        props.setMouseHoverCanvas(true);\r\n    };\r\n\r\n    let onMouseLeave = () => {\r\n        props.setMouseHoverCanvas(false);\r\n    }\r\n\r\n    return (\r\n        <div onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave} style={styleInfo} className={style.info}>\r\n            <div style={styleValue} className={style.value}>{props.infoValue}</div>\r\n            <div>{props.infoDate}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Info;","import {connect} from \"react-redux\";\r\nimport Info from \"./Info\";\r\nimport {setMouseHoverCanvas} from \"../../../../../store/statistic-reducer\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n    mouseX: state.statisticPage.mouseX,\r\n    period: state.statisticPage.period,\r\n    caseType: state.statisticPage.caseType,\r\n    mouseY: state.statisticPage.mouseY,\r\n    infoValue: state.statisticPage.infoValue,\r\n    infoDate: state.statisticPage.infoDate\r\n})\r\n\r\n\r\nconst InfoContainer = connect(mapStateToProps,{setMouseHoverCanvas})(Info);\r\n\r\nexport default InfoContainer;","import React from 'react';\r\nimport style from './Date.module.css'\r\n\r\nconst Date = (props) => {\r\n    let styleInline = {top: props.top, left: props.left}\r\n    return (\r\n        <div className={style.value} style={styleInline}>\r\n            {props.value}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Date;","import React from 'react';\r\nimport Date from \"./Date/Date\";\r\n\r\nconst Dates = (props) => {\r\n    let k = 1;\r\n    if (+props.period === 30) {\r\n        k = 2\r\n    } else if (+props.period > 30) {\r\n        k = Math.floor(+props.period/16);\r\n    }\r\n    let datesElements = props.dates.map((date, i) => (i % k === 0) ?\r\n        <Date key={i} value={date} top={props.top} left={props.leftArr[i]}/> : null)\r\n    return (\r\n        <>\r\n            {datesElements}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Dates;","import React from 'react';\r\nimport {CANVAS} from \"../../../../../DAL/canvas\";\r\nimport Dates from \"./Dates\";\r\n\r\nconst DatesContainer = (props) => {\r\n        const deltaX = (CANVAS.canvasW() - CANVAS.marginLeftX - CANVAS.marginRightX - CANVAS.paddingLeftX) / (props.period - 1);\r\n        let canvasX = (i) => {\r\n            return CANVAS.marginLeftX + CANVAS.paddingLeftX + i * deltaX;\r\n        };\r\n        let top = CANVAS.canvasH() - CANVAS.marginY;\r\n        let leftArr = [];\r\n        for (let i = 0; i < props.dates.length; i++){\r\n            leftArr.push(canvasX(i));\r\n        }\r\n\r\n    return (\r\n       <Dates dates={props.dates}\r\n              period={props.period}\r\n              top={top}\r\n              leftArr={leftArr}/>\r\n    )\r\n};\r\n\r\nexport default DatesContainer;","import React from 'react';\r\nimport style from './Value.module.css'\r\n\r\nconst Value = (props) => {\r\n    let styleInline = {top: props.top, left: props.left}\r\n    return (\r\n        <div className={style.value} style={styleInline}>\r\n            {props.value}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Value;","import React from 'react';\r\nimport Value from \"./Value/Value\";\r\n\r\nconst Values = (props) => {\r\n       let valuesElements = props.valuesArr.map((el, i) => <Value key={i} value={el} top={props.topArr[i]} left={props.left}/>)\r\n       return (\r\n        <>\r\n            {valuesElements}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Values;","import React from 'react';\r\nimport {CANVAS} from \"../../../../../DAL/canvas\";\r\nimport Values from \"./Values\";\r\n\r\nconst ValuesContainer = (props) => {\r\n    const valueMin = Math.min.apply(null, props.values.filter(el => el !== null));\r\n    const valueMax = Math.max.apply(null, props.values.filter(el => el !== null));\r\n    const DELTA = valueMax - valueMin;\r\n    let deltaGridY, valueMinGrid, valueMaxGrid, deltaY, canvasY, valuesArr = [], topArr = [];\r\n    if (DELTA !== 0) {\r\n        deltaGridY = CANVAS.deltaGridYf(DELTA); // шаг координатной сетки по оси Y\r\n        valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);\r\n        valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);\r\n        deltaY = (CANVAS.canvasH() - CANVAS.marginY) / (valueMaxGrid - valueMinGrid);\r\n        canvasY = (value) => {\r\n            return CANVAS.canvasH() - CANVAS.marginY - deltaY * (value - valueMinGrid);\r\n        };\r\n        let y = valueMinGrid;\r\n        while (true) {\r\n            valuesArr.push(y);\r\n            topArr.push(canvasY(y));\r\n            y += deltaGridY;\r\n            if (y > valueMaxGrid - deltaGridY) {\r\n                valuesArr.push(y);\r\n                topArr.push(canvasY(y));\r\n                break\r\n            }\r\n        }\r\n    } else { // если все значения одинаковы\r\n        valuesArr = [valueMax];\r\n        topArr = [CANVAS.canvasH()/2 - CANVAS.marginY]\r\n    }\r\n\r\n    let left = CANVAS.marginLeftX - 5;\r\n\r\n    return <Values valuesArr={valuesArr}\r\n                   topArr={topArr}\r\n                   left={left}/>\r\n};\r\n\r\nexport default ValuesContainer;","import React from 'react';\r\nimport style from './Canvas.module.css';\r\nimport {CANVAS} from \"../../../../DAL/canvas\";\r\nimport InfoContainer from \"./Info/InfoContainer\";\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport DatesContainer from \"./Dates/DatesContainer\";\r\nimport ValuesContainer from \"./Values/ValuesContainer\";\r\n\r\nclass Canvas extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.marginLeftX = CANVAS.marginLeftX;\r\n        this.paddingLeftX = CANVAS.paddingLeftX;\r\n        this.marginRightX = CANVAS.marginRightX;\r\n        this.marginY = CANVAS.marginY; // вниз\r\n        this.canvasW = CANVAS.canvasW();\r\n        this.canvasH = CANVAS.canvasH();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawCanvasAxis();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        let valueIsExists = !!this.props.valuesCurrent && !!this.props.valuesCurrent.length;\r\n        if (valueIsExists && prevProps.valuesCurrent !== this.props.valuesCurrent) {\r\n            this.drawCanvasGraph();\r\n        }\r\n        if (valueIsExists && this.props.mouseHoverCanvas && this.props.showInfo &&\r\n            (prevProps.mouseX !== this.props.mouseX || prevProps.mouseY !== this.props.mouseY)) {\r\n            this.drawCanvasPoint();\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////\r\n    // оси координат - рисуются только при вставке компонента\r\n    /////////////////////////////////////////////////////////\r\n    drawCanvasAxis = () => {\r\n        let ctx = this.refs.canvasAxis.getContext('2d');\r\n        ctx.clearRect(0, 0, this.canvasW, this.canvasH);\r\n        ctx.fillStyle = '#fff';\r\n        ctx.fillRect(0, 0, this.canvasW, this.canvasH);\r\n        ctx.strokeStyle = '#aaa';\r\n        ctx.lineWidth = 4;\r\n        ctx.setLineDash([]);\r\n        ctx.beginPath();\r\n        ctx.moveTo(CANVAS.marginLeftX, 0);\r\n        ctx.lineTo(CANVAS.marginLeftX, CANVAS.canvasH() - CANVAS.marginY);\r\n        ctx.moveTo(CANVAS.marginLeftX, CANVAS.canvasH() - CANVAS.marginY);\r\n        ctx.lineTo(CANVAS.canvasW(), CANVAS.canvasH() - CANVAS.marginY);\r\n        ctx.stroke();\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////\r\n    // график и горизонтальные линии\r\n    ////////////////////////////////////////////////////////////////////\r\n    drawCanvasGraph = () => {\r\n        // let period;\r\n        // if (this.props.period !== -1) {\r\n        //     period = this.props.period;\r\n        // } else {\r\n        //     period = this.props.periodByFirstDay;\r\n        // }\r\n        let values = this.props.valuesCurrent;\r\n        const valueMin = Math.min.apply(null, values.filter(el => el !== null));\r\n        const valueMax = Math.max.apply(null, values.filter(el => el !== null));\r\n        const DELTA = valueMax - valueMin;\r\n        const deltaX = (this.canvasW - this.marginLeftX - this.marginRightX - this.paddingLeftX) / (this.props.period - 1);\r\n        let canvasX = (i) => {\r\n            return this.marginLeftX + this.paddingLeftX + i * deltaX;\r\n        };\r\n\r\n        let deltaGridY, valueMinGrid, valueMaxGrid, deltaY;\r\n        if (DELTA !== 0) {\r\n            deltaGridY = CANVAS.deltaGridYf(DELTA); // шаг координатной сетки по оси Y\r\n            valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);\r\n            valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);\r\n            deltaY = (this.canvasH - this.marginY) / (valueMaxGrid - valueMinGrid);\r\n        }\r\n        let canvasY = (value) => {\r\n            if (DELTA !== 0) {\r\n                return this.canvasH - this.marginY - deltaY * (value - valueMinGrid);\r\n            } else {\r\n                return (this.canvasH) / 2 - this.marginY;\r\n            }\r\n        }\r\n\r\n        let ctx = this.refs.canvasGraph.getContext('2d');\r\n        ctx.clearRect(0, 0, this.canvasW, this.canvasH);\r\n        ctx.fillStyle = 'transparent';\r\n        ctx.fillRect(0, 0, this.canvasW, this.canvasH);\r\n\r\n        //горизонтальные линии\r\n        if (DELTA !== 0) {\r\n            ctx.strokeStyle = '#cccccc';\r\n            ctx.lineWidth = 1;\r\n            ctx.setLineDash([]);\r\n            let yLineStart = valueMinGrid;\r\n            while (true) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(this.marginLeftX, canvasY(yLineStart));\r\n                ctx.lineTo(this.canvasW, canvasY(yLineStart));\r\n                ctx.stroke();\r\n                yLineStart += deltaGridY;\r\n                if (yLineStart > valueMaxGrid) {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        // график 'confirmed', 'recovered', 'deaths'\r\n        if (this.props.caseType === 'confirmed') ctx.strokeStyle = 'red';\r\n        if (this.props.caseType === 'recovered') ctx.strokeStyle = 'green';\r\n        if (this.props.caseType === 'deaths') ctx.strokeStyle = 'blue';\r\n        ctx.lineWidth = 3;\r\n        ctx.setLineDash([]);\r\n        for (let i = 0; i < this.props.period; i++) {\r\n            if (i === 0) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(canvasX(i), canvasY(values[i]));\r\n            }\r\n            if (i > 0) {\r\n                if (values[i - 1] !== null && values[i] !== null) {\r\n                    ctx.lineTo(canvasX(i), canvasY(values[i]));\r\n                }\r\n                if (values[i - 1] !== null && values[i] === null) {\r\n                    ctx.lineTo(canvasX(i - 1), canvasY(valueMinGrid));\r\n                    ctx.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                }\r\n                if (values[i - 1] == null && values[i] !== null) {\r\n                    ctx.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                    ctx.lineTo(canvasX(i), canvasY(values[i]));\r\n                }\r\n                if (values[i - 1] == null && values[i] == null) {\r\n                    ctx.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                }\r\n            }\r\n            if (i === this.props.period - 1) {\r\n                ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // точка и верткальная линия - рисуетя только при наведении мыши на канвас\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    drawCanvasPoint = () => {\r\n\r\n        let ctx = this.refs.canvasPoint.getContext('2d');\r\n        ctx.clearRect(0, 0, this.canvasW, this.canvasH);\r\n        ctx.fillStyle = 'transparent';\r\n        ctx.fillRect(0, 0, this.canvasW, this.canvasH);\r\n\r\n        if (this.props.mouseHoverCanvas) {\r\n            // вертикальная линия\r\n            ctx.strokeStyle = '#000000';\r\n            ctx.lineWidth = 1;\r\n            ctx.setLineDash([2, 1]);\r\n            ctx.beginPath();\r\n            //let iMouseGrid = Math.round((this.props.mouseX - this.paddingLeftX - this.marginLeftX) / deltaX);\r\n            //let xMouseGrid = canvasX(iMouseGrid);\r\n            if (this.props.mouseX > this.marginLeftX + this.paddingLeftX\r\n                && this.props.mouseX < this.canvasW - this.marginRightX) {\r\n                ctx.moveTo(this.props.xPoint, 0);\r\n                ctx.lineTo(this.props.xPoint, this.canvasH - this.marginY);\r\n                ctx.stroke();\r\n            }\r\n\r\n            // точка\r\n            if (this.props.yPoint !== null) {\r\n                let color;\r\n                if (this.props.caseType === 'confirmed') color = 'red';\r\n                if (this.props.caseType === 'recovered') color = 'green';\r\n                if (this.props.caseType === 'deaths') color = 'blue';\r\n                ctx.strokeStyle = color;\r\n                ctx.lineWidth = 4;\r\n                ctx.lineJoin = 'round';\r\n                ctx.setLineDash([]);\r\n                ctx.beginPath();\r\n                ctx.arc(this.props.xPoint, this.props.yPoint, 3, 0, 2 * Math.PI);\r\n                ctx.stroke();\r\n                ctx.fillStyle = color;\r\n                ctx.fill();\r\n            }\r\n        }\r\n    };\r\n\r\n    onMouseMove = (e) => {\r\n        const canvas = e.target.getBoundingClientRect();\r\n        let x = e.clientX - canvas.left;\r\n        let y = e.clientY - canvas.top;\r\n        this.props.setMouseXY(x, y);\r\n    };\r\n\r\n    onMouseEnter = () => {\r\n        this.props.setMouseHoverCanvas(true);\r\n    };\r\n\r\n    onMouseLeave = () => {\r\n        this.props.setMouseHoverCanvas(false);\r\n    };\r\n\r\n    render() {\r\n        let valueIsExists = !!this.props.valuesCurrent && !!this.props.valuesCurrent.length;\r\n        let canvasWrapperStyle = {\r\n            width: this.canvasW, height: this.canvasH\r\n        };\r\n        return (\r\n            <div className={style.canvas}>\r\n                <div className={style.canvasWrapper} style={canvasWrapperStyle}>\r\n                    {this.props.isLoading && <Preloader/>}\r\n                    {valueIsExists && this.props.showInfo && this.props.mouseHoverCanvas && <InfoContainer/>}\r\n                    {valueIsExists && <ValuesContainer values={this.props.valuesCurrent}/>}\r\n                    {valueIsExists && <DatesContainer values={this.props.valuesCurrent}\r\n                                                      dates={this.props.dates}\r\n                                                      period={this.props.period}/>}\r\n                    <canvas ref=\"canvasAxis\" width={this.canvasW} height={this.canvasH}\r\n                            className={style.canvasAxis}/>\r\n\r\n                    {valueIsExists && <canvas ref=\"canvasGraph\"\r\n                                              className={style.canvasGraph}\r\n                                              width={this.canvasW}\r\n                                              height={this.canvasH}\r\n                                              onMouseMove={this.onMouseMove}\r\n                                              onMouseEnter={this.onMouseEnter}\r\n                                              onMouseLeave={this.onMouseLeave}/>}\r\n                    {valueIsExists && this.props.mouseHoverCanvas && this.props.showInfo\r\n                    && <canvas ref=\"canvasPoint\"\r\n                               className={style.canvasPoint}\r\n                               width={this.canvasW}\r\n                               height={this.canvasH}\r\n                               onMouseMove={this.onMouseMove}\r\n                               onMouseEnter={this.onMouseEnter}\r\n                               onMouseLeave={this.onMouseLeave}/>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Canvas","import {connect} from \"react-redux\";\r\nimport {setMouseHoverCanvas, setMouseXY, setShowInfo} from \"../../../../store/statistic-reducer\";\r\nimport Canvas from \"./Canvas\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n    period: state.statisticPage.period,\r\n    //periodByFirstDay: state.statisticPage.periodByFirstDay,\r\n    valuesCurrent: state.statisticPage.valuesCurrent,\r\n    mouseHoverCanvas: state.statisticPage.mouseHoverCanvas,\r\n    mouseX: state.statisticPage.mouseX,\r\n    mouseY: state.statisticPage.mouseY,\r\n    dates: state.statisticPage.dates,\r\n    currentCountry: state.statisticPage.currentCountry,\r\n    type: state.statisticPage.type,\r\n    caseType: state.statisticPage.caseType,\r\n    showInfo: state.statisticPage.showInfo,\r\n    xPoint: state.statisticPage.xPoint,\r\n    yPoint: state.statisticPage.yPoint,\r\n    isLoading: state.statisticPage.isLoading\r\n});\r\n\r\nconst CanvasContainer = connect(mapStateToProps, {setMouseXY, setMouseHoverCanvas, setShowInfo})(Canvas);\r\n\r\nexport default CanvasContainer;","import React from 'react';\r\nimport style from './CaseType.module.css';\r\n\r\nconst CaseType = (props) => {\r\n\r\n    let onChange = (e) => {\r\n        props.setCaseType(e.currentTarget.value);\r\n        props.setCurrentValues(props.type, e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <select onChange={onChange} value={props.caseType} className={style.select}>\r\n            <option value={'confirmed'}>confirmed</option>\r\n            <option value={'recovered'}>recovered</option>\r\n            <option value={'deaths'}>deaths</option>\r\n        </select>\r\n    )\r\n};\r\n\r\nexport default CaseType;\r\n\r\n","import {connect} from \"react-redux\";\r\nimport CaseType from \"./CaseType\";\r\nimport {setCaseType, setCurrentValues} from \"../../../../store/statistic-reducer\";\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    caseType: state.statisticPage.caseType,\r\n    type: state.statisticPage.type\r\n});\r\n\r\nconst CaseTypeContainer = connect(mapStateToProps, {setCaseType, setCurrentValues})(CaseType);\r\n\r\nexport default CaseTypeContainer;","import React from 'react';\r\nimport style from './Statistic.module.css';\r\nimport CountryContainer from \"./Country/CountryContainer\";\r\nimport PeriodContainer from \"./Period/PeriodContainer\";\r\nimport TypeContainer from \"./Type/TypeContainer\";\r\nimport CanvasContainer from \"./Canvas/CanvasContainer\";\r\nimport CaseTypeContainer from \"./CaseType/CaseTypeContainer\";\r\n\r\n\r\nconst Statistic = (props) => {\r\n\r\n    return (\r\n        <div className={style.statistic}>\r\n            <div className={style.canvas}>\r\n                <CanvasContainer/>\r\n                <div>{`mouseHoverCanvas = ${props.mouseHoverCanvas}`}</div>\r\n                <div>{`showInfo = ${props.showInfo}`}</div>\r\n            </div>\r\n            <div className={style.selects}>\r\n                <div className={style.selectBlock}>\r\n                    <div className={style.selectTitle}>Select period:</div>\r\n                    <div><PeriodContainer/></div>\r\n                </div>\r\n                <div className={style.selectBlock}>\r\n                    <div className={style.selectTitle}>by day / total:</div>\r\n                    <div><TypeContainer/></div>\r\n                </div>\r\n                <div className={style.selectBlock}>\r\n                    <div className={style.selectTitle}>case type:</div>\r\n                    <div><CaseTypeContainer/></div>\r\n                </div>\r\n            </div>\r\n            <div className={style.selects}>\r\n                <div className={style.selectBlock}>\r\n                    <div className={style.selectTitle}>Select country:</div>\r\n                    <div><CountryContainer/></div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Statistic;","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport Statistic from \"./Statistic\";\r\nimport {getInitial, getValues} from \"../../../store/statistic-reducer\";\r\n\r\nclass StatisticAJAX extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getInitial(this.props.period, this.props.currentCountry, this.props.type, this.props.caseType);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.period !== this.props.period || prevProps.currentCountry !== this.props.currentCountry) {\r\n            this.props.getValues(this.props.dateEnd, this.props.period, this.props.currentCountry, this.props.type, this.props.caseType)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Statistic\r\n            mouseHoverCanvas={this.props.mouseHoverCanvas}\r\n            showInfo={this.props.showInfo}\r\n        />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = state => {\r\n    return {\r\n        isLoading: state.statisticPage.isLoading,\r\n        period: state.statisticPage.period,\r\n        currentCountry: state.statisticPage.currentCountry,\r\n        xPoint: state.statisticPage.xPoint,\r\n        yPoint: state.statisticPage.yPoint,\r\n        dateEnd: state.statisticPage.dateEnd,\r\n        type: state.statisticPage.type,\r\n        caseType: state.statisticPage.caseType,\r\n        showInfo: state.statisticPage.showInfo,\r\n        mouseHoverCanvas: state.statisticPage.mouseHoverCanvas\r\n    }\r\n}\r\n\r\nlet StatisticContainer = connect(mapStateToProps, {getInitial, getValues})(StatisticAJAX);\r\n\r\nexport default StatisticContainer;","import React from 'react';\r\nimport style from './Main.module.css'\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport Home from \"./Home/Home\";\r\nimport SummaryContainer from \"./Summary/SummaryContainer\";\r\nimport StatisticContainer from \"./Statistic/StatisticContainer\";\r\n\r\nconst Main = () => {\r\n    return (\r\n        <div className={style.main}>\r\n            <Switch>\r\n                <Route exact path='/covid' render={() => <Home/>}/>\r\n                <Route exact path='/' render={() => <Home/>}/>\r\n                <Route path='/summary' render={() => <SummaryContainer/>}/>\r\n                <Route path='/statistic' render={() => <StatisticContainer/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport style from './App.module.css';\nimport Header from \"./components/Header/Header\";\nimport Main from \"./components/Main/Main\";\n\nconst App = () => {\n    return (\n        <div className={style.appWrapper}>\n            <Header/>\n            <Main/>\n        </div>\n    )\n};\n\nexport default App;","import thunkMiddleware from 'redux-thunk';\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport summaryReducer from \"./summary-reducer\";\r\nimport statisticReducer from \"./statistic-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    summaryPage: summaryReducer,\r\n    statisticPage: statisticReducer\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\nimport store from './store/store'\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__TcyHl\",\"logo\":\"Header_logo__1bG8r\",\"nav\":\"Header_nav__FqsW2\",\"navItem\":\"Header_navItem__2y3HY\",\"active\":\"Header_active__fu_PZ\"};"],"sourceRoot":""}