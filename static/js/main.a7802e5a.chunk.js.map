{"version":3,"sources":["components/Main/Statistic/Canvas/Canvas.module.css","components/Main/Summary/SummaryItems/SummaryItem/SummaryItem.module.css","components/Main/Statistic/Canvas/Info/Info.module.css","App.module.css","components/Main/Main.module.css","components/Main/Statistic/Country/CountryStatistic.module.css","components/common/Preloader/Preloader.module.css","assets/preloader/circles.svg","components/Main/Statistic/Canvas/Dates/Date/Date.module.css","components/Main/Statistic/Canvas/Values/Value/Value.module.css","components/Main/Statistic/Statistic.module.css","components/Main/Summary/Summary.module.css","components/Header/Header.jsx","DAL/date.js","DAL/api.js","DAL/canvas.js","store/statistic-reducer.js","components/Main/Statistic/Country/Country.jsx","components/Main/Statistic/Country/CountryContainer.jsx","components/Main/Statistic/Period/Period.jsx","components/Main/Statistic/Period/PeriodContainer.jsx","components/Main/Statistic/Type/Type.jsx","components/Main/Statistic/Type/TypeContainer.jsx","components/Main/Statistic/Canvas/Info/Info.jsx","components/Main/Statistic/Canvas/Info/InfoContainer.jsx","components/common/Preloader/Preloader.jsx","components/Main/Statistic/Canvas/Dates/Date/Date.jsx","components/Main/Statistic/Canvas/Dates/Dates.jsx","components/Main/Statistic/Canvas/Dates/DatesContainer.jsx","components/Main/Statistic/Canvas/Values/Value/Value.jsx","components/Main/Statistic/Canvas/Values/Values.jsx","components/Main/Statistic/Canvas/Values/ValuesContainer.jsx","components/Main/Statistic/Canvas/Canvas.jsx","components/Main/Statistic/Canvas/CanvasContainer.jsx","components/Main/Statistic/CaseType/CaseType.jsx","components/Main/Statistic/CaseType/CaseTypeContainer.jsx","components/Main/Statistic/Statistic.jsx","components/Main/Home/Home.jsx","components/Main/Summary/SummaryItems/SummaryItem/SummaryItem.jsx","components/Main/Summary/SummaryItems/SummaryItems.jsx","store/summary-reducer.js","components/Main/Summary/Country/Country.jsx","components/Main/Summary/Country/CountryContainer.jsx","components/Main/Summary/Summary.jsx","components/Main/Summary/SummaryContainer.jsx","components/Main/Statistic/StatisticContainer.jsx","components/Main/Main.jsx","App.jsx","store/store.js","index.jsx","components/Header/Header.module.css"],"names":["module","exports","Header","className","style","header","logo","nav","to","navItem","activeClassName","active","DATE","getCurrentDate","Date","dateJsToAPI","date","year","getFullYear","month","getMonth","day","getDate","dateAPIToJs","slice","getStartPeriodDate","period","endPeriodDateJS","this","startPeriodDateJS","getTime","getStartPeriodDateActual","getDates","dateEnd","dates","i","push","instance","axios","baseURL","summaryAPI","get","then","response","data","statisticAPI","country","dateStart","CANVAS","marginLeftX","paddingLeftX","marginRightX","marginY","canvasW","canvasH","deltaGridYf","DELTA","stateInitial","isLoading","countriesData","currentCountry","valuesConfirmedNew","valuesConfirmedTotal","valuesRecoveredNew","valuesRecoveredTotal","valuesDeathsNew","valuesDeathsTotal","type","mouseX","mouseY","mouseHoverCanvas","caseType","valuesCurrent","showInfo","infoValue","infoDate","xPoint","yPoint","toggleLoading","setValues","values","typeTime","setMouseHoverCanvas","value","setCurrentValues","statisticReducer","state","action","sort","a","b","Country","length","Confirmed","Recovered","Deaths","typeValue","valueMin","Math","min","apply","filter","el","valueMax","max","deltaGridY","valueMinGrid","floor","valueMaxGrid","ceil","deltaX","deltaY","canvasX","canvasY","iPoint","round","props","optionElements","map","key","onChange","e","setCurrentCountry","currentTarget","select","CountryContainer","connect","statisticPage","Period","setPeriod","PeriodContainer","Type","setType","TypeContainer","Info","left","iMouseGrid","xMouseGrid","colorValue","styleInfo","top","styleValue","color","onMouseEnter","onMouseLeave","info","InfoContainer","Preloader","preloader","src","alt","styleInline","Dates","k","datesElements","leftArr","DatesContainer","Value","Values","valuesElements","valuesArr","topArr","ValuesContainer","y","Canvas","drawCanvasAxis","ctx","refs","canvasAxis","getContext","clearRect","fillStyle","fillRect","strokeStyle","lineWidth","setLineDash","beginPath","moveTo","lineTo","stroke","drawCanvasGraph","canvasGraph","yLineStart","drawCanvasPoint","canvasPoint","lineJoin","arc","PI","fill","onMouseMove","canvas","target","getBoundingClientRect","x","clientX","clientY","setMouseXY","prevProps","prevState","snapshot","valueIsExists","canvasWrapperStyle","width","height","canvasWrapper","ref","React","Component","CanvasContainer","setShowInfo","CaseType","setCaseType","CaseTypeContainer","Statistic","statistic","selects","selectBlock","selectTitle","Home","SummaryItem","itemStyle","item","SummaryItems","SummaryItemElements","cases","items","global","countries","countriesList","summaryReducer","NewConfirmed","TotalConfirmed","NewRecovered","TotalRecovered","NewDeaths","TotalDeaths","find","changeCases","summaryPage","Summary","summary","blocks","block","title","SummaryAJAX","getInitial","SummaryContainer","dispatch","Global","Countries","setCountriesList","StatisticAJAX","getValues","StatisticContainer","setDateEnd","dateEndAPI","dateEndJS","dateStartJS","dateStartAPI","Main","main","exact","path","render","App","appWrapper","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a7802e5a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"Canvas_canvas__1oeia\",\"canvasWrapper\":\"Canvas_canvasWrapper__H74z-\",\"canvasAxis\":\"Canvas_canvasAxis__1Bly_\",\"canvasGraph\":\"Canvas_canvasGraph__2HJMp\",\"canvasPoint\":\"Canvas_canvasPoint__2p_Lg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SummaryItem_item__2BGAE\",\"type\":\"SummaryItem_type__2bPut\",\"value\":\"SummaryItem_value__3yGm9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"Info_info__2gkNM\",\"value\":\"Info_value__3nvX_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__2lG0z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__2FTig\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"CountryStatistic_select__M0G8x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__2WkBw\"};","module.exports = __webpack_public_path__ + \"static/media/circles.1181204b.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"value\":\"Date_value__2cCah\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"value\":\"Value_value__3g19r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistic\":\"Statistic_statistic__ZlvCf\",\"selects\":\"Statistic_selects___zXZa\",\"selectBlock\":\"Statistic_selectBlock__2BVku\",\"selectTitle\":\"Statistic_selectTitle__34FJY\",\"canvas\":\"Statistic_canvas__Kiltp\",\"canvasInfo\":\"Statistic_canvasInfo__3hirp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"summary\":\"Summary_summary__1a_gv\",\"blocks\":\"Summary_blocks__2yTKK\",\"block\":\"Summary_block__Uxol1\",\"title\":\"Summary_title__idFCO\",\"date\":\"Summary_date__a2OlZ\"};","import React from 'react';\r\nimport style from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={style.header}>\r\n            <div className={style.logo}>\r\n                Covid\r\n            </div>\r\n            <nav className={style.nav}>\r\n                <NavLink to='/' className={style.navItem}>Home</NavLink>\r\n                <NavLink to='/summary' className={style.navItem} activeClassName={style.active}>Summary</NavLink>\r\n                <NavLink to='/statistic' className={style.navItem} activeClassName={style.active}>Statistic</NavLink>\r\n            </nav>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","export const DATE = {\r\n    // получение текущей даты\r\n    // RETURN - JS DATE\r\n    getCurrentDate() {\r\n        return new Date();\r\n    },\r\n\r\n    // перевод из формата js в формат API\r\n    dateJsToAPI(date) {\r\n        let year = date.getFullYear();\r\n        let month = date.getMonth() + 1;\r\n        if (month < 10) {\r\n            month = '0' + month;\r\n        }\r\n        let day = date.getDate();\r\n        if (day < 10) {\r\n            day = '0' + day;\r\n        }\r\n        return `${year}-${month}-${day}T00:00:00Z`;\r\n    },\r\n\r\n    // перевод даты из формата API в формат js\r\n    //\"2020-07-09T00:00:00Z\"\r\n    dateAPIToJs(date){\r\n       let year = date.slice(0,4);\r\n       let month = date.slice(5,7) - 1;\r\n       let day = date.slice(8,10)\r\n       return new Date(year, month, day);\r\n    },\r\n\r\n    // определение даты начала периода (зависит от текущей последней) в формате API\r\n    getStartPeriodDate(period) {\r\n        // period = 7, 14, 30\r\n        // return = API\r\n        let endPeriodDateJS = this.getCurrentDate();\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - period * 24 * 60 * 60 * 1000);\r\n        return this.dateJsToAPI(startPeriodDateJS);\r\n    },\r\n\r\n    // определение актуальной даты начала периода (зависит от актуальной последней) в формате API\r\n    getStartPeriodDateActual(period, date) {\r\n        // date = dateEnd, API\r\n        // period = 7, 14, 30\r\n        // return = API\r\n        let endPeriodDateJS = this.dateAPIToJs(date);\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - period * 24 * 60 * 60 * 1000);\r\n        return this.dateJsToAPI(startPeriodDateJS);\r\n    },\r\n\r\n    // получение массива дат для canvas в формате 'DD.MM'\r\n    getDates(period, dateEnd) {\r\n        // dateEnd = API\r\n        let dates = [];\r\n        let endPeriodDateJS = this.dateAPIToJs(dateEnd);\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - (period - 1) * 24 * 60 * 60 * 1000);\r\n        //console.log(`dateEndAPI - ${dateEnd}`)\r\n        //console.log(`dateEndJS - ${endPeriodDateJS}`)\r\n        //console.log(startPeriodDateJS)\r\n        for (let i = 0; i < period; i++){\r\n            let month = startPeriodDateJS.getMonth() + 1;\r\n            if (month < 10) {\r\n                month = '0' + month;\r\n            }\r\n            let day = startPeriodDateJS.getDate();\r\n            if (day < 10) {\r\n                day = '0' + day;\r\n            }\r\n            dates.push(`${day}.${month}`);\r\n            startPeriodDateJS = new Date(startPeriodDateJS.getTime() + 1 * 24 * 60 * 60 * 1000);\r\n        }\r\n        return dates;\r\n    }\r\n\r\n}","import * as axios from \"axios\";\r\nimport {DATE} from \"./date\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.covid19api.com/'\r\n});\r\n\r\nexport const summaryAPI = {\r\n    getInitial(){\r\n        return instance.get('summary')\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\n\r\n// total/country/russia?from=2020-07-05T00:00:00Z&to=2020-07-06T00:00:00Z\r\nexport const statisticAPI = {\r\n    getCountries(){\r\n        return instance.get('countries')\r\n            .then(response => response.data)\r\n    },\r\n    getValues(country, dateStart, dateEnd) {\r\n        return instance.get(`total/country/${country}?from=${dateStart}&to=${dateEnd}`)\r\n            .then(response => response.data)\r\n    },\r\n    // получение актуальной последней даты (может не совпадать с текущей или вчерашней)\r\n    getDateEnd(country){\r\n        let dateStart = DATE.getStartPeriodDate(2);\r\n        let dateEnd = DATE.dateJsToAPI(DATE.getCurrentDate());\r\n        return instance.get(`total/country/${country}?from=${dateStart}&to=${dateEnd}`)\r\n            .then(response => response.data)\r\n    }\r\n\r\n}","export const CANVAS = {\r\n    marginLeftX: 30,\r\n    paddingLeftX: 30,\r\n    marginRightX: 30,\r\n    marginY: 30, // вниз\r\n    canvasW: function() { return 800 + this.marginLeftX + this.paddingLeftX + this.marginRightX},\r\n    canvasH: function() { return 300 + this.marginY},\r\n    deltaGridYf(DELTA) {\r\n        if (DELTA <= 10) {\r\n            return 1;\r\n        } else if (DELTA > 10 && DELTA <= 50) {\r\n            return 5;\r\n        } else if (DELTA > 50 && DELTA <= 100) {\r\n            return 10;\r\n        } else if (DELTA > 100 && DELTA <= 500) {\r\n            return 50;\r\n        } else if (DELTA > 500 && DELTA <= 1000) {\r\n            return 100;\r\n        } else if (DELTA > 1000 && DELTA <= 5000) {\r\n            return 500;\r\n        } else if (DELTA > 5000 && DELTA <= 10000) {\r\n            return 1000;\r\n        } else if (DELTA > 10000 && DELTA <= 50000) {\r\n            return 5000;\r\n        } else if (DELTA > 50000 && DELTA <= 100000) {\r\n            return 10000;\r\n        } else if (DELTA > 100000 && DELTA <= 500000) {\r\n            return 50000;\r\n        } else if (DELTA > 500000 && DELTA <= 1000000) {\r\n            return 100000;\r\n        } else if (DELTA > 1000000 && DELTA <= 5000000) {\r\n            return 500000;\r\n        } else if (DELTA > 5000000 && DELTA <= 10000000) {\r\n            return 1000000;\r\n        }\r\n\r\n    }\r\n};","import {statisticAPI, summaryAPI} from \"../DAL/api\";\r\nimport {DATE} from \"../DAL/date\";\r\nimport {CANVAS} from \"../DAL/canvas\";\r\n\r\nconst TOGGLE_LOADING = 'TOGGLE-LOADING';\r\nconst SET_COUNTRIES_DATA = 'SET-COUNTRIES-DATA';\r\nconst SET_CURRENT_COUNTRY = 'SET-CURRENT-COUNTRY';\r\nconst SET_PERIOD = 'SET-PERIOD';\r\nconst SET_VALUES = 'SET-VALUES';\r\nconst SET_TYPE = 'SET-TYPE';\r\nconst SET_MOUSE_XY = 'SET-MOUSE-XY';\r\n\r\nconst SET_MOUSE_HOVER_CANVAS = 'SET-MOUSE-HOVER-CANVAS';\r\nconst SET_DATE_END = 'SET-DATE-END';\r\nconst SET_CASE_TYPE = 'SET-CASE-TYPE';\r\nconst SET_CURRENT_VALUES = 'SET-CURRENT-VALUES';\r\nconst SET_SHOW_INFO = 'SET_SHOW_INFO';\r\n\r\nlet stateInitial = {\r\n    isLoading: false,\r\n    // [{Country: 'Country', Slug: 'Slug', ISO2: 'ISO2'}, ...]\r\n    countriesData: [], // Список названий, слагов стран и ISO2\r\n    period: 14,\r\n    dateEnd: null, // последняя актуальная дата (в формате API)\r\n    dates: null,// массив дат в формате DD.MM\r\n    currentCountry: 'Australia', //'Russian Federation', // выбранная страна\r\n    valuesConfirmedNew: [], // [['DD MM YYYY', value], ....] new === by day\r\n    valuesConfirmedTotal: [], // [['DD MM YYYY', value], ....]\r\n    valuesRecoveredNew: [], // [['DD MM YYYY', value], ....] new === by day\r\n    valuesRecoveredTotal: [], // [['DD MM YYYY', value], ....]\r\n    valuesDeathsNew: [], // [['DD MM YYYY', value], ....] new === by day\r\n    valuesDeathsTotal: [], // [['DD MM YYYY', value], ....]\r\n    type: 'byDay', // 'byDay', 'total'\r\n    mouseX: null,\r\n    mouseY: null,\r\n    mouseHoverCanvas: false, // курсор над канвасом,\r\n    caseType: 'confirmed', // 'confirmed', 'recovered', 'deaths'\r\n    // зависит от type и caseType\r\n    // изменение происходит в getInitial, getValues - после получения данных с сервера\r\n    // в getInitial значения type и caseType из stateInitial\r\n    // в getValues - текущие выбранные\r\n    // также изменение в setCurrentValues без API запроса, по уже полученным данным\r\n    // в зависимости от выбранных параметров type и caseType\r\n    valuesCurrent: null,\r\n    showInfo: false, // показывать или нет\r\n    infoValue: null, // значение\r\n    infoDate: null, // дата\r\n    xPoint: null, // координаты точки и линии\r\n    yPoint: null  // координаты точки и линии\r\n\r\n};\r\n\r\nconst statisticReducer = (state = stateInitial, action) => {\r\n    switch (action.type) {\r\n\r\n        case TOGGLE_LOADING: {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n\r\n        case SET_COUNTRIES_DATA: {\r\n            action.countriesData.sort((a, b) => {\r\n                if (a.Country > b.Country) {\r\n                    return 1;\r\n                }\r\n                if (a.Country < b.Country) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            })\r\n            return {...state, countriesData: action.countriesData};\r\n        }\r\n\r\n        case SET_CURRENT_COUNTRY: {\r\n            return {...state, currentCountry: action.country};\r\n        }\r\n\r\n        case SET_PERIOD: {\r\n            // установка нового периода\r\n            // установка массив дат в формате DD.MM для canvas\r\n            let dates = DATE.getDates(action.period, state.dateEnd)\r\n            return {...state, period: action.period, dates: dates}\r\n        }\r\n\r\n        // установка актуальной даты конца периода\r\n        // установка массив дат в формате DD.MM для canvas\r\n        case SET_DATE_END: {\r\n            let dateEnd = action.data[action.data.length - 1].Date;\r\n            let dates = DATE.getDates(state.period, dateEnd)\r\n            return {...state, dateEnd: dateEnd, dates: dates}\r\n        }\r\n\r\n        case SET_VALUES: {\r\n            let valuesConfirmedNew = [];\r\n            let valuesConfirmedTotal = [];\r\n            let valuesRecoveredNew = [];\r\n            let valuesRecoveredTotal = [];\r\n            let valuesDeathsNew = [];\r\n            let valuesDeathsTotal = [];\r\n            for (let i = 1; i < action.values.length; i++) {\r\n\r\n                if (action.values[i].Confirmed >= action.values[i - 1].Confirmed) {\r\n                    valuesConfirmedTotal.push(action.values[i].Confirmed);\r\n                    valuesConfirmedNew.push(action.values[i].Confirmed - action.values[i - 1].Confirmed);\r\n                } else {\r\n                    valuesConfirmedTotal.push(null);\r\n                    valuesConfirmedNew.push(null);\r\n                };\r\n\r\n                if (action.values[i].Recovered >= action.values[i-1].Recovered) {\r\n                    valuesRecoveredTotal.push(action.values[i].Recovered);\r\n                    valuesRecoveredNew.push(action.values[i].Recovered - action.values[i - 1].Recovered);\r\n                } else {\r\n                    valuesRecoveredTotal.push(null);\r\n                    valuesRecoveredNew.push(null);\r\n                };\r\n\r\n                if (action.values[i].Deaths >= action.values[i-1].Deaths) {\r\n                    valuesDeathsTotal.push(action.values[i].Deaths);\r\n                    valuesDeathsNew.push(action.values[i].Deaths - action.values[i - 1].Deaths);\r\n                } else {\r\n                    valuesDeathsTotal.push(null);\r\n                    valuesDeathsNew.push(null);\r\n                };\r\n            }\r\n\r\n            let valuesCurrent = [];\r\n            if (action.typeTime === 'byDay' && action.caseType === 'confirmed') {\r\n                valuesCurrent = valuesConfirmedNew\r\n            }\r\n            if (action.typeTime === 'total' && action.caseType === 'confirmed') {\r\n                valuesCurrent = valuesConfirmedTotal\r\n            }\r\n            if (action.typeTime === 'byDay' && action.caseType === 'recovered') {\r\n                valuesCurrent = valuesRecoveredNew\r\n            }\r\n            if (action.typeTime === 'total' && action.caseType === 'recovered') {\r\n                valuesCurrent = valuesRecoveredTotal\r\n            }\r\n            if (action.typeTime === 'byDay' && action.caseType === 'deaths') {\r\n                valuesCurrent = valuesDeathsNew\r\n            }\r\n            if (action.typeTime === 'total' && action.caseType === 'deaths') {\r\n                valuesCurrent = valuesDeathsTotal\r\n            }\r\n            return {\r\n                ...state,\r\n                valuesConfirmedNew: valuesConfirmedNew,\r\n                valuesRecoveredNew: valuesRecoveredNew,\r\n                valuesDeathsNew: valuesDeathsNew,\r\n                valuesConfirmedTotal: valuesConfirmedTotal,\r\n                valuesRecoveredTotal: valuesRecoveredTotal,\r\n                valuesDeathsTotal: valuesDeathsTotal,\r\n                valuesCurrent: valuesCurrent\r\n            };\r\n        }\r\n\r\n        case SET_TYPE: {\r\n            return {...state, type: action.typeValue}\r\n        }\r\n\r\n        case SET_MOUSE_XY: {\r\n            let showInfo;\r\n            // определение надо ли показывать Info\r\n            if (action.mouseX > CANVAS.marginLeftX + CANVAS.paddingLeftX\r\n                && action.mouseX < CANVAS.canvasW() - CANVAS.marginRightX\r\n                && action.mouseY < CANVAS.canvasH() - CANVAS.marginY) {\r\n                showInfo = true;\r\n            } else {\r\n                showInfo = false;\r\n            }\r\n\r\n            // определение infoValue и infoDate, определение координат вертикальной линии и точки\r\n            let valueMin = Math.min.apply(null, state.valuesCurrent.filter(el => el !== null));\r\n            let valueMax = Math.max.apply(null, state.valuesCurrent.filter(el => el !== null));\r\n            let DELTA = valueMax - valueMin;\r\n            let deltaGridY = CANVAS.deltaGridYf(DELTA); // шаг координатной сетки по оси Y\r\n            let valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);\r\n            let valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);\r\n            let deltaX = (CANVAS.canvasW() - CANVAS.marginLeftX - CANVAS.marginRightX - CANVAS.paddingLeftX) / (state.period - 1);\r\n            let deltaY = (CANVAS.canvasH() - CANVAS.marginY) / (valueMaxGrid - valueMinGrid);\r\n\r\n            let canvasX = (i) => {\r\n                return CANVAS.marginLeftX + CANVAS.paddingLeftX + i * deltaX;\r\n            };\r\n\r\n            let canvasY = (value) => {\r\n                return CANVAS.canvasH() - CANVAS.marginY - deltaY * (value - valueMinGrid);\r\n            }\r\n\r\n            let iPoint = Math.round((action.mouseX - CANVAS.paddingLeftX - CANVAS.marginLeftX) / deltaX);\r\n            let xPoint = canvasX(iPoint);// координата вертикальной линии и точки\r\n            let yPoint;// координата точки\r\n            if (state.valuesCurrent[iPoint] !== null) {\r\n                yPoint = canvasY(state.valuesCurrent[iPoint]);\r\n            } else {\r\n                yPoint = null;\r\n            }\r\n            let infoValue = state.valuesCurrent[iPoint];\r\n            if (infoValue === null) {\r\n                infoValue = 'no data';\r\n            }\r\n            let infoDate = state.dates[iPoint];\r\n\r\n            return {\r\n                ...state, mouseX: action.mouseX, mouseY: action.mouseY,\r\n                showInfo: showInfo, infoValue: infoValue, infoDate: infoDate,\r\n                xPoint: xPoint, yPoint: yPoint\r\n            }\r\n        }\r\n\r\n        case SET_MOUSE_HOVER_CANVAS: {\r\n            return {...state, mouseHoverCanvas: action.value}\r\n        }\r\n\r\n        case SET_CASE_TYPE: {\r\n            return {...state, caseType: action.caseType}\r\n        }\r\n\r\n        case SET_CURRENT_VALUES: {\r\n            // action.typeTime\r\n            // action.caseType\r\n            let values;\r\n            if (action.typeTime === 'byDay' && action.caseType === 'confirmed') {\r\n                values = state.valuesConfirmedNew\r\n            }\r\n            if (action.typeTime === 'total' && action.caseType === 'confirmed') {\r\n                values = state.valuesConfirmedTotal\r\n            }\r\n            if (action.typeTime === 'byDay' && action.caseType === 'recovered') {\r\n                values = state.valuesRecoveredNew\r\n            }\r\n            if (action.typeTime === 'total' && action.caseType === 'recovered') {\r\n                values = state.valuesRecoveredTotal\r\n            }\r\n            if (action.typeTime === 'byDay' && action.caseType === 'deaths') {\r\n                values = state.valuesDeathsNew\r\n            }\r\n            if (action.typeTime === 'total' && action.caseType === 'deaths') {\r\n                values = state.valuesDeathsTotal\r\n            }\r\n            return {...state, valuesCurrent: values}\r\n        }\r\n\r\n        case SET_SHOW_INFO: {\r\n            return {...state, showInfo: action.showInfo}\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const toggleLoading = (isLoading) => ({type: TOGGLE_LOADING, isLoading});\r\nexport const setCountriesData = (countriesData) => ({type: SET_COUNTRIES_DATA, countriesData});\r\nexport const setCurrentCountry = (country) => ({type: SET_CURRENT_COUNTRY, country});\r\nexport const setPeriod = (period) => ({type: SET_PERIOD, period});\r\nexport const setDateEnd = (data) => ({type: SET_DATE_END, data});\r\nexport const setValues = (values, type, caseType) => ({type: SET_VALUES, values, typeTime: type, caseType});\r\nexport const setType = (typeValue) => ({type: SET_TYPE, typeValue});\r\nexport const setMouseXY = (mouseX, mouseY) => ({type: SET_MOUSE_XY, mouseX, mouseY});\r\nexport const setMouseHoverCanvas = (value) => ({type: SET_MOUSE_HOVER_CANVAS, value});\r\nexport const setCaseType = (caseType) => ({type: SET_CASE_TYPE, caseType});\r\nexport const setCurrentValues = (type, caseType) => ({type: SET_CURRENT_VALUES, typeTime: type, caseType});\r\nexport const setShowInfo = (showInfo) => ({type: SET_SHOW_INFO, showInfo});\r\n\r\n// 1 - получение списка стран, 2 - получение актуальной последней даты, 3 - получить значения\r\nexport const getInitial = (period, country, type, caseType) => dispatch => {\r\n    dispatch(toggleLoading(true));\r\n    statisticAPI.getCountries()\r\n        .then(data => {\r\n            dispatch(setCountriesData(data));\r\n            return statisticAPI.getDateEnd(country)\r\n        })\r\n        .then(data => {\r\n            dispatch(setDateEnd(data));\r\n            let dateEndAPI = data[data.length - 1].Date;//API\r\n            let dateEndJS = DATE.dateAPIToJs(dateEndAPI);\r\n            // массив values имеет длину period + 1 для определения величины за день\r\n            // valuesDay[0] = valuesTotal[0] - valuesTotal[-1]\r\n            // для этого начальная дата в запросе меньше на день\r\n            let dateStartJS = new Date(dateEndJS.getTime() - (period) * 24 * 60 * 60 * 1000);\r\n            let dateStartAPI = DATE.dateJsToAPI(dateStartJS);\r\n            return statisticAPI.getValues(country, dateStartAPI, dateEndAPI)\r\n        })\r\n        .then(data => {\r\n            dispatch(setValues(data, type, caseType));\r\n            dispatch(toggleLoading(false));\r\n        })\r\n}\r\n\r\nexport const getValues = (dateEnd, period, country, type, caseType) => dispatch => {\r\n    dispatch(toggleLoading(true));\r\n    let dateEndJS = DATE.dateAPIToJs(dateEnd);\r\n    let dateStartJS = new Date(dateEndJS.getTime() - (period) * 24 * 60 * 60 * 1000);\r\n    let dateStartAPI = DATE.dateJsToAPI(dateStartJS);\r\n    statisticAPI.getValues(country, dateStartAPI, dateEnd)\r\n        .then(data => {\r\n            dispatch(setValues(data, type, caseType));\r\n            dispatch(toggleLoading(false));\r\n        })\r\n}\r\n\r\nexport default statisticReducer;","import React from 'react';\r\nimport style from './CountryStatistic.module.css';\r\n\r\nconst Country = (props) => {\r\n    //console.log(props)\r\n    let onChange = (e) => {\r\n        props.setCurrentCountry(e.currentTarget.value);\r\n\r\n    }\r\n    let optionElements = props.countriesData.map((el, i) =>\r\n        (<option key={i} value={el.Country}>\r\n            {el.Country}\r\n        </option>))\r\n    return (\r\n        <select onChange={onChange} value={props.currentCountry} className={style.select}>\r\n            {optionElements}\r\n        </select>\r\n    )\r\n};\r\n\r\nexport default Country;\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {setCurrentCountry} from \"../../../../store/statistic-reducer\";\r\nimport Country from \"./Country\";\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currentCountry: state.statisticPage.currentCountry,\r\n    countriesData: state.statisticPage.countriesData\r\n});\r\n\r\nconst CountryContainer = connect(mapStateToProps, {setCurrentCountry})(Country);\r\n\r\nexport default CountryContainer;","import React from 'react';\r\nimport style from './Period.module.css';\r\n\r\nconst Period = (props) => {\r\n    let onChange = (e) => {\r\n        props.setPeriod(e.currentTarget.value);\r\n    }\r\n    let options = [['1 week', 7], ['2 weeks', 14], ['30 days', 30]];\r\n    let optionElements = options.map((el, i) =>\r\n        (<option key={i} value={el[1]}>\r\n            {el[0]}\r\n        </option>))\r\n    return (\r\n        <select onChange={onChange} value={props.period} className={style.select}>\r\n            {optionElements}\r\n        </select>\r\n    )\r\n};\r\n\r\nexport default Period;\r\n\r\n","import {connect} from \"react-redux\";\r\nimport Period from \"./Period\";\r\nimport {setPeriod} from \"../../../../store/statistic-reducer\";\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    period: state.statisticPage.period,\r\n});\r\n\r\nconst PeriodContainer = connect(mapStateToProps, {setPeriod})(Period);\r\n\r\nexport default PeriodContainer;","import React from 'react';\r\nimport style from './Type.module.css';\r\n\r\nconst Type = (props) => {\r\n    let onChange = (e) => {\r\n        props.setType(e.currentTarget.value);\r\n        props.setCurrentValues(e.currentTarget.value, props.caseType)\r\n    }\r\n\r\n    return (\r\n        <select onChange={onChange} value={props.type} className={style.select}>\r\n            <option value={'byDay'}>by day</option>\r\n            <option value={'total'}>total</option>\r\n        </select>\r\n    )\r\n};\r\n\r\nexport default Type;\r\n\r\n","import {connect} from \"react-redux\";\r\nimport Type from \"./Type\";\r\nimport {setCurrentValues, setPeriod, setType} from \"../../../../store/statistic-reducer\";\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    type: state.statisticPage.type,\r\n    caseType: state.statisticPage.caseType\r\n});\r\n\r\nconst TypeContainer = connect(mapStateToProps, {setType, setCurrentValues})(Type);\r\n\r\nexport default TypeContainer;","import React from 'react';\r\nimport style from './Info.module.css';\r\nimport {CANVAS} from \"../../../../../DAL/canvas\";\r\n\r\nconst Info = (props) => {\r\n\r\n    let left, top;\r\n    const deltaX = (CANVAS.canvasW() - CANVAS.marginLeftX - CANVAS.marginRightX - CANVAS.paddingLeftX) / (props.period - 1);\r\n    let canvasX = (i) => {\r\n        return CANVAS.marginLeftX + CANVAS.paddingLeftX + i * deltaX;\r\n    }\r\n    let iMouseGrid = Math.round((props.mouseX - CANVAS.paddingLeftX - CANVAS.marginLeftX) / deltaX);\r\n    let xMouseGrid = canvasX(iMouseGrid);\r\n    if (props.mouseX > CANVAS.marginLeftX + CANVAS.paddingLeftX\r\n        && props.mouseX < CANVAS.canvasW() - CANVAS.marginRightX) {\r\n        left = xMouseGrid;\r\n    }\r\n\r\n    let styleInfo = {\r\n        top: props.mouseY - 50,\r\n        left: left + 10\r\n    };\r\n    let colorValue;\r\n    if (props.caseType === 'confirmed') colorValue = 'red';\r\n    if (props.caseType === 'recovered') colorValue = 'green';\r\n    if (props.caseType === 'deaths') colorValue = 'blue';\r\n    let styleValue = {\r\n        color: colorValue\r\n    }\r\n\r\n    let onMouseEnter = () => {\r\n        props.setMouseHoverCanvas(true);\r\n    };\r\n\r\n    let onMouseLeave = () => {\r\n        props.setMouseHoverCanvas(false);\r\n    }\r\n\r\n    return (\r\n        <div onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave} style={styleInfo} className={style.info}>\r\n            <div style={styleValue} className={style.value}>{props.infoValue}</div>\r\n            <div>{props.infoDate}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Info;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Info from \"./Info\";\r\nimport {setMouseHoverCanvas} from \"../../../../../store/statistic-reducer\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n    mouseX: state.statisticPage.mouseX,\r\n    period: state.statisticPage.period,\r\n    caseType: state.statisticPage.caseType,\r\n    mouseY: state.statisticPage.mouseY,\r\n    infoValue: state.statisticPage.infoValue,\r\n    infoDate: state.statisticPage.infoDate\r\n})\r\n\r\n\r\nconst InfoContainer = connect(mapStateToProps,{setMouseHoverCanvas})(Info);\r\n\r\nexport default InfoContainer;","import React from 'react';\r\nimport style from './Preloader.module.css';\r\nimport preloader from './../../../assets/preloader/circles.svg'\r\n\r\nlet Preloader = () => {\r\n    return (\r\n        <div className={style.preloader}>\r\n            <img src={preloader} alt=\"\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader;\r\n\r\n","import React from 'react';\r\nimport style from './Date.module.css'\r\n\r\nconst Date = (props) => {\r\n    let styleInline = {top: props.top, left: props.left}\r\n    return (\r\n        <div className={style.value} style={styleInline}>\r\n            {props.value}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Date;","import React from 'react';\r\nimport Date from \"./Date/Date\";\r\n\r\nconst Dates = (props) => {\r\n    let k = 1;\r\n    if (props.period === '30') {\r\n        k = 2\r\n    };\r\n    let datesElements = props.dates.map((date, i) => (i % k === 0) ?\r\n        <Date key={date} value={date} top={props.top} left={props.leftArr[i]}/> : null)\r\n    return (\r\n        <>\r\n            {datesElements}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Dates;","import React from 'react';\r\nimport {CANVAS} from \"../../../../../DAL/canvas\";\r\nimport Dates from \"./Dates\";\r\n\r\nconst DatesContainer = (props) => {\r\n        const deltaX = (CANVAS.canvasW() - CANVAS.marginLeftX - CANVAS.marginRightX - CANVAS.paddingLeftX) / (props.period - 1);\r\n        let canvasX = (i) => {\r\n            return CANVAS.marginLeftX + CANVAS.paddingLeftX + i * deltaX;\r\n        };\r\n        let top = CANVAS.canvasH() - CANVAS.marginY;\r\n        let leftArr = [];\r\n        for (let i = 0; i < props.dates.length; i++){\r\n            leftArr.push(canvasX(i));\r\n        }\r\n\r\n    return (\r\n       <Dates dates={props.dates}\r\n              period={props.period}\r\n              top={top}\r\n              leftArr={leftArr}/>\r\n    )\r\n};\r\n\r\nexport default DatesContainer;","import React from 'react';\r\nimport style from './Value.module.css'\r\n\r\nconst Value = (props) => {\r\n    let styleInline = {top: props.top, left: props.left}\r\n    return (\r\n        <div className={style.value} style={styleInline}>\r\n            {props.value}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Value;","import React from 'react';\r\nimport Value from \"./Value/Value\";\r\n\r\nconst Values = (props) => {\r\n       let valuesElements = props.valuesArr.map((el, i) => <Value key={i} value={el} top={props.topArr[i]} left={props.left}/>)\r\n       return (\r\n        <>\r\n            {valuesElements}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Values;","import React from 'react';\r\nimport {CANVAS} from \"../../../../../DAL/canvas\";\r\nimport Values from \"./Values\";\r\n\r\nconst ValuesContainer = (props) => {\r\n    const valueMin = Math.min.apply(null, props.values.filter(el => el !== null));\r\n    const valueMax = Math.max.apply(null, props.values.filter(el => el !== null));\r\n    const DELTA = valueMax - valueMin;\r\n    let deltaGridY, valueMinGrid, valueMaxGrid, deltaY, canvasY, valuesArr = [], topArr = [];\r\n    if (DELTA !== 0) {\r\n        deltaGridY = CANVAS.deltaGridYf(DELTA); // шаг координатной сетки по оси Y\r\n        valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);\r\n        valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);\r\n        deltaY = (CANVAS.canvasH() - CANVAS.marginY) / (valueMaxGrid - valueMinGrid);\r\n        canvasY = (value) => {\r\n            return CANVAS.canvasH() - CANVAS.marginY - deltaY * (value - valueMinGrid);\r\n        };\r\n        let y = valueMinGrid;\r\n        while (true) {\r\n            valuesArr.push(y);\r\n            topArr.push(canvasY(y));\r\n            y += deltaGridY;\r\n            if (y > valueMaxGrid - deltaGridY) {\r\n                valuesArr.push(y);\r\n                topArr.push(canvasY(y));\r\n                break\r\n            }\r\n        }\r\n    } else { // если все значения одинаковы\r\n        valuesArr = [valueMax];\r\n        topArr = [CANVAS.canvasH()/2 - CANVAS.marginY]\r\n    }\r\n\r\n    let left = CANVAS.marginLeftX - 5;\r\n\r\n    return <Values valuesArr={valuesArr}\r\n                   topArr={topArr}\r\n                   left={left}/>\r\n};\r\n\r\nexport default ValuesContainer;","import React from 'react';\r\nimport style from './Canvas.module.css';\r\nimport {CANVAS} from \"../../../../DAL/canvas\";\r\nimport InfoContainer from \"./Info/InfoContainer\";\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport DatesContainer from \"./Dates/DatesContainer\";\r\nimport ValuesContainer from \"./Values/ValuesContainer\";\r\n\r\nclass Canvas extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.marginLeftX = CANVAS.marginLeftX;\r\n        this.paddingLeftX = CANVAS.paddingLeftX;\r\n        this.marginRightX = CANVAS.marginRightX;\r\n        this.marginY = CANVAS.marginY; // вниз\r\n        this.canvasW = CANVAS.canvasW();\r\n        this.canvasH = CANVAS.canvasH();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawCanvasAxis();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        let valueIsExists = !!this.props.valuesCurrent && !!this.props.valuesCurrent.length;\r\n        if (valueIsExists && prevProps.valuesCurrent !== this.props.valuesCurrent) {\r\n            this.drawCanvasGraph();\r\n        }\r\n        if (valueIsExists && this.props.mouseHoverCanvas && this.props.showInfo &&\r\n            (prevProps.mouseX !== this.props.mouseX || prevProps.mouseY !== this.props.mouseY)) {\r\n            this.drawCanvasPoint();\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////\r\n    // оси координат - рисуются только при вставке компонента\r\n    /////////////////////////////////////////////////////////\r\n    drawCanvasAxis = () => {\r\n        let ctx = this.refs.canvasAxis.getContext('2d');\r\n        ctx.clearRect(0, 0, this.canvasW, this.canvasH);\r\n        ctx.fillStyle = '#fff';\r\n        ctx.fillRect(0, 0, this.canvasW, this.canvasH);\r\n        ctx.strokeStyle = '#aaa';\r\n        ctx.lineWidth = 4;\r\n        ctx.setLineDash([]);\r\n        ctx.beginPath();\r\n        ctx.moveTo(CANVAS.marginLeftX, 0);\r\n        ctx.lineTo(CANVAS.marginLeftX, CANVAS.canvasH() - CANVAS.marginY);\r\n        ctx.moveTo(CANVAS.marginLeftX, CANVAS.canvasH() - CANVAS.marginY);\r\n        ctx.lineTo(CANVAS.canvasW(), CANVAS.canvasH() - CANVAS.marginY);\r\n        ctx.stroke();\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////\r\n    // график и горизонтальные линии\r\n    ////////////////////////////////////////////////////////////////////\r\n    drawCanvasGraph = () => {\r\n        let values = this.props.valuesCurrent;\r\n        const valueMin = Math.min.apply(null, values.filter(el => el !== null));\r\n        const valueMax = Math.max.apply(null, values.filter(el => el !== null));\r\n        const DELTA = valueMax - valueMin;\r\n        const deltaX = (this.canvasW - this.marginLeftX - this.marginRightX - this.paddingLeftX) / (this.props.period - 1);\r\n        let canvasX = (i) => {\r\n            return this.marginLeftX + this.paddingLeftX + i * deltaX;\r\n        };\r\n\r\n        let deltaGridY, valueMinGrid, valueMaxGrid, deltaY;\r\n        if (DELTA !== 0) {\r\n            deltaGridY = CANVAS.deltaGridYf(DELTA); // шаг координатной сетки по оси Y\r\n            valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);\r\n            valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);\r\n            deltaY = (this.canvasH - this.marginY) / (valueMaxGrid - valueMinGrid);\r\n        }\r\n        let canvasY = (value) => {\r\n            if (DELTA !== 0) {\r\n                return this.canvasH - this.marginY - deltaY * (value - valueMinGrid);\r\n            } else {\r\n                return (this.canvasH) / 2 - this.marginY;\r\n            }\r\n        }\r\n\r\n        let ctx = this.refs.canvasGraph.getContext('2d');\r\n        ctx.clearRect(0, 0, this.canvasW, this.canvasH);\r\n        ctx.fillStyle = 'transparent';\r\n        ctx.fillRect(0, 0, this.canvasW, this.canvasH);\r\n\r\n        //горизонтальные линии\r\n        if (DELTA !== 0) {\r\n            ctx.strokeStyle = '#cccccc';\r\n            ctx.lineWidth = 1;\r\n            ctx.setLineDash([]);\r\n            let yLineStart = valueMinGrid;\r\n            while (true) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(this.marginLeftX, canvasY(yLineStart));\r\n                ctx.lineTo(this.canvasW, canvasY(yLineStart));\r\n                ctx.stroke();\r\n                yLineStart += deltaGridY;\r\n                if (yLineStart > valueMaxGrid) {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        // график 'confirmed', 'recovered', 'deaths'\r\n        if (this.props.caseType === 'confirmed') ctx.strokeStyle = 'red';\r\n        if (this.props.caseType === 'recovered') ctx.strokeStyle = 'green';\r\n        if (this.props.caseType === 'deaths') ctx.strokeStyle = 'blue';\r\n        ctx.lineWidth = 3;\r\n        ctx.setLineDash([]);\r\n        for (let i = 0; i < this.props.period; i++) {\r\n            if (i === 0) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(canvasX(i), canvasY(values[i]));\r\n            }\r\n            if (i > 0) {\r\n                if (values[i - 1] !== null && values[i] !== null) {\r\n                    ctx.lineTo(canvasX(i), canvasY(values[i]));\r\n                }\r\n                if (values[i - 1] !== null && values[i] === null) {\r\n                    ctx.lineTo(canvasX(i - 1), canvasY(valueMinGrid));\r\n                    ctx.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                }\r\n                if (values[i - 1] == null && values[i] !== null) {\r\n                    ctx.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                    ctx.lineTo(canvasX(i), canvasY(values[i]));\r\n                }\r\n                if (values[i - 1] == null && values[i] == null) {\r\n                    ctx.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                }\r\n            }\r\n            if (i === this.props.period - 1) {\r\n                ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // точка и верткальная линия - рисуетя только при наведении мыши на канвас\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    drawCanvasPoint = () => {\r\n\r\n        let ctx = this.refs.canvasPoint.getContext('2d');\r\n        ctx.clearRect(0, 0, this.canvasW, this.canvasH);\r\n        ctx.fillStyle = 'transparent';\r\n        ctx.fillRect(0, 0, this.canvasW, this.canvasH);\r\n\r\n        if (this.props.mouseHoverCanvas) {\r\n            // вертикальная линия\r\n            ctx.strokeStyle = '#000000';\r\n            ctx.lineWidth = 1;\r\n            ctx.setLineDash([2, 1]);\r\n            ctx.beginPath();\r\n            //let iMouseGrid = Math.round((this.props.mouseX - this.paddingLeftX - this.marginLeftX) / deltaX);\r\n            //let xMouseGrid = canvasX(iMouseGrid);\r\n            if (this.props.mouseX > this.marginLeftX + this.paddingLeftX\r\n                && this.props.mouseX < this.canvasW - this.marginRightX) {\r\n                ctx.moveTo(this.props.xPoint, 0);\r\n                ctx.lineTo(this.props.xPoint, this.canvasH - this.marginY);\r\n                ctx.stroke();\r\n            }\r\n\r\n            // точка\r\n            if (this.props.yPoint !== null) {\r\n                let color;\r\n                if (this.props.caseType === 'confirmed') color = 'red';\r\n                if (this.props.caseType === 'recovered') color = 'green';\r\n                if (this.props.caseType === 'deaths') color = 'blue';\r\n                ctx.strokeStyle = color;\r\n                ctx.lineWidth = 4;\r\n                ctx.lineJoin = 'round';\r\n                ctx.setLineDash([]);\r\n                ctx.beginPath();\r\n                ctx.arc(this.props.xPoint, this.props.yPoint, 3, 0, 2 * Math.PI);\r\n                ctx.stroke();\r\n                ctx.fillStyle = color;\r\n                ctx.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    onMouseMove = (e) => {\r\n        const canvas = e.target.getBoundingClientRect();\r\n        let x = e.clientX - canvas.left;\r\n        let y = e.clientY - canvas.top;\r\n        this.props.setMouseXY(x, y);\r\n    }\r\n\r\n    onMouseEnter = () => {\r\n        this.props.setMouseHoverCanvas(true);\r\n    }\r\n\r\n    onMouseLeave = () => {\r\n        this.props.setMouseHoverCanvas(false);\r\n    }\r\n\r\n    render() {\r\n        let valueIsExists = !!this.props.valuesCurrent && !!this.props.valuesCurrent.length;\r\n        let canvasWrapperStyle = {\r\n            width: this.canvasW, height: this.canvasH\r\n        }\r\n        return (\r\n            <div className={style.canvas}>\r\n                <div className={style.canvasWrapper} style={canvasWrapperStyle}>\r\n                    {this.props.isLoading && <Preloader/>}\r\n                    {valueIsExists && this.props.showInfo && this.props.mouseHoverCanvas && <InfoContainer/>}\r\n                    {valueIsExists && <ValuesContainer values={this.props.valuesCurrent}/>}\r\n                    {valueIsExists && <DatesContainer values={this.props.valuesCurrent}\r\n                                                      dates={this.props.dates}\r\n                                                      period={this.props.period}/>}\r\n                    <canvas ref=\"canvasAxis\" width={this.canvasW} height={this.canvasH}\r\n                            className={style.canvasAxis}/>\r\n\r\n                    {valueIsExists && <canvas ref=\"canvasGraph\"\r\n                                              className={style.canvasGraph}\r\n                                              width={this.canvasW}\r\n                                              height={this.canvasH}\r\n                                              onMouseMove={this.onMouseMove}\r\n                                              onMouseEnter={this.onMouseEnter}\r\n                                              onMouseLeave={this.onMouseLeave}/>}\r\n                    {valueIsExists && this.props.mouseHoverCanvas && this.props.showInfo\r\n                    && <canvas ref=\"canvasPoint\"\r\n                               className={style.canvasPoint}\r\n                               width={this.canvasW}\r\n                               height={this.canvasH}\r\n                               onMouseMove={this.onMouseMove}\r\n                               onMouseEnter={this.onMouseEnter}\r\n                               onMouseLeave={this.onMouseLeave}/>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Canvas","import {connect} from \"react-redux\";\r\nimport {setMouseHoverCanvas, setMouseXY, setShowInfo} from \"../../../../store/statistic-reducer\";\r\nimport Canvas from \"./Canvas\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n    period: state.statisticPage.period,\r\n    valuesCurrent: state.statisticPage.valuesCurrent,\r\n    mouseHoverCanvas: state.statisticPage.mouseHoverCanvas,\r\n    mouseX: state.statisticPage.mouseX,\r\n    mouseY: state.statisticPage.mouseY,\r\n    dates: state.statisticPage.dates,\r\n    currentCountry: state.statisticPage.currentCountry,\r\n    type: state.statisticPage.type,\r\n    caseType: state.statisticPage.caseType,\r\n    showInfo: state.statisticPage.showInfo,\r\n    xPoint: state.statisticPage.xPoint,\r\n    yPoint: state.statisticPage.yPoint,\r\n    isLoading: state.statisticPage.isLoading\r\n});\r\n\r\nconst CanvasContainer = connect(mapStateToProps, {setMouseXY, setMouseHoverCanvas, setShowInfo})(Canvas);\r\n\r\nexport default CanvasContainer;","import React from 'react';\r\nimport style from './CaseType.module.css';\r\nimport {setCurrentValues} from \"../../../../store/statistic-reducer\";\r\n\r\nconst CaseType = (props) => {\r\n\r\n    let onChange = (e) => {\r\n        props.setCaseType(e.currentTarget.value);\r\n        props.setCurrentValues(props.type, e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <select onChange={onChange} value={props.caseType} className={style.select}>\r\n            <option value={'confirmed'}>confirmed</option>\r\n            <option value={'recovered'}>recovered</option>\r\n            <option value={'deaths'}>deaths</option>\r\n        </select>\r\n    )\r\n};\r\n\r\nexport default CaseType;\r\n\r\n","import {connect} from \"react-redux\";\r\nimport CaseType from \"./CaseType\";\r\nimport {setCaseType, setCurrentValues} from \"../../../../store/statistic-reducer\";\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    caseType: state.statisticPage.caseType,\r\n    type: state.statisticPage.type\r\n});\r\n\r\nconst CaseTypeContainer = connect(mapStateToProps, {setCaseType, setCurrentValues})(CaseType);\r\n\r\nexport default CaseTypeContainer;","import React from 'react';\r\nimport style from './Statistic.module.css';\r\nimport CountryContainer from \"./Country/CountryContainer\";\r\nimport PeriodContainer from \"./Period/PeriodContainer\";\r\nimport TypeContainer from \"./Type/TypeContainer\";\r\nimport CanvasContainer from \"./Canvas/CanvasContainer\";\r\nimport CaseTypeContainer from \"./CaseType/CaseTypeContainer\";\r\n\r\n\r\nconst Statistic = (props) => {\r\n\r\n    return (\r\n        <div className={style.statistic}>\r\n            <div className={style.canvas}>\r\n                <CanvasContainer/>\r\n                <div>{`mouseHoverCanvas = ${props.mouseHoverCanvas}`}</div>\r\n                <div>{`showInfo = ${props.showInfo}`}</div>\r\n            </div>\r\n            <div className={style.selects}>\r\n                <div className={style.selectBlock}>\r\n                    <div className={style.selectTitle}>Select period:</div>\r\n                    <div><PeriodContainer/></div>\r\n                </div>\r\n                <div className={style.selectBlock}>\r\n                    <div className={style.selectTitle}>by day / total:</div>\r\n                    <div><TypeContainer/></div>\r\n                </div>\r\n                <div className={style.selectBlock}>\r\n                    <div className={style.selectTitle}>case type:</div>\r\n                    <div><CaseTypeContainer/></div>\r\n                </div>\r\n            </div>\r\n            <div className={style.selects}>\r\n                <div className={style.selectBlock}>\r\n                    <div className={style.selectTitle}>Select country:</div>\r\n                    <div><CountryContainer/></div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Statistic;","import React from 'react'\r\nconst Home = (props) => {\r\n    return (\r\n        <div>Home</div>\r\n    )\r\n}\r\nexport default Home;\r\n","import React from 'react';\r\nimport style from './SummaryItem.module.css';\r\n\r\nconst SummaryItem = (props) => {\r\n    let itemStyle = {color: props.color};\r\n    return (\r\n        <div className={style.item}>\r\n            <div className={style.type} style={itemStyle}>{props.type}</div>\r\n            <div className={style.value}>{props.value}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SummaryItem;","import React from 'react';\r\nimport style from \"../Summary.module.css\";\r\nimport SummaryItem from \"./SummaryItem/SummaryItem\";\r\n\r\nconst SummaryItems = (props) => {\r\n    let color = ['darkred', 'darkred', 'darkgreen', 'darkgreen', 'darkblue', 'darkblue'];\r\n    let type = ['Confirmed new', 'Confirmed total', 'Recovered new', 'Recovered total', 'Deaths new', 'Deaths total'];\r\n    let SummaryItemElements = props.cases.map((value, i) => <SummaryItem key={i} value={value} color={color[i]}\r\n                                                                         type={type[i]}/>)\r\n    //console.log(props.cases);\r\n    //Color[index]\r\n    return (\r\n        <div className={style.items}>\r\n            {SummaryItemElements}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SummaryItems;","import {summaryAPI} from \"../DAL/api\";\r\n\r\nconst TOGGLE_LOADING = 'TOGGLE-LOADING';\r\nconst SET_DATE = 'SET_DATE';\r\nconst SET_GLOBAL = 'SET-GLOBAL';\r\nconst SET_COUNTRIES = 'SET-COUNTRIES';\r\nconst SET_COUNTRIES_LIST = 'SET_COUNTRIES_LIST';\r\nconst SET_CURRENT_COUNTRY = 'SET-CURRENT-COUNTRY';\r\nconst INITIAL_SET_CASES = 'INITIAL-SET-CASES';\r\nconst CHANGE_CASES = 'CHANGE_CASES';\r\n\r\nlet stateInitial = {\r\n    isLoading: false,\r\n    date: '', // дата заппроса\r\n    // [confirmedNew, confirmedTotal, recoveredNew, recoveredTotal, deathsNew, deathsTotal]\r\n    global: [], // массив значений по всему миру\r\n    cases: [], // массив значений выбранной страны\r\n    // [{Country: \"Country\", cases: [confirmedNew, confirmedTotal, recoveredNew, recoveredTotal, deathsNew, deathsTotal]}, ...]\r\n    countries: [],// массив значений по странам\r\n    countriesList: [], //список стран\r\n    currentCountry: '' // выбранная страна\r\n\r\n\r\n};\r\n\r\nconst summaryReducer = (state = stateInitial, action) => {\r\n    switch (action.type) {\r\n\r\n        case TOGGLE_LOADING: {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n\r\n        case SET_DATE: {\r\n            return {...state, date: action.date}\r\n        }\r\n\r\n        case SET_GLOBAL: {\r\n            let global = [];\r\n            global.push(action.global.NewConfirmed);\r\n            global.push(action.global.TotalConfirmed);\r\n            global.push(action.global.NewRecovered);\r\n            global.push(action.global.TotalRecovered);\r\n            global.push(action.global.NewDeaths);\r\n            global.push(action.global.TotalDeaths);\r\n            return {...state, global: global}\r\n        }\r\n\r\n        case INITIAL_SET_CASES: {\r\n            let cases = [];\r\n            cases.push(action.country.NewConfirmed);\r\n            cases.push(action.country.TotalConfirmed);\r\n            cases.push(action.country.NewRecovered);\r\n            cases.push(action.country.TotalRecovered);\r\n            cases.push(action.country.NewDeaths);\r\n            cases.push(action.country.TotalDeaths);\r\n            return {...state, cases: cases}\r\n        }\r\n\r\n        case CHANGE_CASES: {\r\n            let cases = state.countries.find(el => el.country === action.country).cases;\r\n            return {...state, cases: cases};\r\n        }\r\n\r\n        case SET_COUNTRIES: {\r\n            let countries = [];\r\n            for (let i = 0; i < action.countries.length; i++) {\r\n                countries[i] = {};\r\n                countries[i].country = action.countries[i].Country;\r\n                countries[i].cases = [];\r\n                countries[i].cases.push(action.countries[i].NewConfirmed);\r\n                countries[i].cases.push(action.countries[i].TotalConfirmed);\r\n                countries[i].cases.push(action.countries[i].NewRecovered);\r\n                countries[i].cases.push(action.countries[i].TotalRecovered);\r\n                countries[i].cases.push(action.countries[i].NewDeaths);\r\n                countries[i].cases.push(action.countries[i].TotalDeaths);\r\n            }\r\n            return {...state, countries: countries}\r\n        }\r\n\r\n        case SET_CURRENT_COUNTRY: {\r\n            return {...state, currentCountry: action.country};\r\n        }\r\n\r\n        case SET_COUNTRIES_LIST: {\r\n            let countriesList = [];\r\n            for (let i = 0; i < action.countries.length; i++) {\r\n                countriesList.push(action.countries[i].Country);\r\n            }\r\n            return {...state, countriesList: countriesList};\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const toggleLoading = (isLoading) => ({type: TOGGLE_LOADING, isLoading});\r\nexport const setDate = (date) => ({type: SET_DATE, date});\r\nexport const setGlobal = (global) => ({type: SET_GLOBAL, global});\r\nexport const setCountries = (countries) => ({type: SET_COUNTRIES, countries});\r\nexport const setCurrentCountry = (country) => ({type: SET_CURRENT_COUNTRY, country});\r\nexport const setCountriesList = (countries) => ({type: SET_COUNTRIES_LIST, countries});\r\nexport const initialSetCases = (country) => ({type: INITIAL_SET_CASES, country});\r\nexport const changeCases = (country) => ({type: CHANGE_CASES, country});\r\n\r\nexport const getInitial = () => dispatch => {\r\n    dispatch(toggleLoading(true));\r\n    summaryAPI.getInitial()\r\n        .then(data => {\r\n            dispatch(setDate(data.Date));\r\n            dispatch(setGlobal(data.Global));\r\n            dispatch(initialSetCases(data.Countries[138]))\r\n            dispatch(setCountries(data.Countries));\r\n            dispatch(setCountriesList(data.Countries));\r\n            dispatch(setCurrentCountry(data.Countries[138].Country));\r\n            dispatch(toggleLoading(false));\r\n        })\r\n}\r\n\r\nexport default summaryReducer;","import React from 'react';\r\nimport style from './Country.module.css';\r\n\r\nconst Country = (props) => {\r\n    let onChange = (e) => {\r\n        props.setCurrentCountry(e.currentTarget.value);\r\n        props.changeCases(e.currentTarget.value);\r\n    }\r\n    let optionElements = props.countriesList.map((country, i) =>\r\n        (<option key={i} value={country}>\r\n            {country}\r\n        </option>))\r\n    return (\r\n        <select onChange={onChange} value={props.currentCountry}>\r\n            {optionElements}\r\n        </select>\r\n    )\r\n};\r\n\r\nexport default Country;\r\n\r\n","import {changeCases, setCurrentCountry} from \"../../../../store/summary-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Country from \"./Country\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currentCountry: state.summaryPage.currentCountry,\r\n    countriesList: state.summaryPage.countriesList\r\n});\r\n\r\nconst CountryContainer = connect(mapStateToProps, {setCurrentCountry, changeCases})(Country);\r\n\r\nexport default CountryContainer;","import React from 'react';\r\nimport style from './Summary.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport SummaryItems from \"./SummaryItems/SummaryItems\";\r\nimport CountryContainer from \"./Country/CountryContainer\";\r\n\r\nconst Summary = (props) => {\r\n    if (props.isLoading) return <Preloader/>\r\n    return (\r\n        <div className={style.summary}>\r\n            <div className={style.blocks}>\r\n                <div className={style.block}>\r\n                    <div className={style.title}>\r\n                        Global\r\n                    </div>\r\n                    <SummaryItems cases={props.global}/>\r\n                </div>\r\n                <div className={style.block}>\r\n                    <div className={style.title}>\r\n                        By country\r\n                    </div>\r\n                    <div>\r\n                        <CountryContainer/>\r\n                    </div>\r\n                    <SummaryItems cases={props.cases}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={style.date}>{props.date}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Summary;","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport Summary from \"./Summary\";\r\nimport {getInitial} from \"../../../store/summary-reducer\";\r\n\r\nclass SummaryAJAX extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getInitial();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n    }\r\n\r\n    render() {\r\n       return <Summary date={this.props.date}\r\n                        global={this.props.global}\r\n                        cases={this.props.cases}/>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = state => {\r\n    return {\r\n        date: state.summaryPage.date,\r\n        global: state.summaryPage.global,\r\n        cases: state.summaryPage.cases,\r\n        isLoading: state.summaryPage.isLoading\r\n    }\r\n}\r\n\r\nlet SummaryContainer = connect(mapStateToProps, {getInitial})(SummaryAJAX);\r\n\r\nexport default SummaryContainer;","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport Statistic from \"./Statistic\";\r\nimport {getInitial, getValues} from \"../../../store/statistic-reducer\";\r\nimport {DATE} from \"../../../DAL/date\";\r\n\r\nclass StatisticAJAX extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getInitial(this.props.period, this.props.currentCountry, this.props.type, this.props.caseType);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.period !== this.props.period || prevProps.currentCountry !== this.props.currentCountry) {\r\n            this.props.getValues(this.props.dateEnd, this.props.period, this.props.currentCountry, this.props.type, this.props.caseType)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Statistic\r\n            mouseHoverCanvas={this.props.mouseHoverCanvas}\r\n            showInfo={this.props.showInfo}\r\n        />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = state => {\r\n    return {\r\n        isLoading: state.statisticPage.isLoading,\r\n        period: state.statisticPage.period,\r\n        currentCountry: state.statisticPage.currentCountry,\r\n        xPoint: state.statisticPage.xPoint,\r\n        yPoint: state.statisticPage.yPoint,\r\n        dateEnd: state.statisticPage.dateEnd,\r\n        type: state.statisticPage.type,\r\n        caseType: state.statisticPage.caseType,\r\n        showInfo: state.statisticPage.showInfo,\r\n        mouseHoverCanvas: state.statisticPage.mouseHoverCanvas\r\n    }\r\n}\r\n\r\nlet StatisticContainer = connect(mapStateToProps, {getInitial, getValues})(StatisticAJAX);\r\n\r\nexport default StatisticContainer;","import React from 'react';\r\nimport style from './Main.module.css'\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport Statistic from \"./Statistic/Statistic\";\r\nimport Home from \"./Home/Home\";\r\nimport SummaryContainer from \"./Summary/SummaryContainer\";\r\nimport StatisticContainer from \"./Statistic/StatisticContainer\";\r\n\r\nconst Main = () => {\r\n    return (\r\n        <div className={style.main}>\r\n            <Switch>\r\n                <Route exact path='/covid' render={() => <Home/>}/>\r\n                <Route exact path='/' render={() => <Home/>}/>\r\n                <Route path='/summary' render={() => <SummaryContainer/>}/>\r\n                <Route path='/statistic' render={() => <StatisticContainer/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport style from './App.module.css';\nimport Header from \"./components/Header/Header\";\nimport Main from \"./components/Main/Main\";\n\nconst App = () => {\n    return (\n        <div className={style.appWrapper}>\n            <Header/>\n            <Main/>\n        </div>\n    )\n};\n\nexport default App;","import thunkMiddleware from 'redux-thunk';\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport summaryReducer from \"./summary-reducer\";\r\nimport statisticReducer from \"./statistic-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    summaryPage: summaryReducer,\r\n    statisticPage: statisticReducer\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\nimport store from './store/store'\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__TcyHl\",\"logo\":\"Header_logo__1bG8r\",\"nav\":\"Header_nav__FqsW2\",\"navItem\":\"Header_navItem__2y3HY\",\"active\":\"Header_active__fu_PZ\"};"],"sourceRoot":""}