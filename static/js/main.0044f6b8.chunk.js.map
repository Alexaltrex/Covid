{"version":3,"sources":["helpers/translate.ts","store/reducers/app-reducer.ts","hooks/useCommonQueryParams.ts","components/Main/Home/Home.tsx","components/Main/Home/HomeContainer.tsx","helpers/date.ts","DAL/api.ts","helpers/canvas.ts","store/reducers/statistic-reducer.ts","components/Main/Statistic/LanErrorDialog/LanErrorDialog.tsx","store/selectors/statistic-selectors.ts","components/common/renderSelectField.jsx","components/Main/Statistic/StatisticForm/StatisticFormRow.tsx","store/selectors/app-selector.ts","components/Main/Statistic/StatisticForm/StatisticForm.tsx","components/Main/Statistic/Canvas/CanvasAxis.tsx","components/common/Preloader.tsx","components/Main/Statistic/Canvas/Dates/Date.tsx","components/Main/Statistic/Canvas/Dates/Dates.tsx","helpers/addCommaToNumber.ts","components/Main/Statistic/Canvas/Info/Info.tsx","components/Main/Statistic/Canvas/Values/Value.tsx","components/Main/Statistic/Canvas/Values/Values.tsx","components/Main/Statistic/Canvas/CanvasGraph.tsx","components/Main/Statistic/Canvas/CanvasPoint.tsx","components/Main/Statistic/Canvas/CanvasAll.tsx","components/Main/Statistic/Statistic.tsx","components/Main/Summary/SummaryCasesItem.tsx","components/Main/Summary/SummaryCases.tsx","store/reducers/summary-reducer.ts","store/selectors/summary-selector.ts","components/Main/Summary/SelectCurentCountry.tsx","components/Main/Summary/Summary.tsx","components/Main/Main.tsx","components/Header/LangSwitcher/LangSwitcher.tsx","components/Header/LangSwitcher/LangSwitcherContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","App.tsx","store/store.ts","components/common/ErrorBoundary.tsx","index.tsx","components/Header/Header.module.css"],"names":["Translate","translate","lang","phrase","rus","eng","initialState","globalError","isLoading","lanError","lanErrorResponse","appAC","type","appReducer","state","action","useCommonQueryParams","dispatch","useDispatch","useSelector","app","useQueryParam","StringParam","langQuery","setLangQuery","useEffect","undefined","Home","props","Typography","variant","align","HomeContainer","connect","DATE","getCurrentDate","Date","dateJsToAPI","date","monthString","year","getFullYear","month","getMonth","dayString","day","getDate","dateAPIToJs","slice","getStartPeriodDate","period","endPeriodDateJS","this","startPeriodDateJS","getTime","getStartPeriodDateActual","getDates","dateEnd","dates","i","push","getMonthWord","monthArray","dateTranslateFromAPI","monthWord","dateTranslateFromApiToGraph","instance","axios","create","baseURL","summaryAPI","get","response","data","statisticAPI","countrySlug","dateStart","country","dateEndAPI","length","CANVAS","marginLeftX","paddingLeftX","marginRightX","marginY","canvasW","canvasH","deltaGridYf","DELTA","countOfNumber","Math","pow","countriesData","allValues","confirmed","byDay","values","total","recovered","deaths","mouseX","mouseY","mouseHoverCanvas","valuesCurrent","showInfo","infoValue","infoDate","xPoint","yPoint","isInitialized","formValues","byDayOrTotal","caseType","statisticAC","getInitial","a","getCountriesResponse","dateEndJS","dateStartJS","dateStartAPI","getValuesByPeriodResponse","console","log","status","headers","message","request","statisticReducer","sort","b","Country","i0","valuesConfirmedNew","valuesConfirmedTotal","valuesRecoveredNew","valuesRecoveredTotal","valuesDeathsNew","valuesDeathsTotal","Confirmed","Recovered","Deaths","valueMin","min","apply","filter","el","valueMax","max","deltaGridY","valueMinGrid","floor","valueMaxGrid","ceil","deltaX","deltaY","canvasX","canvasY","value","iPoint","round","setLanError","setLanErrorResponse","LanErrorDialogContainer","statistic","lanErrorDialogOpen","setLanErrorDialogOpen","classes","useStyles","useState","count","setCount","setTimeout","label01","label02","Dialog","disableBackdropClick","disableEscapeKeyDown","maxWidth","aria-labelledby","open","className","dialog","DialogTitle","id","dialogTitle","dialogTitleInner","icon","DialogContent","color","DialogActions","buttonWrapper","Button","onClick","fullWidth","button","makeStyles","textTransform","marginBottom","backgroundColor","red","grey","display","alignItems","marginRight","flexGrow","getCountriesData","getPeriod","getDateEnd","getMouseX","getMouseY","getMouseHoverCanvas","getValuesCurrent","getShowInfo","getInfoValue","getInfoDate","getXPoint","getYPoint","getFormValuesSelector","renderSelectField","input","label","meta","touched","error","children","custom","FormControl","Select","native","inputProps","name","StatisticFormRow","fieldTitle","elements","row","fieldName","typography","Field","component","selectField","onChange","submit","gridTemplateColumns","gridColumnGap","justifyContent","blueGrey","paddingRight","getIsLoading","getLanError","getLang","ReduxForm","reduxForm","form","handleSubmit","countryElements","map","key","Slug","periodElements","byDayOrTotalElements","caseTypeElements","onSubmit","StatisticForm","initialValues","newFormValue","enableReinitialize","CanvasAxisMemo","React","memo","canvasAxisRef","useRef","canvasAxisCtxRef","current","getContext","ctx","clearRect","fillStyle","fillRect","strokeStyle","lineWidth","setLineDash","beginPath","moveTo","lineTo","stroke","useCanvasAxis","canvasAxis","ref","width","height","zIndex","position","top","left","Preloader","circularWrapper","CircularProgress","size","bottom","right","styleInline","style","transform","padding","borderRadius","Dates","datesElements","leftArr","k","useDates","addCommaToNumber","n","nString","result","Info","colorValue","iMouseGrid","xMouseGrid","styleInfo","green","indigo","onMouseEnter","onMouseLeave","styleValue","infoValueLabel","useInfo","info","cursor","boxShadow","fontWeight","Value","Values","valuesCurrentFilter","valuesArr","topArr","y","valuesElements","CanvasGraph","canvasRef","canvasCtxRef","yLineStart","valuePrev","valueNow","onMouseMoveThrottle","throttle","e","target","canvas","currentTarget","getBoundingClientRect","x","clientX","clientY","useCanvasGraph","canvasGraph","onMouseMove","CanvasPoint","lineJoin","arc","PI","fill","useCanvasPoint","CanvasAll","useCanvasAll","canvasBlock","canvasAll","margin","useStatistic","countryQuery","setCountryQuery","periodQuery","setPeriodQuery","byDayOrTotalQuery","setByDayOrTotalQuery","caseTypeQuery","setCaseTypeQuery","dateEndQuery","setDateEndQuery","countryInitial","periodInitial","byDayOrTotalInitial","caseTypeInitial","getValues","Statistic","SummaryCasesItem","classesInner","paddingLeft","iconWrapper","useStylesInner","item","valueWrapper","flexBasis","flexShrink","marginLeft","SummaryCases","cases","icons","summaryKeys","Object","keys","SummaryCasesElements","summaryCases","countriesCases","countriesList","currentCountry","summaryAC","summaryReducer","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","summary","getSummaryCases","getCountriesCases","getCountriesList","getCurrentCountry","optionElements","fieldWrapper","SelectCurrentCountry","formValue","useSelectCurrentCountry","useSummary","Global","Countries","currentCasesFull","find","currentCases","Summary","blocks","block","clsx","titleWrapper","titleWrapper1","gridGap","border","Main","main","exact","path","render","LangSwitcher","setLang","checked","wrapper","FormControlLabel","control","Switch","root","track","LangSwitcherContainer","Header","header","logo","menu","nav","to","navItem","activeClassName","active","HeaderContainer","App","appWrapper","minHeight","flexDirection","rootReducer","combineReducers","formReducer","middleware","thunkMiddleware","store","createStore","composeWithDevTools","applyMiddleware","window","ErrorBoundary","errorInfo","setState","whiteSpace","toString","ReactDOM","ReactRouterRoute","Route","CssBaseline","document","getElementById","module","exports"],"mappings":"mRAEaA,EAA4B,CACrC,QAAW,CACP,IAAO,UACP,IAAO,8CAEX,kBAAmB,CACf,IAAO,kBACP,IAAO,uEAEX,OAAU,CACN,IAAO,SACP,IAAO,+CAEX,aAAc,CACV,IAAO,aACP,IAAO,2DAEX,gBAAiB,CACb,IAAO,gBACP,IAAO,wGAEX,kBAAmB,CACf,IAAO,kBACP,IAAO,iGAEX,aAAc,CACV,IAAO,aACP,IAAO,sFAEX,eAAgB,CACZ,IAAO,eACP,IAAO,+EAEX,gBAAiB,CACb,IAAO,gBACP,IAAO,oHAEX,kBAAmB,CACf,IAAO,kBACP,IAAO,6GAEX,KAAQ,CACJ,IAAO,OACP,IAAO,kCAEX,QAAW,CACP,IAAO,UACP,IAAO,oDAEX,UAAa,CACT,IAAO,YACP,IAAO,gEAEX,SAAU,CACN,IAAO,SACP,IAAO,0CAEX,SAAU,CACN,IAAO,SACP,IAAO,0CAEX,UAAW,CACP,IAAO,UACP,IAAO,gCAEX,WAAY,CACR,IAAO,WACP,IAAO,+CAEX,SAAU,CACN,IAAO,SACP,IAAO,yCAEX,MAAS,CACL,IAAO,QACP,IAAO,kCAEX,UAAa,CACT,IAAO,YACP,IAAO,gEAEX,UAAa,CACT,IAAO,YACP,IAAO,4EAEX,OAAU,CACN,IAAO,SACP,IAAO,8CAEX,QAAW,CACP,IAAO,UACP,IAAO,wCAEX,OAAU,CACN,IAAO,SACP,IAAO,wCAEX,iBAAkB,CACd,IAAO,iBACP,IAAO,0EAEX,YAAa,CACT,IAAO,YACP,IAAO,sBAEX,wBAAyB,CACrB,IAAO,wBACP,IAAO,yIAEX,wCAAyC,CACrC,IAAO,wCACP,IAAO,yPAEX,IAAO,CACH,IAAO,MACP,IAAO,uBAOFC,EAAY,SAACC,EAAgBC,GACtC,MAAgB,QAATD,EAAiBF,EAAUG,GAAQC,IAAMJ,EAAUG,GAAQE,K,wBCpHlEC,EAAe,CACfC,YAAa,KACbC,WAAW,EACXC,UAAU,EACVC,iBAAkB,KAClBR,KAAM,OAsBGS,EACI,SAACF,GAAD,MAAwB,CAACG,KAAM,oBAAqBH,aADxDE,EAEM,SAACH,GAAD,MAAyB,CAACI,KAAM,qBAAsBJ,cAF5DG,EAGY,SAACD,GAAD,MAAoD,CAACE,KAAM,6BAA8BF,qBAHrGC,EAIA,SAACT,GAAD,MAAqB,CAACU,KAAM,eAAgBV,SAG1CW,EA1BI,WAAqE,IAApEC,EAAmE,uDAA3DR,EAAcS,EAA6C,uCACnF,OAAQA,EAAOH,MACX,IAAK,6BACD,OAAO,eAAIE,EAAX,CAAkBJ,iBAAkBK,EAAOL,mBAE/C,IAAK,eACD,OAAO,eAAII,EAAX,CAAkBZ,KAAMa,EAAOb,OAEnC,IAAK,qBACD,OAAO,eAAIY,EAAX,CAAkBN,UAAWO,EAAOP,YAExC,IAAK,oBACD,OAAO,eAAIM,EAAX,CAAkBL,SAAUM,EAAON,WAEvC,QACI,OAAOK,ICPJE,EAlBc,WACzB,IAAMC,EAAWC,cACXhB,EAAOiB,aAAY,SAACL,GAAD,OAAsBA,EAAMM,IAAIlB,QAF1B,EAIGmB,YAAc,OAAQC,KAJzB,mBAIxBC,EAJwB,KAIbC,EAJa,KAO/BC,qBAAU,WACNR,EAASN,EAAcY,GAAoCrB,MACrD,CAACe,IAEXQ,qBAAU,WACND,EAAsB,QAATtB,EAAiBA,OAAOwB,KAC9B,CACPxB,EACAsB,KCLOG,EAXuB,SAACC,GACnCZ,IAD0E,IAEnEd,EAAQ0B,EAAR1B,KACP,OACI,6BACI,kBAAC2B,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAC1B9B,EAAUC,EAAM,4BCClB8B,EAJOC,aAJE,SAACnB,GAAD,MAA0C,CAC9DZ,KAAMY,EAAMM,IAAIlB,QAKhB,GAFkB+B,CAEdN,G,kHCTKO,EAAO,CAGhBC,eAHgB,WAIZ,OAAO,IAAIC,MAIfC,YARgB,SAQJC,GACR,IAEIC,EAFEC,EAAOF,EAAKG,cACZC,EAAQJ,EAAKK,WAAa,EAG5BJ,EADAG,EAAQ,GACG,WAAOA,GAEP,UAAMA,GAErB,IACIE,EADAC,EAAMP,EAAKQ,UAOf,OAJIF,EADAC,EAAM,GACG,WAAOA,GAEP,UAAMA,GAEb,GAAN,OAAUL,EAAV,YAAkBD,EAAlB,YAAiCK,EAAjC,eAIJG,YA5BgB,SA4BJT,GACT,IAAIE,GAAQF,EAAKU,MAAM,EAAE,GACrBN,GAASJ,EAAKU,MAAM,EAAE,GAAK,EAC3BH,GAAOP,EAAKU,MAAM,EAAE,IACxB,OAAO,IAAIZ,KAAKI,EAAME,EAAOG,IAIhCI,mBApCgB,SAoCGC,GAGf,IAAIC,EAAkBC,KAAKjB,iBACvBkB,EAAoB,IAAIjB,KAAKe,EAAgBG,UAAqB,GAATJ,EAAc,GAAK,GAAK,KACrF,OAAOE,KAAKf,YAAYgB,IAI5BE,yBA7CgB,SA6CSL,EAAgBZ,GAIrC,IAAIa,EAAkBC,KAAKL,YAAYT,GACnCe,EAAoB,IAAIjB,KAAKe,EAAgBG,UAAqB,GAATJ,EAAc,GAAK,GAAK,KACrF,OAAOE,KAAKf,YAAYgB,IAI5BG,SAvDgB,SAuDPN,EAAgBO,GAKrB,IAHA,IAAIC,EAAQ,GACRP,EAAkBC,KAAKL,YAAYU,GACnCJ,EAAoB,IAAIjB,KAAKe,EAAgBG,UAA2B,IAAdJ,EAAS,GAAU,GAAK,GAAK,KAClFS,EAAI,EAAGA,EAAIT,EAAQS,IAAI,CAC5B,IAAIjB,EAAQW,EAAkBV,WAAa,EACvCJ,OAAmB,EAEnBA,EADAG,EAAQ,GACG,WAAOA,GAEP,UAAMA,GAErB,IAAIG,EAAMQ,EAAkBP,UACxBF,OAAiB,EAEjBA,EADAC,EAAM,GACG,WAAOA,GAEP,UAAMA,GAEnBa,EAAME,KAAN,UAAchB,EAAd,YAA2BL,IAC3Bc,EAAoB,IAAIjB,KAAKiB,EAAkBC,UAAY,OAE/D,OAAOI,GAIXG,aAlFgB,SAkFHnB,EAAexC,GACxB,IAAM4D,EAAa,CACf,CAAC,IAAO,UAAW,IAAO,wCAC1B,CAAC,IAAO,WAAY,IAAO,8CAC3B,CAAC,IAAO,QAAS,IAAO,kCACxB,CAAC,IAAO,QAAS,IAAO,wCACxB,CAAC,IAAO,MAAO,IAAO,sBACtB,CAAC,IAAO,OAAQ,IAAO,4BACvB,CAAC,IAAO,OAAQ,IAAO,4BACvB,CAAC,IAAO,SAAU,IAAO,8CACzB,CAAC,IAAO,YAAa,IAAO,oDAC5B,CAAC,IAAO,UAAW,IAAO,8CAC1B,CAAC,IAAO,WAAY,IAAO,wCAC3B,CAAC,IAAO,WAAY,IAAO,+CAE/B,MAAgB,QAAT5D,EAAiB4D,EAAWpB,GAAOrC,IAAMyD,EAAWpB,GAAOtC,KAItE2D,qBArGgB,SAqGKzB,EAAcpC,GAC/B,IAAMsC,EAAOF,EAAKU,MAAM,EAAG,GACrBN,GAAUJ,EAAKU,MAAM,EAAG,GACxBgB,EAAYZ,KAAKS,cAAenB,EAAS,EAAGxC,GAC5C2C,EAAkB,MAAZP,EAAK,GAAaA,EAAKU,MAAM,EAAG,IAAMV,EAAKU,MAAM,EAAG,IAChE,MAAM,GAAN,OAAUH,EAAV,YAAiBmB,EAAjB,YAA8BxB,IAIlCyB,4BA9GgB,SA8GY3B,GACxB,IAAMO,EAAMP,EAAKU,MAAM,EAAG,IACpBN,EAAQJ,EAAKU,MAAM,EAAG,GAC5B,MAAM,GAAN,OAAUH,EAAV,YAAiBH,KC/GnBwB,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gCAGAC,EAAa,WACH,OAAD,0HACSJ,EAASK,IAAyB,WAD3C,cACRC,EADQ,yBAEPA,EAASC,MAFF,8CAMTC,EAAe,WAEH,OAAD,0HACOR,EAASK,IAAwB,aADxC,cACVC,EADU,yBAETA,EAASC,MAFA,8CAFXC,EAAe,SAOAC,EAAqBC,EAAmBnB,GAAkB,OAAD,0HACtDS,EAASK,IAAT,wBAA4DI,EAA5D,iBAAgFC,EAAhF,eAAgGnB,IAD1C,cACvEe,EADuE,yBAEtEA,EAASC,MAF6D,8CAPxEC,EAAe,SAcPG,GAAiB,OAAD,uHACzBD,EAAY1C,EAAKe,mBAAmB,GACpCQ,EAAUvB,EAAKG,YAAYH,EAAKC,kBAFP,SAGN+B,EAASK,IAAT,wBAA4DM,EAA5D,iBAA4ED,EAA5E,eAA4FnB,IAHtF,cAGvBe,EAHuB,OAIvBM,EAAaN,EAASC,KAAKD,EAASC,KAAKM,OAAS,GAAG3C,KAJ9B,kBAKtB0C,GALsB,8CAdxBJ,EAAe,SAsBEG,GAAiB,OAAD,0HACfX,EAASK,IAAT,yBAA6DM,IAD9C,cAChCL,EADgC,yBAE/BA,EAASC,MAFsB,8CCrCjCO,EAAS,CAClBC,YAAa,GACbC,aAAc,GACdC,aAAc,GACdC,QAAS,GACTC,QAAS,WACL,OAAO,IAAMjC,KAAK6B,YAAc7B,KAAK8B,aAAe9B,KAAK+B,cAE7DG,QAAS,WACL,OAAO,IAAMlC,KAAKgC,SAEtBG,YAXkB,SAWNC,GACR,IACMC,EADW,UAAMD,GACWT,OAElC,OAAIS,EADcE,KAAKC,IAAI,GAAIF,GACP,EACbC,KAAKC,IAAI,GAAIF,EAAgB,GAE7BC,KAAKC,IAAI,GAAIF,EAAgB,GAAK,ICHjDnF,EAAe,CACfsF,cAAe,KACf1C,OAAQ,GACRO,QAAS,KACTC,MAAO,GACPmC,UAAW,CACPC,UAAW,CACPC,MAAO,CAACC,OAAQ,IAChBC,MAAO,CAACD,OAAQ,KAEpBE,UAAW,CACPH,MAAO,CAACC,OAAQ,IAChBC,MAAO,CAACD,OAAQ,KAEpBG,OAAQ,CACJJ,MAAO,CAACC,OAAQ,IAChBC,MAAO,CAACD,OAAQ,MAGxBI,OAAQ,EACRC,OAAQ,EACRC,kBAAkB,EAIlBC,cAAe,GACfC,UAAU,EACVC,UAAW,KACXC,SAAU,KACVC,OAAQ,EACRC,OAAQ,EACRC,eAAe,EACfC,WAAY,CACRjC,QAAS,SACT3B,OAAQ,KACR6D,aAAc,QACdC,SAAU,cAwKLC,EACO,iBAAO,CAACrG,KAAM,8BADrBqG,EAEM,SAACH,GAAD,MAA0C,CAAClG,KAAM,4BAA6BkG,eAFpFG,EAGS,SAACrB,GAAD,MAAwC,CACtDhF,KAAM,+BACNgF,kBALKqB,GAOE,SAAC/D,GAAD,MAAqB,CAACtC,KAAM,uBAAwBsC,WAPtD+D,GAQG,SAACxD,GAAD,MAAsB,CAAC7C,KAAM,yBAA0B6C,YAR1DwD,GASC,SAACjB,GAAD,MAA2C,CAACpF,KAAM,sBAAuBoF,WAT1EiB,GAUE,SAACjB,EAAsCe,EAAgCC,GAAvE,MAAmG,CAC1GpG,KAAM,uBACNoF,SACAe,eACAC,aAdKC,GAgBG,SAACb,EAAgBC,GAAjB,MAAqC,CAACzF,KAAM,yBAA0BwF,SAAQC,WAhBjFY,GAiBY,SAACX,GAAD,MAAgC,CACjD1F,KAAM,mCACN0F,qBAnBKW,GAqBS,SAACF,EAAgCC,GAAjC,MAA6D,CAC3EpG,KAAM,+BACNmG,eACAC,aAKKE,GAAa,SAAChE,EAAoB2B,EAAiBkC,EAAgCC,GAAtE,8CAA4G,WAAO/F,GAAP,6BAAAkG,EAAA,sEAG9HlG,EAASN,GAAoB,IAHiG,SAM3F+D,IAN2F,cAMxH0C,EANwH,OAO9HnG,EAASgG,EAA6BG,IAPwF,SAUrG1C,EAAwBG,GAV6E,UAUxHC,EAVwH,OAY9H7D,EAASgG,GAAuBnC,IAGjB,OAAX5B,EAf0H,wBAgBtHmE,EAAYnF,EAAKa,YAAY+B,GAI7BwC,EAAc,IAAIlF,KAAKiF,EAAU/D,UAAwB,IAAVJ,EAAe,GAAK,GAAK,KACxEqE,EAAerF,EAAKG,YAAYiF,GArBsF,UAsBlF5C,EAA+BG,EAAS0C,EAAczC,GAtB4B,QAsBpH0C,EAtBoH,OAuB1HvG,EAASgG,GAAsBO,EAA2BT,EAAcC,IACxE/F,EAASgG,GAAqBO,IAxB4F,yCA0BvG9C,EAAiCG,GA1BsE,QA0BpHJ,EA1BoH,OA2B1HxD,EAASgG,GAAsBxC,EAAKM,SACpC9D,EAASgG,GAAsBxC,EAAMsC,EAAcC,IACnD/F,EAASgG,GAAqBxC,IA7B4F,QAiC9HxD,EAASgG,KAjCqH,kDAmC9HhG,EAASN,GAAkB,IAEvB,KAAM6D,UAGNiD,QAAQC,IAAI,KAAMlD,SAASC,MAC3BgD,QAAQC,IAAI,KAAMlD,SAASmD,QAC3BF,QAAQC,IAAI,KAAMlD,SAASoD,SAErBlH,EAAyC,CAC3CiH,OAAQ,KAAMnD,SAASmD,OACvBE,QAAS,KAAMrD,SAASC,KAAKoD,SAEjC5G,EAASN,EAA0BD,KAC5B,KAAMoH,QAMbL,QAAQC,IAAI,KAAMI,SAGlBL,QAAQC,IAAI,QAAS,KAAMG,SAE/BJ,QAAQC,IAAR,MA5D8H,yBA8D9HzG,EAASN,GAAoB,IA9DiG,6EAA5G,uDA2FXoH,GAxRU,WAA2E,IAA1EjH,EAAyE,uDAAjER,EAAcS,EAAmD,uCAC/F,OAAQA,EAAOH,MACX,IAAK,4BACD,OAAO,eAAIE,EAAX,CAAkB+F,eAAe,IAErC,IAAK,4BAGD,OAAO,eAAI/F,EAAX,CAAkBgG,WAAY/F,EAAO+F,aAEzC,IAAK,+BAUD,OATA/F,EAAO6E,cAAcoC,MAAK,SAACb,EAAGc,GAC1B,OAAId,EAAEe,QAAUD,EAAEC,QACP,EAEPf,EAAEe,QAAUD,EAAEC,SACN,EAEL,KAEJ,eAAIpH,EAAX,CAAkB8E,cAAe7E,EAAO6E,gBAE5C,IAAK,uBACD,OAAO,eAAI9E,EAAX,CAAkBoC,OAAQnC,EAAOmC,SAErC,IAAK,yBACD,OAAO,eAAIpC,EAAX,CAAkB2C,QAAS1C,EAAO0C,UAEtC,IAAK,sBAID,IAHA,IAAIC,EAAQ,GAENyE,EAAKpH,EAAOiF,OAAOjB,QAAU,GAAK,EAAI,EACnCpB,EAAIwE,EAAIxE,EAAI5C,EAAOiF,OAAOjB,OAAQpB,IACvCD,EAAME,KAAK1B,EAAK+B,4BAA4BlD,EAAOiF,OAAOrC,GAAGvB,OAEjE,OAAO,eAAItB,EAAX,CAAkB4C,MAAOA,IAE7B,IAAK,uBASD,IARA,IAAI0E,EAAqB,GACrBC,EAAuB,GACvBC,EAAqB,GACrBC,EAAuB,GACvBC,EAAkB,GAClBC,EAAoB,GAElBN,EAAKpH,EAAOiF,OAAOjB,QAAU,GAAK,EAAI,EACnCpB,EAAIwE,EAAIxE,EAAI5C,EAAOiF,OAAOjB,OAAQpB,IAC5B,IAAPwE,GAAkB,IAANxE,GACZyE,EAAmBxE,KAAK7C,EAAOiF,OAAOrC,GAAG+E,WACzCL,EAAqBzE,KAAK7C,EAAOiF,OAAOrC,GAAG+E,WAC3CJ,EAAmB1E,KAAK7C,EAAOiF,OAAOrC,GAAGgF,WACzCJ,EAAqB3E,KAAK7C,EAAOiF,OAAOrC,GAAGgF,WAC3CH,EAAgB5E,KAAK7C,EAAOiF,OAAOrC,GAAGiF,QACtCH,EAAkB7E,KAAK7C,EAAOiF,OAAOrC,GAAGiF,UAIpC7H,EAAOiF,OAAOrC,GAAG+E,WAAa3H,EAAOiF,OAAOrC,EAAI,GAAG+E,WACnDL,EAAqBzE,KAAK7C,EAAOiF,OAAOrC,GAAG+E,WAC3CN,EAAmBxE,KAAK7C,EAAOiF,OAAOrC,GAAG+E,UAAY3H,EAAOiF,OAAOrC,EAAI,GAAG+E,aAE1EL,EAAqBzE,KAAK,MAC1BwE,EAAmBxE,KAAK,OAGxB7C,EAAOiF,OAAOrC,GAAGgF,WAAa5H,EAAOiF,OAAOrC,EAAI,GAAGgF,WACnDJ,EAAqB3E,KAAK7C,EAAOiF,OAAOrC,GAAGgF,WAC3CL,EAAmB1E,KAAK7C,EAAOiF,OAAOrC,GAAGgF,UAAY5H,EAAOiF,OAAOrC,EAAI,GAAGgF,aAE1EJ,EAAqB3E,KAAK,MAC1B0E,EAAmB1E,KAAK,OAGxB7C,EAAOiF,OAAOrC,GAAGiF,QAAU7H,EAAOiF,OAAOrC,EAAI,GAAGiF,QAChDH,EAAkB7E,KAAK7C,EAAOiF,OAAOrC,GAAGiF,QACxCJ,EAAgB5E,KAAK7C,EAAOiF,OAAOrC,GAAGiF,OAAS7H,EAAOiF,OAAOrC,EAAI,GAAGiF,UAEpEH,EAAkB7E,KAAK,MACvB4E,EAAgB5E,KAAK,QAIjC,IAAMiC,EAAY,CACdC,UAAW,CACPC,MAAO,CAACC,OAAQoC,GAChBnC,MAAO,CAACD,OAAQqC,IAEpBnC,UAAW,CACPH,MAAO,CAACC,OAAQsC,GAChBrC,MAAO,CAACD,OAAQuC,IAEpBpC,OAAQ,CACJJ,MAAO,CAACC,OAAQwC,GAChBvC,MAAO,CAACD,OAAQyC,KAIlBlC,EAAgBV,EAAU9E,EAAOiG,UAAUjG,EAAOgG,cAAcf,OACtE,OAAO,eACAlF,EADP,CAEIyF,cAAeA,EACfV,UAAWA,IAGnB,IAAK,yBACD,IAAIW,EAKAA,EAHAzF,EAAOqF,OAASpB,EAAOC,YAAcD,EAAOE,cACzCnE,EAAOqF,OAASpB,EAAOK,UAAYL,EAAOG,cAC1CpE,EAAOsF,OAASrB,EAAOM,UAAYN,EAAOI,QAMjD,IAgBIwB,EAhBEiC,EAAWnD,KAAKoD,IAAIC,MAAM,KAAOjI,EAAMyF,cAAgCyC,QAAO,SAAAC,GAAE,OAAW,OAAPA,MACpFC,EAAWxD,KAAKyD,IAAIJ,MAAM,KAAOjI,EAAMyF,cAAgCyC,QAAO,SAAAC,GAAE,OAAW,OAAPA,MACpFzD,EAAQ0D,EAAWL,EACnBO,EAAapE,EAAOO,YAAYC,GAChC6D,EAAeD,EAAa1D,KAAK4D,MAAMT,EAAWO,GAClDG,EAAeH,GAAc1D,KAAK8D,KAAKN,EAAWE,GAAc,GAChEK,GAAUzE,EAAOK,UAAYL,EAAOC,YAAcD,EAAOG,aAAeH,EAAOE,eAAiBpE,EAAMoC,OAAS,GAC/GwG,GAAU1E,EAAOM,UAAYN,EAAOI,UAAYmE,EAAeF,GAC/DM,EAAU,SAAChG,GACb,OAAOqB,EAAOC,YAAcD,EAAOE,aAAevB,EAAI8F,GAEpDG,EAAU,SAACC,GACb,OAAO7E,EAAOM,UAAYN,EAAOI,QAAUsE,GAAUG,EAAQR,IAE3DS,EAASpE,KAAKqE,OAAOhJ,EAAOqF,OAASpB,EAAOE,aAAeF,EAAOC,aAAewE,GACjF9C,EAASgD,EAAQG,GAGnBlD,EADmD,OAAlD9F,EAAMyF,cAAgCuD,GAC9BF,EAAS9I,EAAMyF,cAAgCuD,IAE/C,KAEb,IAAIrD,EAAqC3F,EAAMyF,cAAuCuD,GAChFpD,EAAW5F,EAAM4C,OAAS5C,EAAM4C,MAAMoG,GAC5C,OAAO,eACAhJ,EADP,CACcsF,OAAQrF,EAAOqF,OAAQC,OAAQtF,EAAOsF,OAChDG,SAAUA,EAAUC,UAAWA,EAAWC,SAAUA,EACpDC,OAAQA,EAAQC,OAAQA,IAGhC,IAAK,mCACD,OAAO,eAAI9F,EAAX,CAAkBwF,iBAAkBvF,EAAOuF,mBAE/C,IAAK,+BACD,IAAMC,EAAgBzF,EAAM+E,UAAU9E,EAAOiG,UAAUjG,EAAOgG,cAAcf,OAC5E,OAAO,eAAIlF,EAAX,CAAkByF,cAAeA,IAErC,IAAK,0BACD,OAAO,eAAIzF,EAAX,CAAkB0F,SAAUzF,EAAOyF,WAEvC,QACI,OAAO1F,ICtFbkJ,GAAcrJ,EACdsJ,GAAsBtJ,EAKbuJ,GAJiBjI,aARR,SAACnB,GAAD,MAAuB,CAC3CJ,iBAAkBI,EAAMM,IAAIV,iBAC5BoG,WAAYhG,EAAMqJ,UAAUrD,WAC5BrG,SAAUK,EAAMM,IAAIX,SACpBP,KAAMY,EAAMM,IAAIlB,QAMF,CAAC8J,eAAaC,wBAFAhI,EAhHY,SAACL,GAAsB,IAE3DlB,EAGAkB,EAHAlB,iBAAkBsJ,EAGlBpI,EAHkBoI,YAAaC,EAG/BrI,EAH+BqI,oBAC/BG,EAEAxI,EAFAwI,mBAAoBC,EAEpBzI,EAFoByI,sBAAuBvD,EAE3ClF,EAF2CkF,WAC3CrG,EACAmB,EADAnB,SAAUP,EACV0B,EADU1B,KAERoK,EAAUC,KACVtJ,EAAWC,cAP6C,EASpCsJ,mBAAS,IAT2B,mBASvDC,EATuD,KAShDC,EATgD,KAW9DjJ,qBAAU,WACFhB,IACIgK,EAAQ,EACRE,YAAW,WACPD,EAASD,EAAQ,KAClB,MAEHJ,GAAsB,GACtBL,GAAY,GACZC,EAAoB,MACpBS,EAAS,IACTzJ,EAASiG,GAAWJ,EAAW5D,OAAQ4D,EAAWjC,QAASiC,EAAWC,aAAcD,EAAWE,eAIxG,CAACyD,EAAOhK,EAAUQ,IAErB,IAYM2J,EAAU3K,EAAUC,EAAM,yCAC1B2K,EAAU5K,EAAUC,EAAM,OAEhC,OACI,gCAEQQ,GACA,gBAACoK,EAAA,EAAD,CACIC,sBAAoB,EACpBC,sBAAoB,EACpBC,SAAS,KACTC,kBAAgB,4BAChBC,KAAMf,EACNgB,UAAWd,EAAQe,QAEnB,gBAACC,EAAA,EAAD,CAAaC,GAAG,4BACHH,UAAWd,EAAQkB,aAE5B,uBAAKJ,UAAWd,EAAQmB,kBACpB,gBAAC,IAAD,CAAkBL,UAAWd,EAAQoB,OACrC,gBAAC7J,EAAA,EAAD,8BAC2BnB,EAAiBiH,UAKpD,gBAACgE,EAAA,EAAD,KACI,gBAAC9J,EAAA,EAAD,KACKnB,EAAiBmH,SAEtB,gBAAChG,EAAA,EAAD,CAAY+J,MAAM,aACbhB,EADL,KAGA,gBAAC/I,EAAA,EAAD,CAAY+J,MAAM,YAAY7J,MAAM,UAC/B0I,EADL,IACaI,IAGjB,gBAACgB,EAAA,EAAD,KACI,uBAAKT,UAAWd,EAAQwB,eACpB,gBAACC,EAAA,EAAD,CAAQC,QAnDT,WACnB3B,GAAsB,GACtBL,GAAY,GACZC,EAAoB,MACpBS,EAAS,IACTzJ,EAASiG,GAAWJ,EAAW5D,OAAQ4D,EAAWjC,QAASiC,EAAWC,aAAcD,EAAWE,YA+CnElF,QAAQ,YACR8J,MAAM,UACNK,WAAS,EACTb,UAAWd,EAAQ4B,QAJ3B,2BAQA,gBAACH,EAAA,EAAD,CAAQC,QAnDX,WACjB3B,GAAsB,IAmDMvI,QAAQ,YACR8J,MAAM,UACNK,WAAS,EACTb,UAAWd,EAAQ4B,QAJ3B,eAiDtB3B,GAAY4B,IAAW,CACzBd,OAAQ,GAGRa,OAAQ,CACJE,cAAe,OACf,qBAAsB,CAClBC,aAAc,KAGtBb,YAAa,CACTc,gBAAiBC,IAAI,MAEzBd,iBAAkB,CACdG,MAAOY,IAAK,IACZC,QAAS,OACTC,WAAY,UAEhBhB,KAAM,CACFiB,YAAa,IAEjBb,cAAe,CACXc,SAAU,KC/KLC,GAAmB,SAAC/L,GAAD,OAAsBA,EAAMqJ,UAAUvE,eACzDkH,GAAY,SAAChM,GAAD,OAAsBA,EAAMqJ,UAAUjH,QAClD6J,GAAa,SAACjM,GAAD,OAAsBA,EAAMqJ,UAAU1G,SACnDD,GAAW,SAAC1C,GAAD,OAAsBA,EAAMqJ,UAAUzG,OAEjDsJ,GAAY,SAAClM,GAAD,OAAsBA,EAAMqJ,UAAU/D,QAClD6G,GAAY,SAACnM,GAAD,OAAsBA,EAAMqJ,UAAU9D,QAClD6G,GAAsB,SAACpM,GAAD,OAAsBA,EAAMqJ,UAAU7D,kBAC5D6G,GAAmB,SAACrM,GAAD,OAAsBA,EAAMqJ,UAAU5D,eACzD6G,GAAc,SAACtM,GAAD,OAAsBA,EAAMqJ,UAAU3D,UACpD6G,GAAe,SAACvM,GAAD,OAAsBA,EAAMqJ,UAAU1D,WACrD6G,GAAc,SAACxM,GAAD,OAAsBA,EAAMqJ,UAAUzD,UACpD6G,GAAY,SAACzM,GAAD,OAAsBA,EAAMqJ,UAAUxD,QAClD6G,GAAY,SAAC1M,GAAD,OAAsBA,EAAMqJ,UAAUvD,QAElD6G,GAAwB,SAAC3M,GAAD,OAAsBA,EAAMqJ,UAAUrD,Y,2DCa5D4G,GA1BW,SAAC,GAMO,IALHC,EAKE,EALFA,MAKE,KAJFC,MAIE,EAHFC,MAAOC,EAGL,EAHKA,QAASC,EAGd,EAHcA,MAChBC,EAEE,EAFFA,SACGC,EACD,oDAC7B,OAEI,kBAACC,GAAA,EAAD,CAAaH,MAAOD,GAAWC,GAC3B,kBAACI,GAAA,EAAD,eACIC,QAAM,GACFT,EACAM,EAHR,CAIII,WAAY,CACRC,KAAMX,EAAMW,QAIfN,K,oBCaFO,GA1B+B,SAAC3M,GAAyB,IAC7D4M,EAA8B5M,EAA9B4M,WAAYF,EAAkB1M,EAAlB0M,KAAMG,EAAY7M,EAAZ6M,SACnBnE,EAAUC,KACVtJ,EAAWC,cAKjB,OACI,yBAAKkK,UAAWd,EAAQoE,KACpB,yBAAKtD,UAAWd,EAAQqE,WACpB,kBAAC9M,EAAA,EAAD,CAAYuJ,UAAWd,EAAQsE,YAC1BJ,IAIT,kBAACK,GAAA,EAAD,CAAOP,KAAMA,EACNQ,UAAWpB,GACXtC,UAAWd,EAAQyE,YACnBC,SAdS,WACpBrE,YAAW,kBAAM1J,EAASgO,aAAO,mBAexBR,KAcXlE,GAAY4B,IAAW,CACzBuC,IAAK,CACDjC,QAAS,OACTyC,oBAAqB,UACrBC,cAAe,EACf9C,aAAc,GAElBsC,UAAW,CACPlC,QAAS,OACT2C,eAAgB,WAChB1C,WAAY,SACZJ,gBAAiB+C,KAAS,KAC1BC,aAAc,IAElBV,WAAY,CACRhD,MAAOY,IAAK,KAEhBuC,YAAa,CACTzC,gBAAiBE,IAAK,OC7DjB+C,GAAe,SAACzO,GAAD,OAAsBA,EAAMM,IAAIZ,WAC/CgP,GAAc,SAAC1O,GAAD,OAAsBA,EAAMM,IAAIX,UAE9CgP,GAAU,SAAC3O,GAAD,OAAsBA,EAAMM,IAAIlB,MCsEjDwP,GAAYC,aAAqD,CACnEC,KAAM,aADQD,EAhEoB,SAAC/N,GAAwC,IAEvEiO,EACAjO,EADAiO,aAAcjK,EACdhE,EADcgE,cAAe1F,EAC7B0B,EAD6B1B,KAE3B4P,EAAe,OAAGlK,QAAH,IAAGA,OAAH,EAAGA,EAAemK,KACnC,SAAC9G,EAAItF,GAAL,OACI,4BAAQqM,IAAKrM,EACLkG,MAAOZ,EAAGgH,MACbhH,EAAGf,YAWVgI,EANc,CAChB,CAACtC,MAAO3N,EAAUC,EAAM,UAAW2J,MAAO,GAC1C,CAAC+D,MAAO3N,EAAUC,EAAM,UAAW2J,MAAO,IAC1C,CAAC+D,MAAO3N,EAAUC,EAAM,WAAY2J,MAAO,IAC3C,CAAC+D,MAAO3N,EAAUC,EAAM,YAAa2J,OAAQ,IAEdkG,KAC/B,SAAC9G,EAAItF,GAAL,OACI,4BAAQqM,IAAKrM,EACLkG,MAAOZ,EAAGY,OACbZ,EAAG2E,UAQVuC,EAJoB,CACtB,CAACvC,MAAO3N,EAAUC,EAAM,UAAW2J,MAAO,SAC1C,CAAC+D,MAAO3N,EAAUC,EAAM,SAAU2J,MAAO,UAEEkG,KAC3C,SAAC9G,EAAItF,GAAL,OACI,4BAAQqM,IAAKrM,EACLkG,MAAOZ,EAAGY,OACbZ,EAAG2E,UASVwC,EALgB,CAClB,CAACxC,MAAO3N,EAAUC,EAAM,aAAc2J,MAAO,aAC7C,CAAC+D,MAAO3N,EAAUC,EAAM,aAAc2J,MAAO,aAC7C,CAAC+D,MAAO3N,EAAUC,EAAM,UAAW2J,MAAO,WAEPkG,KACnC,SAAC9G,EAAItF,GAAL,OACI,4BAAQqM,IAAKrM,EACLkG,MAAOZ,EAAGY,OACbZ,EAAG2E,UAIhB,OACI,0BAAMyC,SAAUR,GACZ,kBAAC,GAAD,CAAkBrB,WAAYvO,EAAUC,EAAM,WAAYoO,KAAK,UAAUG,SAAUqB,IACnF,kBAAC,GAAD,CAAkBtB,WAAYvO,EAAUC,EAAM,UAAWoO,KAAK,SAASG,SAAUyB,IACjF,kBAAC,GAAD,CAAkB1B,WAAYvO,EAAUC,EAAM,kBAAmBoO,KAAK,eACpDG,SAAU0B,IAC5B,kBAAC,GAAD,CAAkB3B,WAAYvO,EAAUC,EAAM,aAAcoO,KAAK,WAAWG,SAAU2B,QA+BnFE,GApBqB,WAChC,IAAMrP,EAAWC,cACX0E,EAAgBzE,YAAY0L,IAC5B3M,EAAOiB,YAAYsO,IAMnBc,EALapP,YAAYsM,IAM/B,OACI,kBAACiC,GAAD,CAAWW,SALE,SAACG,GACdvP,EAASgG,EAA0BuJ,KAKxBC,oBAAkB,EAClBF,cAAeA,EACf3K,cAAeA,EACf1F,KAAMA,KCtCVwQ,GAFQC,IAAMC,MAlBO,WAAqB,IAAD,EAhClC,WAClB,IAAMtG,EAAUC,KACZsG,EAAgBC,iBAAiC,MACjDC,EAAmBJ,IAAMG,OAAwC,MAuBrE,OArBArP,qBAAU,WACN,GAAIoP,EAAcG,QAAS,CACvB,IAAM3L,EAAUL,EAAOK,UACjBC,EAAUN,EAAOM,UACvByL,EAAiBC,QAAUH,EAAcG,QAAQC,WAAW,MAC5D,IAAIC,EAAMH,EAAiBC,QAC3BE,EAAKC,UAAU,EAAG,EAAG9L,EAASC,GAC9B4L,EAAKE,UAAY,OACjBF,EAAKG,SAAS,EAAG,EAAGhM,EAASC,GAC7B4L,EAAKI,YAAc,OACnBJ,EAAKK,UAAY,EACjBL,EAAKM,YAAY,IACjBN,EAAKO,YACLP,EAAKQ,OAAO1M,EAAOC,YAAa,GAChCiM,EAAKS,OAAO3M,EAAOC,YAAaD,EAAOM,UAAYN,EAAOI,SAC1D8L,EAAKQ,OAAO1M,EAAOC,YAAaD,EAAOM,UAAYN,EAAOI,SAC1D8L,EAAKS,OAAO3M,EAAOK,UAAWL,EAAOM,UAAYN,EAAOI,SACxD8L,EAAKU,YAEV,IAEI,CACHtH,UAASuG,iBAQTgB,GADAvH,EAFgD,EAEhDA,QAASuG,EAFuC,EAEvCA,cAGb,OACI,oCACI,4BACIzF,UAAWd,EAAQwH,WACnBC,IAAKlB,EACLmB,MAAOhN,EAAOK,UACd4M,OAAQjN,EAAOM,gBAYzBiF,GAAY4B,IAAW,CACzB2F,WAAY,CACRI,OAAQ,EACRC,SAAU,WACVC,IAAK,EACLC,KAAM,K,oBCnDCC,GATa,WACxB,IAAMhI,EAAUC,KAChB,OACI,yBAAKa,UAAWd,EAAQiI,iBACpB,kBAACC,GAAA,EAAD,CAAkBC,KAAM,IAAK7G,MAAM,cAQzCrB,GAAY4B,aAAW,CACzBoG,gBAAiB,CACbJ,SAAU,WACVC,IAAK,EACLM,OAAQ,EACRL,KAAM,EACNM,MAAO,EACPlG,QAAS,OACT2C,eAAgB,SAChB1C,WAAY,SACZwF,OAAQ,QCND9P,GAhBmB,SAACR,GAAsB,IAC9CwQ,EAAmBxQ,EAAnBwQ,IAAKC,EAAczQ,EAAdyQ,KAAM/P,EAAQV,EAARU,KACZgI,EAAUC,KAEZqI,EAAc,CACdR,IAAKA,EACLC,KAAMA,GAGV,OACI,yBAAKjH,UAAWd,EAAQhI,KAAMuQ,MAAOD,GAChCtQ,IAcPiI,GAAY4B,IAAW,CACzB7J,KAAM,CACF6P,SAAU,WACVW,UAAW,uBACXxG,gBAAiB+C,KAAS,KAC1BzD,MAAOY,IAAK,IACZ0F,OAAQ,IACRa,QAAS,UACTC,aAAc,KCsBPC,GAZa,WAAqB,IAEzCC,EA3CS,WAeb,IAdA,IAAMxP,EAAQvC,YAAYqC,IACpBN,EAAS/B,YAAY2L,IACrBzH,EAAUL,EAAOK,UACjBC,EAAUN,EAAOM,UACjBF,EAAUJ,EAAOI,QACjBH,EAAcD,EAAOC,YACrBE,EAAeH,EAAOG,aACtBD,EAAeF,EAAOE,aACtBuE,GAAUpE,EAAUJ,EAAcE,EAAeD,IAAiBhC,EAAS,GAC7EyG,EAAU,SAAChG,GACX,OAAOsB,EAAcC,EAAevB,EAAI8F,GAExC2I,EAAM9M,EAAUF,EAChB+N,EAAU,GACLxP,EAAI,EAAGA,EAAID,EAAMqB,OAAQpB,IAC9BwP,EAAQvP,KAAK+F,EAAQhG,IAGzB,IAAIyP,EAAI,EAgBR,OAfgB,MAAXlQ,EACDkQ,EAAI,GACIlQ,EAAS,KACjBkQ,EAAI1N,KAAK4D,OAAOpG,EAAS,KAYtB,CACHgQ,cAXgBxP,EAAMqM,KACtB,SAACzN,EAAMqB,GAAP,OACKA,EAAIyP,IAAM,EACL,kBAAC,GAAD,CAAMpD,IAAKrM,EACLrB,KAAMA,EACN8P,IAAKA,EACLC,KAAMc,EAAQxP,KAEpB,SAWV0P,GADAH,cAGJ,OACI,oCACKA,I,0CCvDAI,GAAmB,SAACC,GAI7B,IAHA,IAAIC,EAAe,UAAMD,GACrBxO,EAASyO,EAAQzO,OACjB0O,EAAS,GACN1O,EAAS,GACZ0O,EAAS,IAAMD,EAAQxQ,MAAM+B,EAAS,GAAK0O,EAC3CD,EAAUA,EAAQxQ,MAAM,EAAG+B,EAAS,GACpCA,GAAkB,EAGtB,OADA0O,EAASD,EAAUC,GCiGRC,GAnCY,WAAqB,IAAD,EApD/B,WACZ,IAWe/P,EAaXgQ,EAxBE1S,EAAWC,cACXgC,EAAS/B,YAAY2L,IACrB1G,EAASjF,YAAY6L,IACrB3G,EAASlF,YAAY8L,IACrBjG,EAAW7F,YAAYsM,IAAuBzG,SAC9CP,EAAYtF,YAAYkM,IACxB3G,EAAWvF,YAAYmM,IAEvBhD,EAAUC,KAEVd,GAAUzE,EAAOK,UAAYL,EAAOC,YAAcD,EAAOG,aAAeH,EAAOE,eAAiBhC,EAAS,GAI3G0Q,EAAalO,KAAKqE,OAAO3D,EAASpB,EAAOE,aAAeF,EAAOC,aAAewE,GAC9EoK,EAAaD,IAJFjQ,EAIwBiQ,EAH5B5O,EAAOC,YAAcD,EAAOE,aAAevB,EAAI8F,GAKpDjD,EAAYJ,EAASpB,EAAOC,YAAcD,EAAOE,cAC/CkB,EAASpB,EAAOK,UAAYL,EAAOG,aAEvC2O,EAAY,CACZ1B,IAAK/L,EAAS,GACdgM,KAHGwB,EAGU,IAGA,cAAb7M,IAA0B2M,EAAapH,IAAI,MAC9B,cAAbvF,IAA0B2M,EAAaI,KAAM,MAChC,WAAb/M,IAAuB2M,EAAaK,KAAO,MAgB/C,MAAO,CACHxN,WAAUyN,aAZK,WACfhT,EAASgG,IAAgC,KAWjBiN,aART,WACfjT,EAASgG,IAAgC,KAOH6M,YACtCxJ,UAAS6J,WAjBI,CACbvI,MAAO+H,GAgBcS,eALO3N,GAA2B,IAAdA,EACvC6M,GAAiB7M,GACjB,UAGmCC,YAUrC2N,GAFA7N,EAFuC,EAEvCA,SAAUyN,EAF6B,EAE7BA,aAAcC,EAFe,EAEfA,aAAcJ,EAFC,EAEDA,UACtCxJ,EAHuC,EAGvCA,QAAS6J,EAH8B,EAG9BA,WAAYC,EAHkB,EAGlBA,eAAgB1N,EAHE,EAGFA,SAKzC,OACI,oCAEQF,GACA,yBAAKyN,aAAcA,EACdC,aAAcA,EACdrB,MAAOiB,EACP1I,UAAWd,EAAQgK,MAEpB,kBAACzS,EAAA,EAAD,CAAYC,QAAQ,QACR+Q,MAAOsB,EACP/I,UAAWd,EAAQT,OAE1BuK,GAGL,kBAACvS,EAAA,EAAD,CAAYC,QAAQ,QACR8J,MAAM,eAEblF,MAWnB6D,GAAY4B,IAAW,CACzBmI,KAAM,CACFnC,SAAU,WACV7F,gBAAiBE,IAAK,IACtB0F,OAAQ,IACRqC,OAAQ,UACRxB,QAAS,UACTyB,UAAW,sCAEf3K,MAAO,CACH4K,WAAY,OCtGLC,GAXoB,SAAC9S,GAAsB,IAC/CwQ,EAAoBxQ,EAApBwQ,IAAKC,EAAezQ,EAAfyQ,KAAMxI,EAASjI,EAATiI,MACZS,EAAUC,KACZqI,EAAc,CAACR,IAAKA,EAAKC,KAAMA,GACnC,OACI,yBAAKjH,UAAWd,EAAQT,MAAOgJ,MAAOD,GACjCU,GAAiBzJ,KAcxBU,GAAY4B,IAAW,CACzBtC,MAAO,CACHsI,SAAU,WACVW,UAAW,yBACXxG,gBAAiB+C,KAAS,KAC1BzD,MAAOY,IAAK,IACZ0F,OAAQ,IACRa,QAAS,UACTC,aAAc,KC8BP2B,GA1Dc,WACzB,IAUIvL,EACAC,EACAE,EACAG,EAbEnD,EAAgBpF,YAAYgM,IAE5B/H,EAAUJ,EAAOI,QACjBE,EAAUN,EAAOM,UAEjBsP,EAAsBrO,EAAcyC,QAAO,SAAAC,GAAE,OAAIA,GAAa,IAAPA,KACvDJ,EAAWnD,KAAKoD,IAAIC,MAAM,KAAM6L,GAChC1L,EAAWxD,KAAKyD,IAAIJ,MAAM,KAAM6L,GAChCpP,EAAQ0D,EAAWL,EAMrBgM,EAAY,GACZC,EAAS,GAEb,GAAc,IAAVtP,EAAa,CACb4D,EAAapE,EAAOO,YAAYC,GAChC6D,EAAeD,EAAa1D,KAAK4D,MAAMT,EAAWO,GAClDG,EAAeH,GAAc1D,KAAK8D,KAAKN,EAAWE,GAAc,GAChEM,GAAUpE,EAAUF,IAAYmE,EAAeF,GAM/C,IALA,IAAMO,EAAU,SAACC,GACb,OAAOvE,EAAUF,EAAUsE,GAAUG,EAAQR,IAG7C0L,EAAI1L,IAKJ,GAHAwL,EAAUjR,KAAKmR,GACfD,EAAOlR,KAAKgG,EAAQmL,KACpBA,GAAK3L,GACGG,EAAeH,EAAY,CAC/ByL,EAAUjR,KAAKmR,GACfD,EAAOlR,KAAKgG,EAAQmL,IACpB,YAIRF,EAAY,CAAC3L,GACb4L,EAAS,CAAC9P,EAAOM,UAAY,EAAIN,EAAOI,SAG5C,IAAIiN,EAAOrN,EAAOC,YAAc,EAC5B+P,EAAiBH,EAAU9E,KAAI,SAAC9G,EAAItF,GAAL,OAC/B,kBAAC,GAAD,CAAOqM,IAAKrM,EACLkG,MAAOZ,EACPmJ,IAAK0C,EAAOnR,GACZ0O,KAAMA,OAGjB,OACI,oCACK9L,EAAcxB,QAAUiQ,I,qBCgHtBC,GAlB0B,WAAqB,IAAD,EAhJtC,WACnB,IAAM3K,EAAUC,KACVtJ,EAAWC,cACXqF,EAAgBpF,YAAYgM,IAC5BjK,EAAS/B,YAAY2L,IACrB9F,EAAW7F,YAAYsM,IAAuBzG,SAEhDkO,EAAYpE,iBAAiC,MAC7CqE,EAAexE,IAAMG,OAAwC,MAEjErP,qBAAU,WACN,IAAMwD,EAAcD,EAAOC,YACrBC,EAAeF,EAAOE,aACtBC,EAAeH,EAAOG,aACtBC,EAAUJ,EAAOI,QACjBC,EAAUL,EAAOK,UACjBC,EAAUN,EAAOM,UAEvB,GAAI4P,EAAUlE,QAAS,CACnBmE,EAAanE,QAAUkE,EAAUlE,QAAQC,WAAW,MACpD,IAAIC,EAAMiE,EAAanE,QACvBE,EAAKC,UAAU,EAAG,EAAG9L,EAASC,GAC9B4L,EAAKE,UAAY,cACjBF,EAAKG,SAAS,EAAG,EAAGhM,EAASC,GAE7B,IASI8D,EAAoBC,EAAsBE,EAAsBG,EAT9DkL,EAAsBrO,EAAcyC,QAAO,SAAAC,GAAE,OAAIA,GAAa,IAAPA,KACvDJ,EAAWnD,KAAKoD,IAAIC,MAAM,KAAM6L,GAChC1L,EAAWxD,KAAKyD,IAAIJ,MAAM,KAAM6L,GAChCpP,EAAQ0D,EAAWL,EACnBY,GAAUpE,EAAUJ,EAAcE,EAAeD,IAAiBhC,EAAS,GAC7EyG,EAAU,SAAChG,GACX,OAAOsB,EAAcC,EAAevB,EAAI8F,GAI5C,GAAc,IAAVjE,EAAa,CACb4D,EAAapE,EAAOO,YAAYC,GAEhC6D,EAAeD,EAAa1D,KAAK4D,MAAMT,EAAWO,GAClDG,EAAeH,GAAc1D,KAAK8D,KAAKN,EAAWE,GAAc,GAChEM,GAAUpE,EAAUF,IAAYmE,EAAeF,GAE/C,IAAIO,EAAU,SAACC,GACX,OAAOvE,EAAUF,EAAUsE,GAAUG,EAAQR,IAIjD6H,EAAKI,YAAc,UACnBJ,EAAKK,UAAY,EACjBL,EAAKM,YAAY,IAEjB,IADA,IAAI4D,EAAa/L,EAEb6H,EAAKO,YACLP,EAAKQ,OAAOzM,EAAa2E,EAAQwL,IACjClE,EAAKS,OAAOtM,EAASuE,EAAQwL,IAC7BlE,EAAKU,YACLwD,GAAchM,GACGG,WAMrBH,EAAa,EACbC,EAAeR,EACfU,EAAeL,EAGnB,IAAIU,EAAU,SAACC,GACX,OAAc,IAAVrE,EACOF,EAAUF,EAAUsE,GAAUG,EAAQR,GAErC/D,EAAW,EAAIF,GAKd,cAAb4B,IAA0BkK,EAAKI,YAAc,OAChC,cAAbtK,IAA0BkK,EAAKI,YAAc,SAChC,WAAbtK,IAAuBkK,EAAKI,YAAc,QAC9CJ,EAAKK,UAAY,EACjBL,EAAKM,YAAY,IACjB,IAAK,IAAI7N,EAAI,EAAGA,EAAIT,EAAQS,IAAK,CAU7B,GATU,IAANA,IACAuN,EAAKO,YACoB,OAArBlL,EAAc,GACd2K,EAAKQ,OAAO/H,EAAQhG,GAAIiG,EAAQrD,EAAc,KAE9C2K,EAAKQ,OAAO/H,EAAQhG,GAAIiG,EAAQP,KAIpC1F,EAAI,EAAG,CACP,IAAM0R,EAAY9O,EAAc5C,EAAE,GAC5B2R,EAAW/O,EAAc5C,GAEb,OAAd0R,GAAmC,OAAbC,GACtBpE,EAAKS,OAAOhI,EAAQhG,GAAIiG,EAAQ0L,IAElB,OAAdD,GAAmC,OAAbC,IACtBpE,EAAKS,OAAOhI,EAAQhG,EAAI,GAAIiG,EAAQP,IACpC6H,EAAKQ,OAAO/H,EAAQhG,GAAIiG,EAAQP,KAEnB,MAAbgM,GAAkC,OAAbC,IACrBpE,EAAKQ,OAAO/H,EAAQhG,GAAIiG,EAAQP,IAChC6H,EAAKS,OAAOhI,EAAQhG,GAAIiG,EAAQ0L,KAEnB,MAAbD,GAAyC,MAApB9O,EAAc5C,IACnCuN,EAAKQ,OAAO/H,EAAQhG,GAAIiG,EAAQP,IAGpC1F,IAAMT,EAAS,GACfgO,EAAKU,aAIlB,CAACrL,EAAerD,EAAQ8D,IAE3B,IASMuO,EAAsBC,MATR,SAACC,GACjB,GAAIA,EAAEC,OAAQ,CACV,IAAMC,EAAkBF,EAAEG,cAAcC,wBAClCC,EAAIL,EAAEM,QAAUJ,EAAOtD,KACvB0C,EAAIU,EAAEO,QAAUL,EAAOvD,IAC7BnR,EAASgG,GAAuB6O,EAAGf,OAIO,IAUlD,MAAO,CACHzK,UAAS4K,YAAWK,sBACpBtB,aAViB,WACjBhT,EAASgG,IAAgC,KAS3BiN,aANG,WACjBjT,EAASgG,IAAgC,MAczCgP,GAFA3L,EAFqD,EAErDA,QAAS4K,EAF4C,EAE5CA,UAAWK,EAFiC,EAEjCA,oBACpBtB,EAHqD,EAGrDA,aAAcC,EAHuC,EAGvCA,aAGlB,OACI,4BACI9I,UAAWd,EAAQ4L,YACnBnE,IAAKmD,EACLlD,MAAOhN,EAAOK,UACd4M,OAAQjN,EAAOM,UACf6Q,YAAaZ,EACbtB,aAAcA,EACdC,aAAcA,KAOpB3J,GAAY4B,IAAW,CACzB+J,YAAa,CACThE,OAAQ,EACRC,SAAU,WACVC,IAAK,EACLC,KAAM,KC1DC+D,GApB0B,WAAqB,IAAD,EAtFtC,WACnB,IAAM9L,EAAUC,KACVtJ,EAAWC,cACXoF,EAAmBnF,YAAY+L,IAC/B9G,EAASjF,YAAY6L,IACrBrG,EAASxF,YAAYoM,IACrB3G,EAASzF,YAAYqM,IACrBxG,EAAW7F,YAAYsM,IAAuBzG,SAC9CR,EAAWrF,YAAYiM,IAEzB8H,EAAYpE,iBAAiC,MAC7CqE,EAAerE,iBAAwC,MAE3DrP,qBAAU,WACN,GAAIyT,EAAUlE,SAAW1K,GAAoBE,EAAU,CACnD,IAAMvB,EAAcD,EAAOC,YACrBC,EAAeF,EAAOE,aACtBC,EAAeH,EAAOG,aACtBC,EAAUJ,EAAOI,QACjBC,EAAUL,EAAOK,UACjBC,EAAUN,EAAOM,UACvB6P,EAAanE,QAAUkE,EAAUlE,QAAQC,WAAW,MACpD,IAAIC,EAAMiE,EAAanE,QAmBvB,GAlBAE,EAAKC,UAAU,EAAG,EAAG9L,EAASC,GAC9B4L,EAAKE,UAAY,cACjBF,EAAKG,SAAS,EAAG,EAAGhM,EAASC,GAG7B4L,EAAKI,YAAc,UACnBJ,EAAKK,UAAY,EACjBL,EAAKM,YAAY,CAAC,EAAG,IACrBN,EAAKO,YAEDrL,EAASnB,EAAcC,GACpBkB,EAASf,EAAUF,IACtB+L,EAAKQ,OAAO/K,EAAQ,GACpBuK,EAAKS,OAAOhL,EAAQrB,EAAUF,GAC9B8L,EAAKU,UAIM,OAAXhL,EAAiB,CACjB,IAAIgF,EAAQ,MACK,cAAb5E,IAA0B4E,EAAQ,OACrB,cAAb5E,IAA0B4E,EAAQ,SACrB,WAAb5E,IAAuB4E,EAAQ,QACnCsF,EAAKI,YAAc1F,EACnBsF,EAAKK,UAAY,EACjBL,EAAKmF,SAAW,QAChBnF,EAAKM,YAAY,IACjBN,EAAKO,YACLP,EAAKoF,IAAI3P,EAAQC,EAAQ,EAAG,EAAG,EAAIlB,KAAK6Q,IACxCrF,EAAKU,SACLV,EAAKE,UAAYxF,EACjBsF,EAAKsF,WAId,CAAClQ,EAAkBF,EAAQO,EAAQC,EAAQI,EAAUR,IAExD,IAiBM+O,EAAsBC,MATR,SAACC,GACjB,GAAIA,EAAEC,OAAQ,CACV,IAAMC,EAAkBF,EAAEG,cAAcC,wBAClCC,EAAIL,EAAEM,QAAUJ,EAAOtD,KACvB0C,EAAIU,EAAEO,QAAUL,EAAOvD,IAC7BnR,EAASgG,GAAuB6O,EAAGf,OAIO,IAElD,MAAO,CACHzK,UAAS4K,YAAWjB,aApBH,WACjBhT,EAASgG,IAAgC,KAoBzCiN,aAjBiB,WACjBjT,EAASgG,IAAgC,KAgB3BsO,uBAUdkB,GAFAnM,EAHqD,EAGrDA,QAAS4K,EAH4C,EAG5CA,UAAWjB,EAHiC,EAGjCA,aACpBC,EAJqD,EAIrDA,aAAcqB,EAJuC,EAIvCA,oBAGlB,OACI,4BACInK,UAAWd,EAAQ4L,YACnBnE,IAAKmD,EACLlD,MAAOhN,EAAOK,UACd4M,OAAQjN,EAAOM,UACf2O,aAAcA,EACdC,aAAcA,EACdiC,YAAaZ,KAQnBhL,GAAY4B,IAAW,CACzB+J,YAAa,CACThE,OAAQ,EACRC,SAAU,WACVC,IAAK,EACLC,KAAM,KCxECqE,GA5BwB,WAAqB,IAAD,EAbtC,WACjB,IAAMpM,EAAUC,KACVjE,EAAmBnF,YAAY+L,IAC/B1G,EAAWrF,YAAYiM,IACvB5M,EAAYW,YAAYoO,IAG9B,MAAO,CACHjF,UAAS7J,SAHIU,YAAYqO,IAGNhP,YAAWgG,WAAUF,oBAQxCqQ,GADArM,EAFmD,EAEnDA,QAAS7J,EAF0C,EAE1CA,SAAUD,EAFgC,EAEhCA,UAAWgG,EAFqB,EAErBA,SAAUF,EAFW,EAEXA,iBAG5C,OACI,yBAAK8E,UAAWd,EAAQsM,aACpB,yBAAKxL,UAAWd,EAAQuM,WACpB,kBAAC,GAAD,OAEKpW,GACD,oCAEQD,EACM,kBAAC,GAAD,MACA,oCACE,kBAAC,GAAD,MACCgG,GAAYF,GAAoB,kBAAC,GAAD,MACjC,kBAAC,GAAD,MACCE,GAAYF,GAAoB,kBAAC,GAAD,MACjC,kBAAC,GAAD,WAW9BiE,GAAY4B,IAAW,CACzByK,YAAa,CACTtK,gBAAiB,QACjBG,QAAS,OACT2C,eAAgB,SAChB/C,aAAc,GAElBwK,UAAW,CACPC,OAAQ,iBACR3E,SAAU,WACVH,MAAOhN,EAAOK,UACd4M,OAAQjN,EAAOM,aCzDjByR,GAAe,WACjB/V,IACA,IAAMsJ,EAAUC,KAFO,EAG6BC,oBAAS,GAHtC,mBAGhBJ,EAHgB,KAGIC,EAHJ,KAIjB5J,EAAWU,aAAY,SAACL,GAAD,OAAsBA,EAAMM,IAAIX,YACvDgD,EAAUtC,YAAY4L,IACtB9L,EAAWC,cACX4F,EAAa3F,YAAYsM,IACxB5I,EAA2CiC,EAA3CjC,QAAS3B,EAAkC4D,EAAlC5D,OAAQ6D,EAA0BD,EAA1BC,aAAcC,EAAYF,EAAZE,SARf,EAUiB3F,YAAc,UAAWC,KAV1C,mBAUhB0V,EAVgB,KAUFC,EAVE,OAWe5V,YAAc,SAAUC,KAXvC,mBAWhB4V,EAXgB,KAWHC,EAXG,OAY2B9V,YAAc,eAAgBC,KAZzD,mBAYhB8V,EAZgB,KAYGC,EAZH,OAamBhW,YAAc,WAAYC,KAb7C,mBAahBgW,EAbgB,KAaDC,EAbC,OAciBlW,YAAc,UAAWC,KAd1C,mBAchBkW,EAdgB,KAcFC,EAdE,KA0EvB,OAxDAhW,qBAAU,WACN,IAAMiW,EAAiBV,GAA8BnS,EAC/C8S,EAAgBT,GAA0ChU,EAC1D0U,EAAsBR,GAA4DrQ,EAClF8Q,EAAkBP,GAAgDtQ,EACxE/F,EAASgG,EAA0B,CAC/BpC,QAAS6S,EACTxU,OAAQyU,EACR5Q,aAAc6Q,EACd5Q,SAAU6Q,KAEd5W,EAASgG,GAAuBuQ,GAA8B/T,IAC9DxC,EAASiG,GAAWyQ,EAAeD,EAAgBE,EAAqBC,MACzE,CAAC5W,IAGJQ,qBAAU,WACNwV,EAA4B,WAAZpS,EAAuBA,OAAUnD,GACjDyV,EAA0B,OAAXjU,EAAkBA,OAASxB,GAC1C2V,EAAsC,UAAjBtQ,EAA2BA,OAAerF,GAC/D6V,EAA8B,cAAbvQ,EAA2BA,OAAWtF,GACvD+V,EAAgBhU,QAAoB/B,KACrC,CAACoF,EAAYrD,IAIhBhC,qBAAU,WACFgC,GACAxC,ElB+Pa,SAACwC,EAAiBP,EAAoB2B,EAAiBkC,EAAgCC,GAAvF,8CAA6H,WAAO/F,GAAP,uBAAAkG,EAAA,kEAE9IlG,EAASN,GAAoB,IACd,OAAXuC,EAH0I,wBAItImE,EAAYnF,EAAKa,YAAYU,GAC7B6D,EAAc,IAAIlF,KAAKiF,EAAU/D,UAAwB,IAAVJ,EAAe,GAAK,GAAK,KACxEqE,EAAerF,EAAKG,YAAYiF,GANsG,SAOvH5C,EAA+BG,EAAS0C,EAAc9D,GAPiE,OAOpIgB,EAPoI,OAQ1IxD,EAASgG,GAAsBxC,EAAMsC,EAAcC,IACnD/F,EAASgG,GAAqBxC,IAT4G,yCAWvHC,EAAiCG,GAXsF,QAWpIJ,EAXoI,OAY1IxD,EAASgG,GAAsBxC,EAAKM,SACpC9D,EAASgG,GAAsBxC,EAAMsC,EAAcC,IACnD/F,EAASgG,GAAqBxC,IAd4G,0DAiB9IgD,QAAQC,IAAR,MACAzG,EAASN,GAAkB,IAlBmH,yBAoB9IM,EAASN,GAAoB,IApBiH,6EAA7H,sDkB/PJmX,CAAUrU,EAASP,EAAQ2B,EAASkC,EAAcC,MAEhE,CAACnC,EAAS3B,EAAQjC,IAErBQ,qBAAU,YACW,KAAZyB,GACDjC,EAASgG,IAAuB/D,MAErC,CAACA,IAGJzB,qBAAU,WACNR,EAASgG,GAA6BF,EAAcC,MACrD,CAACD,EAAcC,EAAU/F,IAG5BQ,qBAAU,WACFhB,GACA4J,GAAsB,KAE3B,CAAC5J,IAQG,CACH6J,UAASF,qBAAoBC,0BAwBtB0N,GAnBa,WAAqB,IAAD,EAGxChB,KADAzM,EAFwC,EAExCA,QAASF,EAF+B,EAE/BA,mBAAoBC,EAFW,EAEXA,sBAGjC,OACI,yBAAKe,UAAWd,EAAQH,WACpB,6BACI,kBAAC,GAAD,OAEJ,6BACI,kBAAC,GAAD,OAEJ,kBAAC,GAAD,CAAyBC,mBAAoBA,EACpBC,sBAAuBA,MAQtDE,GAAY4B,IAAW,CACzBhC,UAAW,CACP4I,QAAS,oBC7EFiF,GApC+B,SAACpW,GAAoC,IACxEgK,EAAgChK,EAAhCgK,MAAO5E,EAAyBpF,EAAzBoF,SAAU6C,EAAejI,EAAfiI,MAAO6B,EAAQ9J,EAAR8J,KACzBpB,EAAUC,KAYV0N,EAViB9L,IAAW,CAC9BvL,KAAM,CACFgM,SAAU,EACVsL,YAAa,EACbtM,MAAOA,GAEXuM,YAAa,CACTvM,MAAOA,IAGMwM,GAErB,OACI,yBAAKhN,UAAWd,EAAQ+N,MACpB,kBAACxW,EAAA,EAAD,CAAYC,QAAQ,KACRsJ,UAAW6M,EAAarX,MAC/BoG,GAGL,yBAAKoE,UAAWd,EAAQgO,cACpB,yBAAKlN,UAAW6M,EAAaE,aACxBzM,GAGL,kBAAC7J,EAAA,EAAD,CAAYC,QAAQ,KAAKsJ,UAAWd,EAAQT,OACvCyJ,GAAiBzJ,OAiBhCU,GAAY4B,IAAW,CACzBkM,KAAM,CACF5L,QAAS,OACTC,WAAY,UAEhB4L,aAAc,CACVC,UAAW,IACXC,WAAY,EACZ/L,QAAS,OACTC,WAAY,SACZ0C,eAAgB,cAEpBvF,MAAO,CACH4O,WAAY,M,+DCpBLC,GAnC2B,SAAC9W,GAAoC,IACpE+W,EAAe/W,EAAf+W,MAAOzY,EAAQ0B,EAAR1B,KAER0L,EAAQ,CAAC,UAAW,UAAW,WAAY,WAAY,YAAa,aACpE5E,EAAW,CACb/G,EAAUC,EAAM,iBAChBD,EAAUC,EAAM,mBAChBD,EAAUC,EAAM,cAChBD,EAAUC,EAAM,gBAChBD,EAAUC,EAAM,iBAChBD,EAAUC,EAAM,oBAEd0Y,EAAQ,CACV,kBAAC,KAAD,MAAsB,kBAAC,KAAD,MACtB,kBAAC,KAAD,MAAqB,kBAAC,KAAD,MACrB,kBAAC,KAAD,MAAiB,kBAAC,KAAD,OAGfC,EAAcF,GAASG,OAAOC,KAAKJ,GACnCK,EAAuBL,GAASE,GAClCA,EAAY9I,KAAI,SAACC,EAAKrM,GAAN,OAAY,kBAAC,GAAD,CAAkBqM,IAAKA,EACLnG,MAAO8O,EAAM3I,GACbpE,MAAOA,EAAMjI,GACbqD,SAAUA,EAASrD,GACnB+H,KAAMkN,EAAMjV,QAI9D,OACI,6BACKqV,I,QClCT1Y,GAAe,CACfgC,KAAM,GACN2W,aAAc,KACdC,eAAgB,KAChBC,cAAe,GACfC,eAAgB,sBA4CPC,GACA,SAAC/W,GAAD,MAAmB,CAAC1B,KAAM,mBAAoB0B,SAD9C+W,GAEQ,SAACJ,GAAD,MAAqC,CAACrY,KAAM,4BAA6BqY,iBAFjFI,GAGU,SAACH,GAAD,MAAgD,CAC/DtY,KAAM,8BACNsY,mBALKG,GAOU,SAACxU,GAAD,MAAsB,CAACjE,KAAM,8BAA+BiE,YAPtEwU,GAQS,SAACH,GAAD,MAAgD,CAC9DtY,KAAM,6BACNsY,mBAqBOI,GApEQ,WAAyE,IAAxExY,EAAuE,uDAA/DR,GAAcS,EAAiD,uCAC3F,OAAQA,EAAOH,MACX,IAAK,mBACD,OAAO,eAAIE,EAAX,CAAkBwB,KAAMvB,EAAOuB,OAEnC,IAAK,4BACD,OAAO,eACAxB,EADP,CAEImY,aACI,CACIM,aAAcxY,EAAOkY,aAAaM,aAClCC,eAAgBzY,EAAOkY,aAAaO,eACpCC,UAAW1Y,EAAOkY,aAAaQ,UAC/BC,YAAa3Y,EAAOkY,aAAaS,YACjCC,aAAc5Y,EAAOkY,aAAaU,aAClCC,eAAgB7Y,EAAOkY,aAAaW,kBAIpD,IAAK,8BACD,OAAO,eAAI9Y,EAAX,CAAkBoY,eAAgBnY,EAAOmY,iBAE7C,IAAK,8BACD,OAAO,eAAIpY,EAAX,CAAkBsY,eAAgBrY,EAAO8D,UAE7C,IAAK,6BAED,IADA,IAAIsU,EAAgB,GACXxV,EAAI,EAAGA,EAAI5C,EAAOmY,eAAenU,OAAQpB,IAC9CwV,EAAcvV,KAAK7C,EAAOmY,eAAevV,GAAGuE,SAEhD,OAAO,eAAIpH,EAAX,CAAkBqY,cAAeA,IAErC,QACI,OAAOrY,IChDNgC,GAAU,SAAChC,GAAD,OAAsBA,EAAM+Y,QAAQvX,MAC9CwX,GAAkB,SAAChZ,GAAD,OAAsBA,EAAM+Y,QAAQZ,cACtDc,GAAoB,SAACjZ,GAAD,OAAsBA,EAAM+Y,QAAQX,gBACxDc,GAAmB,SAAClZ,GAAD,OAAsBA,EAAM+Y,QAAQV,eACvDc,GAAoB,SAACnZ,GAAD,OAAsBA,EAAM+Y,QAAQT,gBCoC/D1J,GAAYC,aAA4C,CAC1DC,KAAM,mBADQD,EAhCoB,SAAC/N,GAAW,IACvCiO,EAA+BjO,EAA/BiO,aAAcsJ,EAAiBvX,EAAjBuX,cACf7O,EAAUC,KACV2P,EAAiBf,GAAiBA,EACnCpJ,KAAI,SAAC9G,EAAItF,GAAL,OAAW,4BAAQqM,IAAKrM,EACLkG,MAAOZ,GACtBA,MAGPhI,EAAWC,cAMjB,OACI,0BAAMmP,SAAUR,GACZ,yBAAKzE,UAAWd,EAAQ6P,cACpB,kBAACtL,GAAA,EAAD,CAAOP,KAAK,UACLQ,UAAWpB,GACXtC,UAAWd,EAAQyE,YACnBC,SAVK,WACpBrE,YAAW,kBAAM1J,EAASgO,aAAO,yBAWpBiL,QA2CNE,GAb4B,WAAqB,IAAD,EAhB/B,WAC5B,IAAMhB,EAAiBjY,YAAY8Y,IAC7Bd,EAAgBhY,YAAY6Y,IAC5B/Y,EAAWC,cAOjB,MAAO,CACHiY,gBAAe9I,SAPF,SAACgK,GACdpZ,EAASoY,GAA4BgB,EAAUxV,WAMtB0L,cAJS,CAClC1L,QAASuU,IAWTkB,GADAnB,EAFuD,EAEvDA,cAAe9I,EAFwC,EAExCA,SAAUE,EAF8B,EAE9BA,cAG7B,OACI,kBAAC,GAAD,CAAWF,SAAUA,EACVE,cAAeA,EACf4I,cAAeA,KAiB5B5O,GAAY4B,IAAW,CACzBgO,aAAc,CACV1N,QAAS,OACTyC,oBAAqB,MACrB7C,aAAc,GAElB0C,YAAa,CACTzC,gBAAiB,QACjB4L,YAAa,EACblG,MAAO,UC1ETuI,GAAa,WACfvZ,IACA,IAAMC,EAAWC,cACXoB,EAAOnB,YAAY2B,IACnBmW,EAAe9X,YAAY2Y,IAC3BtZ,EAAYW,YAAYoO,IACxBrP,EAAOiB,YAAYsO,IACnByJ,EAAiB/X,YAAY4Y,IAC7BX,EAAiBjY,YAAY8Y,IAEnCxY,qBAAU,WACNR,EHkCkB,uCAAiB,WAAOA,GAAP,eAAAkG,EAAA,sEAEnClG,EAASN,GAAoB,IAFM,SAGhB2D,IAHgB,OAG7BG,EAH6B,OAInCxD,EAASoY,GAAkB5U,EAAKrC,OAChCnB,EAASoY,GAA0B5U,EAAK+V,SACxCvZ,EAASoY,GAA4B5U,EAAKgW,YAC1CxZ,EAASoY,GAA2B5U,EAAKgW,YAPN,kDASnChT,QAAQC,IAAR,MACA/G,GAAkB,GAViB,yBAYnCM,EAASN,GAAoB,IAZM,6EAAjB,yDGjCnB,IAZkB,MAcmBU,YAAc,UAAWC,KAd5C,mBAcd0V,EAdc,KAcAC,EAdA,KAgBrBxV,qBAAU,WACNR,EAASoY,GAA4BrC,GAA8BoC,MACpE,CAACnY,IAEJQ,qBAAU,WACNwV,EAAmC,uBAAnBmC,EAA0CA,OAAiB1X,KAC5E,CACC0X,IAGJ,IAAM9O,EAAUC,KACVmQ,EAAmBxB,GAAkBA,EAAeyB,MAAK,SAAA1R,GAAE,OAAIA,EAAGf,UAAYkR,KAUpF,MAAO,CACH9O,UAASsQ,aAVSF,GAAoB,CACtCnB,aAAcmB,EAAiBnB,aAC/BC,eAAgBkB,EAAiBlB,eACjCC,UAAWiB,EAAiBjB,UAC5BC,YAAagB,EAAiBhB,YAC9BC,aAAce,EAAiBf,aAC/BC,eAAgBc,EAAiBd,gBAIVtX,OAAM2W,eAC7BzY,YAAWN,SA8CJ2a,GAzCe,WAAqB,IAAD,EAI1CN,KAFAjQ,EAF0C,EAE1CA,QAASsQ,EAFiC,EAEjCA,aAActY,EAFmB,EAEnBA,KAAM2W,EAFa,EAEbA,aAC7BzY,EAH0C,EAG1CA,UAAWN,EAH+B,EAG/BA,KAGf,OAAIM,EAAkB,kBAAC,GAAD,MAElB,oCACI,yBAAK4K,UAAWd,EAAQwQ,QACpB,yBAAK1P,UAAWd,EAAQyQ,OACpB,yBAAK3P,UAAW4P,aAAK1Q,EAAQ2Q,aAAc3Q,EAAQ4Q,gBAC/C,kBAACrZ,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAC1B9B,EAAUC,EAAM,YAGzB,kBAAC,GAAD,CAAcyY,MAAOM,EAAc/Y,KAAMA,KAE7C,yBAAKkL,UAAWd,EAAQyQ,OACpB,yBAAK3P,UAAWd,EAAQ2Q,cACpB,kBAACpZ,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAC1B9B,EAAUC,EAAM,gBAGzB,6BACI,kBAAC,GAAD,OAGJ,kBAAC,GAAD,CAAcyY,MAAOiC,EAAc1a,KAAMA,MAI7CoC,GACA,kBAACT,EAAA,EAAD,CAAYC,QAAQ,YAAYC,MAAM,UACjCG,EAAK6B,qBAAqBzB,EAAMpC,MAmB/CqK,GAAY4B,IAAW,CACzB2O,OAAQ,CACJrO,QAAS,OACTyC,oBAAqB,UACrBiM,QAAS,GACTrE,OAAQ,eAEZiE,MAAO,CACHK,OAAQ,iBACRpI,aAAc,GACdD,QAAS,IAEbkI,aAAc,CACV5O,aAAc,GACd0G,QAAS,QACTqI,OAAQ,iBACRpI,aAAc,IAElBkI,cAAe,CACX7O,aAAc,MCvHPgP,GAZQ,WACnB,IAAM/Q,EAAUC,KAChB,OACI,yBAAKa,UAAWd,EAAQgR,MACpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,SACpC,kBAAC,IAAD,CAAOD,KAAK,WAAWC,OAAQ,kBAAM,kBAAC,GAAD,SACrC,kBAAC,IAAD,CAAOD,KAAK,aAAaC,OAAQ,kBAAM,kBAAC,GAAD,YAOjDlR,GAAY4B,IAAW,CACzBmP,KAAM,CACFhP,gBAAiBE,IAAK,KACtBuG,QAAS,iBACTnG,SAAU,K,wCCYH8O,GA/BuC,SAAC9Z,GAAkC,IAC9E1B,EAAiB0B,EAAjB1B,KAAMyb,EAAW/Z,EAAX+Z,QACPrR,EAAUC,KACVqR,EAAmB,QAAT1b,EAQV0N,EAAiB,QAAT1N,EAAiB,MAAQ,MACvC,OACI,yBAAKkL,UAAWd,EAAQuR,SACpB,kBAACC,GAAA,EAAD,CACIC,QACI,kBAACC,GAAA,EAAD,CAAQJ,QAASA,EACT5M,SAbH,WAEb2M,EADS,QAATzb,EACQ,MAEA,QAUQoO,KAAK,WACLhE,QAAS,CACL2R,KAAM3R,EAAQ2R,KACdC,MAAO5R,EAAQ4R,SAI/BtO,MAAOA,EACPxC,UAAWd,EAAQsD,UAQ7BrD,GAAY4B,IAAW,CACzB8P,KAAM,CACHrQ,MAAO,SAEVgC,MAAO,CACHhC,MAAO,SAGXiQ,QAAS,CACL7J,MAAO,IACPyG,WAAY,IAEhByD,MAAO,CACJ5P,gBAAiBE,IAAK,QC5CvBmP,GAAUhb,EAIDwb,GAHala,aALN,SAACnB,GAAD,MAA0C,CAC5DZ,KAAMY,EAAMM,IAAIlB,QAMhB,CAACyb,YAFuB1Z,CAEbyZ,IC6BAU,GA/B2B,SAACxa,GAA0C,IAC1E1B,EAAQ0B,EAAR1B,KACDoK,EAAUC,KAEhB,OACI,4BAAQa,UAAWd,EAAQ+R,QACvB,kBAACxa,EAAA,EAAD,CAAYuJ,UAAWd,EAAQgS,KACnBxa,QAAQ,MADpB,SAMA,yBAAKsJ,UAAWd,EAAQiS,MACpB,yBAAKnR,UAAWyH,KAAM2J,KAClB,kBAAC,IAAD,CAASC,GAAG,IAAIrR,UAAWyH,KAAM6J,SAC5Bzc,EAAUC,EAAM,SAErB,kBAAC,IAAD,CAASuc,GAAG,WAAWrR,UAAWyH,KAAM6J,QAASC,gBAAiB9J,KAAM+J,QACnE3c,EAAUC,EAAM,YAErB,kBAAC,IAAD,CAASuc,GAAG,aAAarR,UAAWyH,KAAM6J,QAASC,gBAAiB9J,KAAM+J,QACrE3c,EAAUC,EAAM,eAGzB,kBAAC,GAAD,SASVqK,GAAY4B,IAAW,CACzBkQ,OAAQ,CACJpK,OAAQ,GACRxF,QAAS,OACT2C,eAAgB,gBAChB1C,WAAY,SACZJ,gBAAiB+C,KAAS,KAC1B0D,QAAS,iBAEbuJ,KAAM,CACF1Q,MAAOY,IAAK,IACZJ,cAAe,aAEnBmQ,KAAM,CACF9P,QAAS,OACTC,WAAY,YChDdiP,GAAUhb,EAIDkc,GAHO5a,aALA,SAACnB,GAAD,MAA0C,CAC5DZ,KAAMY,EAAMM,IAAIlB,QAMhB,CAACyb,YAFiB1Z,CAEPma,ICKAU,GAZH,WACR,IAAMxS,EAAUC,KAChB,OACI,yBAAKa,UAAWd,EAAQyS,YACpB,yBAAK3R,UAAWd,EAAQlJ,KACpB,kBAAC,GAAD,MACA,kBAAC,GAAD,SAQVmJ,GAAY4B,IAAW,CACzB4Q,WAAY,CACRzQ,gBAAiBE,IAAK,MAE1BpL,IAAK,CACD6J,SAAU,KACV+G,MAAO,OACP8E,OAAQ,SACRkG,UAAW,QACXvQ,QAAS,OACTwQ,cAAe,Y,uCCvBnBC,GAAcC,2BAAgB,CAC9BtD,QAASP,GACTnP,UAAWpC,GACX3G,IAAKP,EACL+O,KAAMwN,OAEJC,GAAgC,CAACC,MACjCC,GAAQC,uBAAYN,GAAaO,+BAAoBC,mBAAe,WAAf,EAAmBL,MAG9EM,OAAOJ,MAAQA,GAEAA,U,sCCcAK,G,oDA9BX,WAAYhc,GAAmB,IAAD,+BAC1B,cAAMA,IACDd,MAAQ,CACTiN,MAAO,KACP8P,UAAW,MAJW,E,+DAQZ9P,EAAc8P,GAC5Bza,KAAK0a,SAAS,CACV/P,MAAOA,EACP8P,UAAWA,M,+BAKf,OAAIza,KAAKtC,MAAM+c,UAEP,2BACI,kDACA,2BAAShL,MAAO,CAACkL,WAAY,aACxB3a,KAAKtC,MAAMiN,OAAS3K,KAAKtC,MAAMiN,MAAMiQ,aAK/C5a,KAAKxB,MAAMoM,a,GA3BE2C,a,UCQ5BsN,IAASxC,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU8B,MAAOA,IACb,kBAAC,IAAD,CAAoBW,iBAAkBC,KAClC,kBAAC,GAAD,KACI,kBAACC,GAAA,EAAD,MACA,kBAAC,GAAD,UAKhBC,SAASC,eAAe,U,mBCrB5BC,EAAOC,QAAU,CAAC,IAAM,oBAAoB,QAAU,wBAAwB,OAAS,0B","file":"static/js/main.0044f6b8.chunk.js","sourcesContent":["import {LangType} from \"../types/types\";\r\n\r\nexport const Translate: LangObjectType = {\r\n    'English': {\r\n        'eng': 'English',\r\n        'rus': 'Русский'\r\n    },\r\n    'Change language': {\r\n        'eng': 'Change language',\r\n        'rus': 'Сменить язык'\r\n    },\r\n    'Global': {\r\n        'eng': 'Global',\r\n        'rus': 'Весь мир'\r\n    },\r\n    'By country': {\r\n        'eng': 'By country',\r\n        'rus': 'Для страны'\r\n    },\r\n    'Confirmed new': {\r\n        'eng': 'Confirmed new',\r\n        'rus': 'Заболевших (за день)'\r\n    },\r\n    'Confirmed total': {\r\n        'eng': 'Confirmed total',\r\n        'rus': 'Заболевших (всего)'\r\n    },\r\n    'Deaths new': {\r\n        'eng': 'Deaths new',\r\n        'rus': 'Умерших (за день)'\r\n    },\r\n    'Deaths total': {\r\n        'eng': 'Deaths total',\r\n        'rus': 'Умерших (всего)'\r\n    },\r\n    'Recovered new': {\r\n        'eng': 'Recovered new',\r\n        'rus': 'Вылечившихся (за день)'\r\n    },\r\n    'Recovered total': {\r\n        'eng': 'Recovered total',\r\n        'rus': 'Вылечившихся (всего)'\r\n    },\r\n    'Home': {\r\n        'eng': 'Home',\r\n        'rus': 'Домой'\r\n    },\r\n    'Summary': {\r\n        'eng': 'Summary',\r\n        'rus': 'Суммарно'\r\n    },\r\n    'Statistic': {\r\n        'eng': 'Statistic',\r\n        'rus': 'Статистика'\r\n    },\r\n    '1 week': {\r\n        'eng': '1 week',\r\n        'rus': '1 неделя'\r\n    },\r\n    '2 week': {\r\n        'eng': '2 week',\r\n        'rus': '2 недели'\r\n    },\r\n    '30 days': {\r\n        'eng': '30 days',\r\n        'rus': '30 дней '\r\n    },\r\n    'By start': {\r\n        'eng': 'By start',\r\n        'rus': 'С начала'\r\n    },\r\n    'By day': {\r\n        'eng': 'By day',\r\n        'rus': 'За день'\r\n    },\r\n    'Total': {\r\n        'eng': 'Total',\r\n        'rus': 'Всего'\r\n    },\r\n    'Confirmed': {\r\n        'eng': 'Confirmed',\r\n        'rus': 'Заболевшие'\r\n    },\r\n    'Recovered': {\r\n        'eng': 'Recovered',\r\n        'rus': 'Вылечившиеся'\r\n    },\r\n    'Deaths': {\r\n        'eng': 'Deaths',\r\n        'rus': 'Умершие'\r\n    },\r\n    'Country': {\r\n        'eng': 'Country',\r\n        'rus': 'Страна'\r\n    },\r\n    'Period': {\r\n        'eng': 'Period',\r\n        'rus': 'Период'\r\n    },\r\n    'By day / Total': {\r\n        'eng': 'By day / Total',\r\n        'rus': 'За день / всего'\r\n    },\r\n    'Case type': {\r\n        'eng': 'Case type',\r\n        'rus': 'Тип'\r\n    },\r\n    'Coronavirus statistic': {\r\n        'eng': 'Coronavirus statistic',\r\n        'rus': 'Статистика коронавируса'\r\n    },\r\n    'Automatically retry server request in': {\r\n        'eng': 'Automatically retry server request in',\r\n        'rus': 'Автоматический повтор запроса на сервер через'\r\n    },\r\n    'sec': {\r\n        'eng': 'sec',\r\n        'rus': 'сек'\r\n    }\r\n};\r\n\r\n// const lang = useSelector(getLang);\r\n// {translate(lang, '')}\r\n\r\nexport const translate = (lang: LangType, phrase: string): string => {\r\n    return lang === 'rus' ? Translate[phrase].rus : Translate[phrase].eng\r\n};\r\n\r\ntype LangObjectType = {\r\n    [key: string]: {\r\n        'eng': string\r\n        'rus': string\r\n    }\r\n}\r\n\r\n","import {LangType} from \"../../types/types\";\r\nimport {GetActionsType} from \"../store\";\r\nimport {LanErrorResponseType} from \"../../types/types\";\r\n\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionsType = GetActionsType<typeof appAC>;\r\n\r\n\r\nlet initialState = {\r\n    globalError: null,\r\n    isLoading: false, // загрузка происходит?\r\n    lanError: false, // есть или нет ошибка сети\r\n    lanErrorResponse: null as null | LanErrorResponseType, // информация об ошибке\r\n    lang: 'eng' as LangType // язык приложения\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_LAN_ERROR_RESPONSE': {\r\n            return {...state, lanErrorResponse: action.lanErrorResponse}\r\n        }\r\n        case 'APP/SET_LANG':\r\n            return {...state, lang: action.lang}\r\n\r\n        case 'APP/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'APP/SET_LAN_ERROR': {\r\n            return {...state, lanError: action.lanError}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    setLanError: (lanError: boolean) => ({type: 'APP/SET_LAN_ERROR', lanError} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'APP/TOGGLE_LOADING', isLoading} as const),\r\n    setLanErrorResponse: (lanErrorResponse: null | LanErrorResponseType) => ({type: 'APP/SET_LAN_ERROR_RESPONSE', lanErrorResponse} as const),\r\n    setLang: (lang: LangType) => ({type: 'APP/SET_LANG', lang} as const),\r\n};\r\n\r\nexport default appReducer;","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {StringParam, useQueryParam} from \"use-query-params\";\r\nimport {useEffect} from \"react\";\r\nimport {LangType} from \"../types/types\";\r\nimport {StateType} from \"../store/store\";\r\nimport {appAC} from \"../store/reducers/app-reducer\";\r\n\r\nconst useCommonQueryParams = () => {\r\n    const dispatch = useDispatch();\r\n    const lang = useSelector((state: StateType) => state.app.lang);\r\n\r\n    const [langQuery, setLangQuery] = useQueryParam('lang', StringParam);\r\n\r\n    // URL => STATE\r\n    useEffect(() => {\r\n        dispatch(appAC.setLang(langQuery ? langQuery as LangType : lang));\r\n           }, [dispatch]);\r\n    // STATE => URL\r\n    useEffect(() => {\r\n        setLangQuery(lang !== 'eng' ? lang : undefined);\r\n            }, [\r\n        lang,\r\n        setLangQuery\r\n    ]);\r\n}\r\nexport default useCommonQueryParams;","import React, {ReactElement} from 'react';\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {translate} from \"../../../helpers/translate\";\r\nimport {HomePropsType} from \"./HomeContainer\";\r\nimport useCommonQueryParams from \"../../../hooks/useCommonQueryParams\";\r\n\r\nconst Home: React.FC<HomePropsType> = (props: HomePropsType): ReactElement => {\r\n    useCommonQueryParams();\r\n    const {lang} = props;\r\n    return (\r\n        <div>\r\n            <Typography variant='h4' align='center'>\r\n                {translate(lang, 'Coronavirus statistic')}\r\n            </Typography>\r\n        </div>\r\n    )\r\n}\r\nexport default Home;\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {LangType} from \"../../../types/types\";\r\nimport Home from \"./Home\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    lang: state.app.lang,\r\n});\r\n\r\nconst HomeContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {})(Home);\r\n\r\nexport default HomeContainer;\r\n\r\n//======================== TYPE ==========================\r\ntype MapStatePropsType = {\r\n    lang: LangType\r\n}\r\ntype MapDispatchPropsType = {}\r\nexport type HomePropsType = MapStatePropsType & MapDispatchPropsType","import {LangType} from \"../types/types\";\r\n\r\nexport const DATE = {\r\n    // получение текущей даты\r\n    // RETURN - JS DATE\r\n    getCurrentDate(): Date {\r\n        return new Date();\r\n    },\r\n\r\n    // перевод из формата js (Date) в формат API \"2020-07-09T00:00:00Z\"\r\n    dateJsToAPI(date: Date): string {\r\n        const year = date.getFullYear();\r\n        const month = date.getMonth() + 1;\r\n        let monthString: string;\r\n        if (month < 10) {\r\n            monthString = `0${month}`;\r\n        } else {\r\n            monthString = `${month}`;\r\n        }\r\n        let day = date.getDate();\r\n        let dayString: string;\r\n        if (day < 10) {\r\n            dayString = `0${day}`;\r\n        } else {\r\n            dayString = `${day}`;\r\n        }\r\n        return `${year}-${monthString}-${dayString}T00:00:00Z`;\r\n    },\r\n\r\n    // перевод даты из формата API ('2020-07-09T00:00:00Z') в формат js (Date)\r\n    dateAPIToJs(date: string): Date{\r\n       let year = +date.slice(0,4);\r\n       let month = +date.slice(5,7) - 1;\r\n       let day = +date.slice(8,10)\r\n       return new Date(year, month, day);\r\n    },\r\n\r\n    // определение даты начала периода (зависит от текущей последней) в формате API\r\n    getStartPeriodDate(period: number) {\r\n        // period = 7, 14, 30\r\n        // return = API\r\n        let endPeriodDateJS = this.getCurrentDate();\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - period * 24 * 60 * 60 * 1000);\r\n        return this.dateJsToAPI(startPeriodDateJS);\r\n    },\r\n\r\n    // определение актуальной даты начала периода (зависит от актуальной последней) в формате API\r\n    getStartPeriodDateActual(period: number, date: string) {\r\n        // date = dateEnd, API\r\n        // period = 7, 14, 30\r\n        // return = API\r\n        let endPeriodDateJS = this.dateAPIToJs(date);\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - period * 24 * 60 * 60 * 1000);\r\n        return this.dateJsToAPI(startPeriodDateJS);\r\n    },\r\n\r\n    // получение массива дат для canvas в формате 'DD.MM'\r\n    getDates(period: number, dateEnd: string) {\r\n        // dateEnd = API\r\n        let dates = [];\r\n        let endPeriodDateJS = this.dateAPIToJs(dateEnd);\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - (period - 1) * 24 * 60 * 60 * 1000);\r\n        for (let i = 0; i < period; i++){\r\n            let month = startPeriodDateJS.getMonth() + 1;\r\n            let monthString: string;\r\n            if (month < 10) {\r\n                monthString = `0${month}`;\r\n            } else {\r\n                monthString = `${month}`;\r\n            }\r\n            let day = startPeriodDateJS.getDate();\r\n            let dayString: string;\r\n            if (day < 10) {\r\n                dayString = `0${day}`;\r\n            } else {\r\n                dayString = `${day}`;\r\n            }\r\n            dates.push(`${dayString}.${monthString}`);\r\n            startPeriodDateJS = new Date(startPeriodDateJS.getTime() + 1 * 24 * 60 * 60 * 1000);\r\n        }\r\n        return dates;\r\n    },\r\n\r\n    // получить из числового обозначения месяца слово\r\n    getMonthWord(month: number, lang: LangType): string {\r\n        const monthArray = [\r\n            {'eng': \"January\", 'rus': 'Января'},\r\n            {'eng': \"February\", 'rus': 'Февраля'},\r\n            {'eng': \"March\", 'rus': 'Марта'},\r\n            {'eng': \"April\", 'rus': 'Апреля'},\r\n            {'eng': \"May\", 'rus': 'Мая'},\r\n            {'eng': \"June\", 'rus': 'Июня'},\r\n            {'eng': \"July\", 'rus': 'Июля'},\r\n            {'eng': \"August\", 'rus': 'Августа'},\r\n            {'eng': \"September\", 'rus': 'Сентября'},\r\n            {'eng': \"October\", 'rus': 'Октября'},\r\n            {'eng': \"November\", 'rus': 'Ноября'},\r\n            {'eng': \"December\", 'rus': 'Декабря'},\r\n        ];\r\n        return lang === 'eng' ? monthArray[month].eng : monthArray[month].rus\r\n    },\r\n\r\n    // перевод из '2020-07-09T00:00:00Z' в '7 сентября 2020'\r\n    dateTranslateFromAPI(date: string, lang: LangType): string {\r\n        const year = date.slice(0, 4);\r\n        const month =  +date.slice(5, 7); // 1...12\r\n        const monthWord = this.getMonthWord((+month) - 1, lang);\r\n        const day = date[8] === '0' ? date.slice(9, 10) : date.slice(8, 10);\r\n        return `${day} ${monthWord} ${year}`\r\n    },\r\n\r\n    // \"2020-07-11T00:00:00Z\" ---> '07.11'\r\n    dateTranslateFromApiToGraph(date: string): string {\r\n        const day = date.slice(8, 10);\r\n        const month = date.slice(5, 7);\r\n        return `${day}.${month}`;\r\n    }\r\n\r\n}","import axios from \"axios\";\r\nimport {DATE} from \"../helpers/date\";\r\nimport {CountryCasesByDayType, CountryType, SummaryResponseType} from \"../types/types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.covid19api.com/'\r\n});\r\n\r\nexport const summaryAPI = {\r\n    async getSummary(){\r\n        const response = await instance.get<SummaryResponseType>('summary')\r\n        return response.data\r\n    }\r\n};\r\n\r\nexport const statisticAPI = {\r\n    // получить список названий стран\r\n    async getCountries(){\r\n        const response = await instance.get<Array<CountryType>>('countries')\r\n        return response.data\r\n    },\r\n    // получить значения для всех случаев, для конкретной страны, по дням, за период\r\n    async getValuesByPeriod(countrySlug: string, dateStart: string, dateEnd: string) {\r\n        const response = await instance.get<Array<CountryCasesByDayType>>(`total/country/${countrySlug}?from=${dateStart}&to=${dateEnd}`)\r\n        return response.data\r\n    },\r\n    // получение актуальной последней даты для конкретной страны (может не совпадать с текущей или вчерашней)\r\n    // запрашиваем значения начиная с позавчера до сегодня (для конкретной страны)\r\n    // и смотрим дату последнего значения\r\n    async getDateEnd(country: string){\r\n        let dateStart = DATE.getStartPeriodDate(2);\r\n        let dateEnd = DATE.dateJsToAPI(DATE.getCurrentDate());\r\n        const response = await instance.get<Array<CountryCasesByDayType>>(`total/country/${country}?from=${dateStart}&to=${dateEnd}`)\r\n        const dateEndAPI = response.data[response.data.length - 1].Date;//API\r\n        return dateEndAPI\r\n    },\r\n    // получить все типы для заданной страны с первого дня\r\n    async getValuesFromDayOne(country: string){\r\n        const response = await instance.get<Array<CountryCasesByDayType>>(`dayone/country/${country}`)\r\n        return response.data\r\n    }\r\n};","export const CANVAS = {\r\n    marginLeftX: 30,\r\n    paddingLeftX: 30,\r\n    marginRightX: 30,\r\n    marginY: 30, // вниз\r\n    canvasW: function (): number {\r\n        return 800 + this.marginLeftX + this.paddingLeftX + this.marginRightX\r\n    },\r\n    canvasH: function (): number {\r\n        return 300 + this.marginY\r\n    },\r\n    deltaGridYf(DELTA: number): number {\r\n        const DELTAString = `${DELTA}`;\r\n        const countOfNumber = DELTAString.length;\r\n        const topNumber = Math.pow(10, countOfNumber);\r\n        if (DELTA > topNumber / 2) {\r\n            return Math.pow(10, countOfNumber - 1);\r\n        } else {\r\n            return Math.pow(10, countOfNumber - 1) / 2;\r\n        }\r\n        // if (DELTA <= 10) {\r\n        //     return 1;\r\n        // } else if (DELTA > 10 && DELTA <= 50) {\r\n        //     return 5;\r\n        // } else if (DELTA > 50 && DELTA <= 100) {\r\n        //     return 10;\r\n        // } else if (DELTA > 100 && DELTA <= 500) {\r\n        //     return 50;\r\n        // } else if (DELTA > 500 && DELTA <= 1000) {\r\n        //     return 100;\r\n        // } else if (DELTA > 1000 && DELTA <= 5000) {\r\n        //     return 500;\r\n        // } else if (DELTA > 5000 && DELTA <= 10000) {\r\n        //     return 1000;\r\n        // } else if (DELTA > 10000 && DELTA <= 50000) {\r\n        //     return 5000;\r\n        // } else if (DELTA > 50000 && DELTA <= 100000) {\r\n        //     return 10000;\r\n        // } else if (DELTA > 100000 && DELTA <= 500000) {\r\n        //     return 50000;\r\n        // } else if (DELTA > 500000 && DELTA <= 1000000) {\r\n        //     return 100000;\r\n        // } else if (DELTA > 1000000 && DELTA <= 5000000) {\r\n        //     return 500000;\r\n        // } else if (DELTA > 5000000 && DELTA <= 10000000) {\r\n        //     return 1000000;\r\n        // } else return 1000000;\r\n\r\n    }\r\n};","import {statisticAPI} from \"../../DAL/api\";\r\nimport {DATE} from \"../../helpers/date\";\r\nimport {CANVAS} from \"../../helpers/canvas\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {BaseThunkType, GetActionsType} from \"../store\";\r\nimport {\r\n    ByDayOrTotalType,\r\n    CaseTypeType,\r\n    CountryCasesByDayType,\r\n    CountryType, LanErrorResponseType,\r\n    PeriodType,\r\n    StatisticFormValuesType,\r\n    typeType\r\n} from \"../../types/types\";\r\n\r\nlet initialState = {\r\n    countriesData: null as null | Array<CountryType>, // Список названий стран, слагов стран и ISO2\r\n    period: 14, // результирующее значение для всех типов (в днях): formValues.period | periodByFirstDay ---> period\r\n    dateEnd: null as null | string, // последняя актуальная дата (в формате API)\r\n    dates: [] as Array<string>,// массив дат в формате DD.MM\r\n    allValues: {\r\n        confirmed: {\r\n            byDay: {values: [] as Array<number | null>},// массив значений (по дням) - подтвержденные - за день\r\n            total: {values: [] as Array<number | null>},// массив значений (по дням) - подтвержденные - общее количество\r\n        },\r\n        recovered: {\r\n            byDay: {values: [] as Array<number | null>},// массив значений (по дням) - вылеченные - за день\r\n            total: {values: [] as Array<number | null>},// массив значений (по дням) - вылеченные - общее количество\r\n        },\r\n        deaths: {\r\n            byDay: {values: [] as Array<number | null>},// массив значений (по дням) - умершие - за день\r\n            total: {values: [] as Array<number | null>},// массив значений (по дням) - умершие - общее количество\r\n        },\r\n    },\r\n    mouseX: 0, // координаты курсора относительно Canvas (меняются когда курсор над Canvas)\r\n    mouseY: 0, // координаты курсора относительно Canvas\r\n    mouseHoverCanvas: false, // курсор над канвасом,\r\n    // valuesCurrent зависит от country, period, byDayOrTotal и caseType\r\n    // при изменении country или period - загрузка с сервера - getValues (getInitial - при инициализации)\r\n    // при неизменности country или period и изменении byDayOrTotal или caseType - получить из стора - setCurrentValues\r\n    valuesCurrent: [] as Array<number | null>, // массив значений текущего выбранного типа\r\n    showInfo: false, // показывать или нет модальное окно со значением в точке\r\n    infoValue: null as null | number, // выводимое в модальном окне значение\r\n    infoDate: null as null | string, // выводимая в модальном окне дата\r\n    xPoint: 0, // координаты точки на графике и линии\r\n    yPoint: 0 as number | null,  // координаты точки на графике и линии\r\n    isInitialized: false, // инициализация: список стран, крайняя дата, значения для параметров ворму по умолчанию\r\n    formValues: { // значения из формы\r\n        country: 'russia',\r\n        period: '14' as PeriodType, // '7', '14', '30', '-1' (с начала)\r\n        byDayOrTotal: 'byDay' as typeType,\r\n        caseType: 'confirmed' as CaseTypeType,\r\n    },\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype StatisticActionsType = GetActionsType<typeof statisticAC>\r\ntype ThunkType = BaseThunkType<StatisticActionsType | AppActionsType>\r\n\r\nconst statisticReducer = (state = initialState, action: StatisticActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'statistic/SET_INITIALIZED': {\r\n            return {...state, isInitialized: true}\r\n        }\r\n        case 'statistic/SET_FORM_VALUES': {\r\n\r\n\r\n            return {...state, formValues: action.formValues}\r\n        }\r\n        case 'statistic/SET_COUNTRIES_DATA': {\r\n            action.countriesData.sort((a, b) => {\r\n                if (a.Country > b.Country) {\r\n                    return 1;\r\n                }\r\n                if (a.Country < b.Country) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            });\r\n            return {...state, countriesData: action.countriesData};\r\n        }\r\n        case 'statistic/SET_PERIOD': {\r\n            return {...state, period: action.period}\r\n        }\r\n        case 'statistic/SET_DATE_END': { // установка актуальной даты конца периода\r\n            return {...state, dateEnd: action.dateEnd} //, dates: dates\r\n        }\r\n        case 'statistic/SET_DATES': { // установка массив дат в формате DD.MM для canvas\r\n            let dates = [] as Array<string>;\r\n            // если period=7,14,30, длина массива данных равно period + 1 для получения значений разницы (за один день)\r\n            const i0 = action.values.length <= 31 ? 1 : 0; //индекс начала итерации\r\n            for (let i = i0; i < action.values.length; i++) { // заполнение  массива dates\r\n                dates.push(DATE.dateTranslateFromApiToGraph(action.values[i].Date));// \"2020-07-11T00:00:00Z\" ---> '07.11'\r\n            }\r\n            return {...state, dates: dates}\r\n        }\r\n        case 'statistic/SET_VALUES': {\r\n            let valuesConfirmedNew = [] as Array<number | null>;\r\n            let valuesConfirmedTotal = [] as Array<number | null>;\r\n            let valuesRecoveredNew = [] as Array<number | null>;\r\n            let valuesRecoveredTotal = [] as Array<number | null>;\r\n            let valuesDeathsNew = [] as Array<number | null>;\r\n            let valuesDeathsTotal = [] as Array<number | null>;\r\n            // если period=7,14,30, длина массива данных равно period+1 для получения значений разницы (за один день)\r\n            const i0 = action.values.length <= 31 ? 1 : 0; //индекс начала итерации\r\n            for (let i = i0; i < action.values.length; i++) {\r\n                if (i0 === 0 && i === 0) {\r\n                    valuesConfirmedNew.push(action.values[i].Confirmed);\r\n                    valuesConfirmedTotal.push(action.values[i].Confirmed);\r\n                    valuesRecoveredNew.push(action.values[i].Recovered);\r\n                    valuesRecoveredTotal.push(action.values[i].Recovered);\r\n                    valuesDeathsNew.push(action.values[i].Deaths);\r\n                    valuesDeathsTotal.push(action.values[i].Deaths);\r\n                } else {\r\n                    // проверка присланных данных на ошибки\r\n                    // может быть общее послед. меньше, чем общее предыдущее, тогда устанавливаем null\r\n                    if (action.values[i].Confirmed >= action.values[i - 1].Confirmed) {\r\n                        valuesConfirmedTotal.push(action.values[i].Confirmed);\r\n                        valuesConfirmedNew.push(action.values[i].Confirmed - action.values[i - 1].Confirmed);\r\n                    } else {\r\n                        valuesConfirmedTotal.push(null);\r\n                        valuesConfirmedNew.push(null);\r\n                    }\r\n\r\n                    if (action.values[i].Recovered >= action.values[i - 1].Recovered) {\r\n                        valuesRecoveredTotal.push(action.values[i].Recovered);\r\n                        valuesRecoveredNew.push(action.values[i].Recovered - action.values[i - 1].Recovered);\r\n                    } else {\r\n                        valuesRecoveredTotal.push(null);\r\n                        valuesRecoveredNew.push(null);\r\n                    }\r\n\r\n                    if (action.values[i].Deaths >= action.values[i - 1].Deaths) {\r\n                        valuesDeathsTotal.push(action.values[i].Deaths);\r\n                        valuesDeathsNew.push(action.values[i].Deaths - action.values[i - 1].Deaths);\r\n                    } else {\r\n                        valuesDeathsTotal.push(null);\r\n                        valuesDeathsNew.push(null);\r\n                    }\r\n                }\r\n            }\r\n            const allValues = {\r\n                confirmed: {\r\n                    byDay: {values: valuesConfirmedNew},\r\n                    total: {values: valuesConfirmedTotal},\r\n                },\r\n                recovered: {\r\n                    byDay: {values: valuesRecoveredNew},\r\n                    total: {values: valuesRecoveredTotal},\r\n                },\r\n                deaths: {\r\n                    byDay: {values: valuesDeathsNew},\r\n                    total: {values: valuesDeathsTotal},\r\n                },\r\n            };\r\n            // текущее выбранное\r\n            const valuesCurrent = allValues[action.caseType][action.byDayOrTotal].values;\r\n            return {\r\n                ...state,\r\n                valuesCurrent: valuesCurrent,\r\n                allValues: allValues\r\n            };\r\n        }\r\n        case 'statistic/SET_MOUSE_XY': {\r\n            let showInfo;\r\n            // определение надо ли показывать Info\r\n            if (action.mouseX > CANVAS.marginLeftX + CANVAS.paddingLeftX\r\n                && action.mouseX < CANVAS.canvasW() - CANVAS.marginRightX\r\n                && action.mouseY < CANVAS.canvasH() - CANVAS.marginY) {\r\n                showInfo = true;\r\n            } else {\r\n                showInfo = false;\r\n            }\r\n            // определение infoValue и infoDate, определение координат вертикальной линии и точки\r\n            const valueMin = Math.min.apply(null, (state.valuesCurrent as Array<number>).filter(el => el !== null)) as number;\r\n            const valueMax = Math.max.apply(null, (state.valuesCurrent as Array<number>).filter(el => el !== null)) as number;\r\n            const DELTA = valueMax - valueMin;\r\n            const deltaGridY = CANVAS.deltaGridYf(DELTA); // шаг координатной сетки по оси Y\r\n            const valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);\r\n            const valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);\r\n            const deltaX = (CANVAS.canvasW() - CANVAS.marginLeftX - CANVAS.marginRightX - CANVAS.paddingLeftX) / (state.period - 1);\r\n            const deltaY = (CANVAS.canvasH() - CANVAS.marginY) / (valueMaxGrid - valueMinGrid);\r\n            const canvasX = (i: number): number => {\r\n                return CANVAS.marginLeftX + CANVAS.paddingLeftX + i * deltaX;\r\n            };\r\n            const canvasY = (value: number): number => {\r\n                return CANVAS.canvasH() - CANVAS.marginY - deltaY * (value - valueMinGrid);\r\n            };\r\n            const iPoint = Math.round((action.mouseX - CANVAS.paddingLeftX - CANVAS.marginLeftX) / deltaX);\r\n            const xPoint = canvasX(iPoint);// координата вертикальной линии и точки\r\n            let yPoint;// координата точки\r\n            if ((state.valuesCurrent as Array<number>)[iPoint] !== null) {\r\n                yPoint = canvasY((state.valuesCurrent as Array<number>)[iPoint]);\r\n            } else {\r\n                yPoint = null;\r\n            }\r\n            let infoValue: number | null | string = (state.valuesCurrent as Array<number | null>)[iPoint];\r\n            const infoDate = state.dates && state.dates[iPoint];\r\n            return {\r\n                ...state, mouseX: action.mouseX, mouseY: action.mouseY,\r\n                showInfo: showInfo, infoValue: infoValue, infoDate: infoDate,\r\n                xPoint: xPoint, yPoint: yPoint\r\n            }\r\n        }\r\n        case 'statistic/SET_MOUSE_HOVER_CANVAS': {\r\n            return {...state, mouseHoverCanvas: action.mouseHoverCanvas}\r\n        }\r\n        case 'statistic/SET_CURRENT_VALUES': {\r\n            const valuesCurrent = state.allValues[action.caseType][action.byDayOrTotal].values;\r\n            return {...state, valuesCurrent: valuesCurrent}\r\n        }\r\n        case 'statistic/SET_SHOW_INFO': {\r\n            return {...state, showInfo: action.showInfo}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const statisticAC = {\r\n    setInitialized: () => ({type: 'statistic/SET_INITIALIZED'} as const),\r\n    setFormValues: (formValues: StatisticFormValuesType) => ({type: 'statistic/SET_FORM_VALUES', formValues} as const),\r\n    setCountriesData: (countriesData: Array<CountryType>) => ({\r\n        type: 'statistic/SET_COUNTRIES_DATA',\r\n        countriesData\r\n    } as const),\r\n    setPeriod: (period: number) => ({type: 'statistic/SET_PERIOD', period} as const),\r\n    setDateEnd: (dateEnd: string) => ({type: 'statistic/SET_DATE_END', dateEnd} as const),\r\n    setDates: (values: Array<CountryCasesByDayType>) => ({type: 'statistic/SET_DATES', values} as const),\r\n    setValues: (values: Array<CountryCasesByDayType>, byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType) => ({\r\n        type: 'statistic/SET_VALUES',\r\n        values,\r\n        byDayOrTotal,\r\n        caseType\r\n    } as const),\r\n    setMouseXY: (mouseX: number, mouseY: number) => ({type: 'statistic/SET_MOUSE_XY', mouseX, mouseY} as const),\r\n    setMouseHoverCanvas: (mouseHoverCanvas: boolean) => ({\r\n        type: 'statistic/SET_MOUSE_HOVER_CANVAS',\r\n        mouseHoverCanvas\r\n    } as const),\r\n    setCurrentValues: (byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType) => ({\r\n        type: 'statistic/SET_CURRENT_VALUES',\r\n        byDayOrTotal,\r\n        caseType\r\n    } as const),\r\n    setShowInfo: (showInfo: boolean) => ({type: 'statistic/SET_SHOW_INFO', showInfo} as const)\r\n};\r\n\r\nexport const getInitial = (period: PeriodType, country: string, byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType): ThunkType => async (dispatch) => {\r\n    // 1 - получение списка стран, 2 - получение актуальной последней даты, 3 - получить значения\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n\r\n        // 1 - получение списка стран\r\n        const getCountriesResponse = await statisticAPI.getCountries()\r\n        dispatch(statisticAC.setCountriesData(getCountriesResponse));\r\n\r\n        // 2 - получение актуальной последней даты\r\n        const dateEndAPI = await statisticAPI.getDateEnd(country)\r\n        //let dateEndAPI = getDateEndResponse[getDateEndResponse.length - 1].Date;//API\r\n        dispatch(statisticAC.setDateEnd(dateEndAPI));\r\n\r\n        // 3 - получить значения\r\n        if (period !== '-1' ) {\r\n            let dateEndJS = DATE.dateAPIToJs(dateEndAPI);\r\n            // массив values имеет длину period + 1 для определения величины за день\r\n            // valuesDay[0] = valuesTotal[0] - valuesTotal[-1]\r\n            // для этого начальная дата в запросе меньше на день\r\n            let dateStartJS = new Date(dateEndJS.getTime() - (+period) * 24 * 60 * 60 * 1000);\r\n            let dateStartAPI = DATE.dateJsToAPI(dateStartJS);\r\n            const getValuesByPeriodResponse = await statisticAPI.getValuesByPeriod(country, dateStartAPI, dateEndAPI);\r\n            dispatch(statisticAC.setValues(getValuesByPeriodResponse, byDayOrTotal, caseType));\r\n            dispatch(statisticAC.setDates(getValuesByPeriodResponse)); // установить массив дат\r\n        } else { // period === '-1'\r\n            const data = await statisticAPI.getValuesFromDayOne(country)\r\n            dispatch(statisticAC.setPeriod(data.length));\r\n            dispatch(statisticAC.setValues(data, byDayOrTotal, caseType)); // установить значения\r\n            dispatch(statisticAC.setDates(data)); // установить массив дат\r\n        }\r\n\r\n        // 4 - окончательно - проинициализировать\r\n        dispatch(statisticAC.setInitialized())\r\n    } catch (error) {\r\n        dispatch(appAC.setLanError(true));\r\n        // Error 😨\r\n        if (error.response) {\r\n            // The request was made and the server responded with a\r\n            // status code that falls out of the range of 2xx\r\n            console.log(error.response.data);\r\n            console.log(error.response.status);\r\n            console.log(error.response.headers);\r\n\r\n            const lanErrorResponse: LanErrorResponseType = {\r\n                status: error.response.status,\r\n                message: error.response.data.message\r\n            };\r\n            dispatch(appAC.setLanErrorResponse(lanErrorResponse))\r\n        } else if (error.request) {\r\n            /*\r\n             * The request was made but no response was received, `error.request`\r\n             * is an instance of XMLHttpRequest in the browser and an instance\r\n             * of http.ClientRequest in Node.js\r\n             */\r\n            console.log(error.request);\r\n        } else {\r\n            // Something happened in setting up the request and triggered an Error\r\n            console.log('Error', error.message);\r\n        }\r\n        console.log(error);\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\n// получить значение\r\nexport const getValues = (dateEnd: string, period: PeriodType, country: string, byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        if (period !== '-1' ) {\r\n            let dateEndJS = DATE.dateAPIToJs(dateEnd);\r\n            let dateStartJS = new Date(dateEndJS.getTime() - (+period) * 24 * 60 * 60 * 1000);\r\n            let dateStartAPI = DATE.dateJsToAPI(dateStartJS);\r\n            const data = await statisticAPI.getValuesByPeriod(country, dateStartAPI, dateEnd)\r\n            dispatch(statisticAC.setValues(data, byDayOrTotal, caseType)); // установить значения\r\n            dispatch(statisticAC.setDates(data)); // установить даты\r\n        } else { // period === '-1'\r\n            const data = await statisticAPI.getValuesFromDayOne(country)\r\n            dispatch(statisticAC.setPeriod(data.length));\r\n            dispatch(statisticAC.setValues(data, byDayOrTotal, caseType)); // установить значения\r\n            dispatch(statisticAC.setDates(data)); // установить массив дат\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default statisticReducer;","import {connect, useDispatch} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {appAC} from \"../../../../store/reducers/app-reducer\";\r\nimport * as React from \"react\";\r\nimport {FormValuesType, LanErrorResponseType, LangType, PeriodType} from \"../../../../types/types\";\r\nimport {Dialog} from \"@material-ui/core\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {getInitial} from \"../../../../store/reducers/statistic-reducer\";\r\nimport {translate} from \"../../../../helpers/translate\";\r\n\r\nconst LanErrorDialog: React.FC<PropsType> = (props: PropsType) => {\r\n    const {\r\n        lanErrorResponse, setLanError, setLanErrorResponse,\r\n        lanErrorDialogOpen, setLanErrorDialogOpen, formValues,\r\n        lanError, lang\r\n    } = props;\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const [count, setCount] = useState(10);\r\n\r\n    useEffect(() => {\r\n        if (lanError) {\r\n            if (count > 0) {\r\n                setTimeout(() => {\r\n                    setCount(count - 1)\r\n                }, 1000)\r\n            } else {\r\n                setLanErrorDialogOpen(false);// закрыть форму\r\n                setLanError(false);// снять флаг сетевой ошибки\r\n                setLanErrorResponse(null);// обнулить сообщение об ошибке\r\n                setCount(10);//\r\n                dispatch(getInitial(formValues.period, formValues.country, formValues.byDayOrTotal, formValues.caseType))\r\n            }\r\n        }\r\n\r\n    }, [count, lanError, dispatch])\r\n\r\n    const onReloadHandle = () => {\r\n        setLanErrorDialogOpen(false);// закрыть форму\r\n        setLanError(false);// снять флаг сетевой ошибки\r\n        setLanErrorResponse(null);// обнулить сообщение об ошибке\r\n        setCount(10);//\r\n        dispatch(getInitial(formValues.period, formValues.country, formValues.byDayOrTotal, formValues.caseType))\r\n    };\r\n\r\n    const OnExitHandle = () => {\r\n        setLanErrorDialogOpen(false);// закрыть форму\r\n    };\r\n\r\n    const label01 = translate(lang, 'Automatically retry server request in');\r\n    const label02 = translate(lang, 'sec');\r\n\r\n    return (\r\n        <>\r\n            {\r\n                lanErrorResponse &&\r\n                <Dialog\r\n                    disableBackdropClick\r\n                    disableEscapeKeyDown\r\n                    maxWidth=\"xs\"\r\n                    aria-labelledby=\"confirmation-dialog-title\"\r\n                    open={lanErrorDialogOpen}\r\n                    className={classes.dialog}\r\n                >\r\n                    <DialogTitle id=\"confirmation-dialog-title\"\r\n                                 className={classes.dialogTitle}\r\n                    >\r\n                        <div className={classes.dialogTitleInner}>\r\n                            <ErrorOutlineIcon className={classes.icon}/>\r\n                            <Typography>\r\n                                Lan error with status {lanErrorResponse.status}\r\n                            </Typography>\r\n                        </div>\r\n\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <Typography>\r\n                            {lanErrorResponse.message}\r\n                        </Typography>\r\n                        <Typography color='secondary'>\r\n                            {label01}:\r\n                        </Typography>\r\n                        <Typography color='secondary' align='center'>\r\n                            {count} {label02}\r\n                        </Typography>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <div className={classes.buttonWrapper}>\r\n                            <Button onClick={onReloadHandle}\r\n                                    variant='contained'\r\n                                    color=\"primary\"\r\n                                    fullWidth\r\n                                    className={classes.button}\r\n                            >\r\n                                Reload data from server\r\n                            </Button>\r\n                            <Button onClick={OnExitHandle}\r\n                                    variant='contained'\r\n                                    color=\"primary\"\r\n                                    fullWidth\r\n                                    className={classes.button}\r\n                            >\r\n                                Exit\r\n                            </Button>\r\n                        </div>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n//====================== CONTAINER ============================\r\nconst mapStateToProps = (state: StateType) => ({\r\n    lanErrorResponse: state.app.lanErrorResponse,\r\n    formValues: state.statistic.formValues,\r\n    lanError: state.app.lanError,\r\n    lang: state.app.lang\r\n});\r\nconst setLanError = appAC.setLanError;\r\nconst setLanErrorResponse = appAC.setLanErrorResponse;\r\nconst LanErrorDialogContainer = connect<MapStatePropsType, MapDispatchPropsType,\r\n    OwnPropsType, StateType>\r\n(mapStateToProps, {setLanError, setLanErrorResponse})(LanErrorDialog);\r\n\r\nexport default LanErrorDialogContainer;\r\n\r\n//====================== TYPE ========================\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\ntype MapStatePropsType = {\r\n    lanErrorResponse: null | LanErrorResponseType\r\n    formValues: FormValuesType\r\n    lanError: boolean\r\n    lang: LangType\r\n}\r\ntype MapDispatchPropsType = {\r\n    setLanError: (lanError: boolean) => void\r\n    setLanErrorResponse: (lanErrorResponse: null | LanErrorResponseType) => void\r\n}\r\ntype OwnPropsType = {\r\n    lanErrorDialogOpen: boolean\r\n    setLanErrorDialogOpen: (lanErrorDialogOpen: boolean) => void\r\n}\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    dialog: {\r\n        //maxWidth: 550\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        '&:not(:last-child)': {\r\n            marginBottom: 10\r\n        }\r\n    },\r\n    dialogTitle: {\r\n        backgroundColor: red[500],\r\n    },\r\n    dialogTitleInner: {\r\n        color: grey[50],\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    icon: {\r\n        marginRight: 10,\r\n    },\r\n    buttonWrapper: {\r\n        flexGrow: 1\r\n    }\r\n\r\n});","import {StateType} from \"../store\";\r\n\r\nexport const getCountriesData = (state: StateType) => state.statistic.countriesData;\r\nexport const getPeriod = (state: StateType) => state.statistic.period;\r\nexport const getDateEnd = (state: StateType) => state.statistic.dateEnd;\r\nexport const getDates = (state: StateType) => state.statistic.dates;\r\nexport const getAllValues = (state: StateType) => state.statistic.allValues;\r\nexport const getMouseX = (state: StateType) => state.statistic.mouseX;\r\nexport const getMouseY = (state: StateType) => state.statistic.mouseY;\r\nexport const getMouseHoverCanvas = (state: StateType) => state.statistic.mouseHoverCanvas;\r\nexport const getValuesCurrent = (state: StateType) => state.statistic.valuesCurrent;\r\nexport const getShowInfo = (state: StateType) => state.statistic.showInfo;\r\nexport const getInfoValue = (state: StateType) => state.statistic.infoValue;\r\nexport const getInfoDate = (state: StateType) => state.statistic.infoDate;\r\nexport const getXPoint = (state: StateType) => state.statistic.xPoint;\r\nexport const getYPoint = (state: StateType) => state.statistic.yPoint;\r\nexport const getIsInitialized = (state: StateType) => state.statistic.isInitialized;\r\nexport const getFormValuesSelector = (state: StateType) => state.statistic.formValues;\r\n","import FormControl from \"@material-ui/core/FormControl\";\r\nimport React from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nconst renderSelectField = ({\r\n                               input,\r\n                               label,\r\n                               meta: {touched, error},\r\n                               children,\r\n                               ...custom\r\n                           }) => {\r\n    return (\r\n\r\n        <FormControl error={touched && error}>\r\n            <Select\r\n                native\r\n                {...input}\r\n                {...custom}\r\n                inputProps={{\r\n                    name: input.name,\r\n                    //id: 'color-native-simple'\r\n                }}\r\n            >\r\n                {children}\r\n            </Select>\r\n\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default renderSelectField;","import Typography from \"@material-ui/core/Typography\";\r\nimport {Field, submit} from \"redux-form\";\r\nimport renderSelectField from \"../../../common/renderSelectField\";\r\nimport React, {ReactElement} from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport {StatisticFormValuesType} from \"../../../../types/types\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\r\n\r\nconst StatisticFormRow: React.FC<PropsType> = (props): ReactElement => {\r\n    const {fieldTitle, name, elements} = props;\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const onChangeHandler = () => {\r\n        setTimeout(() => dispatch(submit('statistic')));\r\n    };\r\n    return (\r\n        <div className={classes.row}>\r\n            <div className={classes.fieldName}>\r\n                <Typography className={classes.typography}>\r\n                    {fieldTitle}\r\n                </Typography>\r\n            </div>\r\n\r\n            <Field name={name}\r\n                   component={renderSelectField}\r\n                   className={classes.selectField}\r\n                   onChange={onChangeHandler}\r\n            >\r\n                {elements}\r\n            </Field>\r\n        </div>\r\n    )\r\n};\r\nexport default StatisticFormRow;\r\n//============================= TYPE ============================\r\ntype PropsType = {\r\n    fieldTitle: string\r\n    name: keyof StatisticFormValuesType\r\n    elements: Array<JSX.Element> | null\r\n}\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    row: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr 1fr',\r\n        gridColumnGap: 5,\r\n        marginBottom: 2\r\n    },\r\n    fieldName: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        alignItems: 'center',\r\n        backgroundColor: blueGrey[900],\r\n        paddingRight: 15\r\n    },\r\n    typography: {\r\n        color: grey[50],\r\n    },\r\n    selectField: {\r\n        backgroundColor: grey[50],\r\n        //paddingLeft: 10\r\n    }\r\n});\r\n","import {StateType} from \"../store\";\r\n\r\nexport const getIsLoading = (state: StateType) => state.app.isLoading;\r\nexport const getLanError = (state: StateType) => state.app.lanError;\r\nexport const getLanErrorResponse = (state: StateType) => state.app.lanErrorResponse;\r\nexport const getLang = (state: StateType) => state.app.lang;","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {CountryType, LangType, StatisticFormValuesType} from \"../../../../types/types\";\r\nimport React, {ReactElement} from \"react\";\r\nimport StatisticFormRow from \"./StatisticFormRow\";\r\nimport {translate} from \"../../../../helpers/translate\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCountriesData, getFormValuesSelector} from \"../../../../store/selectors/statistic-selectors\";\r\nimport {getLang} from \"../../../../store/selectors/app-selector\";\r\nimport {statisticAC} from \"../../../../store/reducers/statistic-reducer\";\r\n\r\n//================================= FORM ===================================\r\nconst Form: React.FC<FormPropsType> = (props: FormPropsType): ReactElement => {\r\n    const {\r\n        handleSubmit, countriesData, lang\r\n    } = props;\r\n    const countryElements = countriesData?.map(\r\n        (el, i) => (\r\n            <option key={i}\r\n                    value={el.Slug}>\r\n                {el.Country}\r\n            </option>\r\n        )\r\n    );\r\n\r\n    const periodArray = [\r\n        {label: translate(lang, '1 week'), value: 7},\r\n        {label: translate(lang, '2 week'), value: 14},\r\n        {label: translate(lang, '30 days'), value: 30},\r\n        {label: translate(lang, 'By start'), value: -1}\r\n    ];\r\n    const periodElements = periodArray.map(\r\n        (el, i) => (\r\n            <option key={i}\r\n                    value={el.value}>\r\n                {el.label}\r\n            </option>\r\n        ));\r\n\r\n    const byDayOrTotalArray = [\r\n        {label: translate(lang, 'By day'), value: 'byDay'},\r\n        {label: translate(lang, 'Total'), value: 'total'},\r\n    ];\r\n    const byDayOrTotalElements = byDayOrTotalArray.map(\r\n        (el, i) => (\r\n            <option key={i}\r\n                    value={el.value}>\r\n                {el.label}\r\n            </option>\r\n        ));\r\n\r\n    const caseTypeArray = [\r\n        {label: translate(lang, 'Confirmed'), value: 'confirmed'},\r\n        {label: translate(lang, 'Recovered'), value: 'recovered'},\r\n        {label: translate(lang, 'Deaths'), value: 'deaths'},\r\n    ];\r\n    const caseTypeElements = caseTypeArray.map(\r\n        (el, i) => (\r\n            <option key={i}\r\n                    value={el.value}>\r\n                {el.label}\r\n            </option>\r\n        ));\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <StatisticFormRow fieldTitle={translate(lang, 'Country')} name='country' elements={countryElements as Array<JSX.Element>}/>\r\n            <StatisticFormRow fieldTitle={translate(lang, 'Period')} name='period' elements={periodElements}/>\r\n            <StatisticFormRow fieldTitle={translate(lang, 'By day / Total')} name='byDayOrTotal'\r\n                              elements={byDayOrTotalElements}/>\r\n            <StatisticFormRow fieldTitle={translate(lang, 'Case type')} name='caseType' elements={caseTypeElements}/>\r\n        </form>\r\n    )\r\n};\r\n\r\n//============================ REDUX-FORM ====================================\r\nconst ReduxForm = reduxForm<StatisticFormValuesType, FormOwnPropsType>({\r\n    form: 'statistic',\r\n})(Form);\r\n\r\n//=========================== COMPONENT =====================================\r\nconst StatisticForm: React.FC<{}> = (): ReactElement => {\r\n    const dispatch = useDispatch();\r\n    const countriesData = useSelector(getCountriesData);\r\n    const lang = useSelector(getLang);\r\n    const formValues = useSelector(getFormValuesSelector);\r\n\r\n    const onSubmit = (newFormValue: StatisticFormValuesType) => {\r\n        dispatch(statisticAC.setFormValues(newFormValue));\r\n    };\r\n    const initialValues: StatisticFormValuesType = formValues;\r\n    return (\r\n        <ReduxForm onSubmit={onSubmit}\r\n                   enableReinitialize\r\n                   initialValues={initialValues}\r\n                   countriesData={countriesData}\r\n                   lang={lang}\r\n        />\r\n    )\r\n};\r\n\r\nexport default StatisticForm;\r\n\r\n//============================= TYPE ============================\r\ntype FormPropsType = InjectedFormProps<StatisticFormValuesType,\r\n    FormOwnPropsType> & FormOwnPropsType\r\ntype FormOwnPropsType = {\r\n    countriesData: null | Array<CountryType>\r\n    lang: LangType\r\n};\r\n\r\n","import React, {ReactElement, useEffect, useRef} from \"react\";\r\nimport {CANVAS} from \"../../../../helpers/canvas\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\n\r\n//================== CUSTOM HOOK ==================\r\nconst useCanvasAxis = () => {\r\n    const classes = useStyles();\r\n    let canvasAxisRef = useRef<HTMLCanvasElement | null>(null);\r\n    let canvasAxisCtxRef = React.useRef<CanvasRenderingContext2D | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (canvasAxisRef.current) {\r\n            const canvasW = CANVAS.canvasW();\r\n            const canvasH = CANVAS.canvasH();\r\n            canvasAxisCtxRef.current = canvasAxisRef.current.getContext('2d');\r\n            let ctx = canvasAxisCtxRef.current;\r\n            ctx!.clearRect(0, 0, canvasW, canvasH);\r\n            ctx!.fillStyle = '#fff';\r\n            ctx!.fillRect(0, 0, canvasW, canvasH);\r\n            ctx!.strokeStyle = '#aaa';\r\n            ctx!.lineWidth = 4;\r\n            ctx!.setLineDash([]);\r\n            ctx!.beginPath();\r\n            ctx!.moveTo(CANVAS.marginLeftX, 0);\r\n            ctx!.lineTo(CANVAS.marginLeftX, CANVAS.canvasH() - CANVAS.marginY);\r\n            ctx!.moveTo(CANVAS.marginLeftX, CANVAS.canvasH() - CANVAS.marginY);\r\n            ctx!.lineTo(CANVAS.canvasW(), CANVAS.canvasH() - CANVAS.marginY);\r\n            ctx!.stroke();\r\n        }\r\n    }, []);\r\n\r\n    return {\r\n        classes, canvasAxisRef\r\n    }\r\n};\r\n\r\n//================== COMPONENT ====================\r\nexport const CanvasAxis: React.FC = (): ReactElement => {\r\n    const {\r\n        classes, canvasAxisRef\r\n    } = useCanvasAxis();\r\n\r\n    return (\r\n        <>\r\n            <canvas\r\n                className={classes.canvasAxis}\r\n                ref={canvasAxisRef}\r\n                width={CANVAS.canvasW()}\r\n                height={CANVAS.canvasH()}\r\n            />\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nconst CanvasAxisMemo = React.memo(CanvasAxis)\r\n\r\nexport default CanvasAxisMemo;\r\n\r\n//======================= STYLE ===================\r\nconst useStyles = makeStyles({\r\n    canvasAxis: {\r\n        zIndex: 3,\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n    },\r\n});","import {CircularProgress} from \"@material-ui/core\";\r\nimport React, {ReactElement} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n//======================= COMPONENT ===============================\r\nconst Preloader: React.FC = (): ReactElement => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.circularWrapper}>\r\n            <CircularProgress size={200} color='primary' />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader;\r\n\r\n//============================ STYLES =======================================================\r\nconst useStyles = makeStyles({\r\n    circularWrapper: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: 1001\r\n    }\r\n});\r\n","import React from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\n\r\nconst Date: React.FC<PropsType> = (props: PropsType) => {\r\n    const {top, left, date} = props;\r\n    const classes = useStyles();\r\n\r\n    let styleInline = {\r\n        top: top,\r\n        left: left\r\n    };\r\n\r\n    return (\r\n        <div className={classes.date} style={styleInline}>\r\n            {date}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Date;\r\n\r\n//==================== TYPE ======================\r\ntype PropsType = {\r\n    top: number\r\n    left: number\r\n    date: string\r\n}\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    date: {\r\n        position: 'absolute',\r\n        transform: 'translate(-50%, 5px)',\r\n        backgroundColor: blueGrey[600],\r\n        color: grey[50],\r\n        zIndex: 100,\r\n        padding: '2px 4px',\r\n        borderRadius: 1,\r\n    },\r\n});","import React, {ReactElement} from 'react';\r\nimport Date from \"./Date\";\r\nimport {CANVAS} from \"../../../../../helpers/canvas\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getDates, getPeriod} from \"../../../../../store/selectors/statistic-selectors\";\r\n\r\n//=============== CUSTOM HOOK ====================\r\nconst useDates = () => {\r\n    const dates = useSelector(getDates);\r\n    const period = useSelector(getPeriod);\r\n    const canvasW = CANVAS.canvasW();\r\n    const canvasH = CANVAS.canvasH();\r\n    const marginY = CANVAS.marginY\r\n    const marginLeftX = CANVAS.marginLeftX;\r\n    const marginRightX = CANVAS.marginRightX;\r\n    const paddingLeftX = CANVAS.paddingLeftX;\r\n    const deltaX = (canvasW - marginLeftX - marginRightX - paddingLeftX) / (period - 1);\r\n    let canvasX = (i: number): number => {\r\n        return marginLeftX + paddingLeftX + i * deltaX;\r\n    };\r\n    let top = canvasH - marginY;\r\n    let leftArr = [] as Array<number>;\r\n    for (let i = 0; i < dates.length; i++) {\r\n        leftArr.push(canvasX(i));\r\n    }\r\n\r\n    let k = 1;\r\n    if (+period === 30) {\r\n        k = 2\r\n    } else if (+period > 30) {\r\n        k = Math.floor(+period / 16);\r\n    }\r\n    let datesElements = dates.map(\r\n        (date, i) => (\r\n            (i % k === 0)\r\n                ? <Date key={i}\r\n                        date={date}\r\n                        top={top}\r\n                        left={leftArr[i]}\r\n                />\r\n                : null)\r\n    );\r\n    return {\r\n        datesElements\r\n    }\r\n};\r\n\r\n//================ COMPONENT ====================\r\nconst Dates: React.FC<{}> = (): ReactElement => {\r\n    const {\r\n        datesElements\r\n    } = useDates();\r\n\r\n    return (\r\n        <>\r\n            {datesElements}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Dates;\r\n","export const addCommaToNumber = (n: number): string => {\r\n    let nString: string = `${n}`;\r\n    let length = nString.length;\r\n    let result = '';\r\n    while (length > 3) {\r\n        result = '.' + nString.slice(length - 3) + result; // добавили к результату\r\n        nString = nString.slice(0, length - 3); //отрезали\r\n        length = length - 3;\r\n    }\r\n    result = nString + result;\r\n    return result;\r\n};","import React, {ReactElement} from 'react';\r\nimport {CANVAS} from \"../../../../../helpers/canvas\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport {addCommaToNumber} from \"../../../../../helpers/addCommaToNumber\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getFormValuesSelector, getInfoDate, getInfoValue,\r\n    getMouseX,\r\n    getMouseY,\r\n    getPeriod\r\n} from \"../../../../../store/selectors/statistic-selectors\";\r\nimport {statisticAC} from \"../../../../../store/reducers/statistic-reducer\";\r\n\r\n//================== CUSTOM HOOK ==================\r\nconst useInfo = () => {\r\n    const dispatch = useDispatch();\r\n    const period = useSelector(getPeriod);\r\n    const mouseX = useSelector(getMouseX);\r\n    const mouseY = useSelector(getMouseY);\r\n    const caseType = useSelector(getFormValuesSelector).caseType;\r\n    const infoValue = useSelector(getInfoValue);\r\n    const infoDate = useSelector(getInfoDate);\r\n\r\n    const classes = useStyles();\r\n    let left: number;\r\n    const deltaX = (CANVAS.canvasW() - CANVAS.marginLeftX - CANVAS.marginRightX - CANVAS.paddingLeftX) / (period - 1);\r\n    let canvasX = (i: number) => {\r\n        return CANVAS.marginLeftX + CANVAS.paddingLeftX + i * deltaX;\r\n    };\r\n    let iMouseGrid = Math.round((mouseX - CANVAS.paddingLeftX - CANVAS.marginLeftX) / deltaX);\r\n    let xMouseGrid = iMouseGrid && canvasX(iMouseGrid);\r\n    // курсор в границах графика\r\n    const showInfo = (mouseX > CANVAS.marginLeftX + CANVAS.paddingLeftX)\r\n        && (mouseX < CANVAS.canvasW() - CANVAS.marginRightX);\r\n    left = xMouseGrid;\r\n    let styleInfo = {\r\n        top: mouseY - 50,\r\n        left: left + 10\r\n    };\r\n    let colorValue;\r\n    if (caseType === 'confirmed') colorValue = red[600];\r\n    if (caseType === 'recovered') colorValue = green[600];\r\n    if (caseType === 'deaths') colorValue = indigo[600];\r\n    let styleValue = {\r\n        color: colorValue\r\n    };\r\n\r\n    let onMouseEnter = () => {\r\n        dispatch(statisticAC.setMouseHoverCanvas(true));\r\n    };\r\n\r\n    let onMouseLeave = () => {\r\n        dispatch(statisticAC.setMouseHoverCanvas(false));\r\n    };\r\n\r\n    const infoValueLabel: string = (infoValue || infoValue === 0)\r\n        ? addCommaToNumber(infoValue)\r\n        : 'No data';\r\n    return {\r\n        showInfo, onMouseEnter, onMouseLeave, styleInfo,\r\n        classes, styleValue, infoValueLabel, infoDate\r\n    }\r\n}\r\n\r\n\r\n//================== COMPONENT ====================\r\nconst Info: React.FC<{}> = (): ReactElement => {\r\n    const {\r\n        showInfo, onMouseEnter, onMouseLeave, styleInfo,\r\n        classes, styleValue, infoValueLabel, infoDate\r\n    } = useInfo();\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                showInfo &&\r\n                <div onMouseEnter={onMouseEnter}\r\n                     onMouseLeave={onMouseLeave}\r\n                     style={styleInfo}\r\n                     className={classes.info}>\r\n\r\n                    <Typography variant='body1'\r\n                                style={styleValue}\r\n                                className={classes.value}\r\n                    >\r\n                        {infoValueLabel}\r\n                    </Typography>\r\n\r\n                    <Typography variant='body1'\r\n                                color='textPrimary'\r\n                    >\r\n                        {infoDate}\r\n                    </Typography>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Info;\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    info: {\r\n        position: 'absolute',\r\n        backgroundColor: grey[50],\r\n        zIndex: 101,\r\n        cursor: 'default',\r\n        padding: '2px 5px',\r\n        boxShadow: '2px 2px 2px 2px rgba(0, 0, 0, 0.5)',\r\n    },\r\n    value: {\r\n        fontWeight: 700\r\n    }\r\n});","import React from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {addCommaToNumber} from \"../../../../../helpers/addCommaToNumber\";\r\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\n\r\nconst Value: React.FC<PropsType> = (props: PropsType) => {\r\n    const {top, left, value} = props;\r\n    const classes = useStyles();\r\n    let styleInline = {top: top, left: left};\r\n    return (\r\n        <div className={classes.value} style={styleInline}>\r\n            {addCommaToNumber(value)}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Value;\r\n\r\n//====================== TYPE ==========================\r\ntype PropsType = {\r\n    top: number\r\n    left: number\r\n    value: number\r\n}\r\n//======================= STYLE =======================\r\nconst useStyles = makeStyles({\r\n    value: {\r\n        position: 'absolute',\r\n        transform: 'translate(-100%, -50%)',\r\n        backgroundColor: blueGrey[600],\r\n        color: grey[50],\r\n        zIndex: 100,\r\n        padding: '2px 4px',\r\n        borderRadius: 1\r\n    },\r\n});","import React, {ReactElement} from 'react';\r\nimport Value from \"./Value\";\r\nimport {CANVAS} from \"../../../../../helpers/canvas\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getValuesCurrent} from \"../../../../../store/selectors/statistic-selectors\";\r\n\r\nconst Values: React.FC<{}> = (): ReactElement => {\r\n    const valuesCurrent = useSelector(getValuesCurrent);\r\n\r\n    const marginY = CANVAS.marginY;\r\n    const canvasH = CANVAS.canvasH();\r\n\r\n    const valuesCurrentFilter = valuesCurrent.filter(el => el || el === 0) as Array<number>\r\n    const valueMin = Math.min.apply(null, valuesCurrentFilter);// минимальное значение из массива\r\n    const valueMax = Math.max.apply(null, valuesCurrentFilter);// максимальное значение из массива\r\n    const DELTA = valueMax - valueMin; // разница между макс и мин\r\n\r\n    let deltaGridY: number; // шаг координатной сетки по оси Y\r\n    let valueMinGrid: number; // значение по сетке, ограничивающее график снизу\r\n    let valueMaxGrid: number; // значение по сетке, ограничивающее график сверху\r\n    let deltaY: number; // коэффициэнт перевода в масштаб канваса по оси Y\r\n    let valuesArr = [] as Array<number>; // массив значений на шкале Y\r\n    let topArr = [] as Array<number>; // массив свойства top абсолютного позиционирования\r\n\r\n    if (DELTA !== 0) {\r\n        deltaGridY = CANVAS.deltaGridYf(DELTA);\r\n        valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);\r\n        valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);\r\n        deltaY = (canvasH - marginY) / (valueMaxGrid - valueMinGrid);\r\n        const canvasY = (value: number): number => {// функция пересчета значения Y i-го элемента массива в масштаб канваса\r\n            return canvasH - marginY - deltaY * (value - valueMinGrid);\r\n        };\r\n\r\n        let y = valueMinGrid;\r\n        while (true) {\r\n            valuesArr.push(y);\r\n            topArr.push(canvasY(y));\r\n            y += deltaGridY;\r\n            if (y > valueMaxGrid - deltaGridY) {\r\n                valuesArr.push(y);\r\n                topArr.push(canvasY(y));\r\n                break\r\n            }\r\n        }\r\n    } else { // если все значения одинаковы\r\n        valuesArr = [valueMax];\r\n        topArr = [CANVAS.canvasH() / 2 - CANVAS.marginY]\r\n    }\r\n\r\n    let left = CANVAS.marginLeftX - 5; // значение left абсолютного позиционирования\r\n    let valuesElements = valuesArr.map((el, i) => (\r\n        <Value key={i}\r\n               value={el}\r\n               top={topArr[i]}\r\n               left={left}/>\r\n    ));\r\n\r\n    return (\r\n        <>\r\n            {valuesCurrent.length && valuesElements}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Values;","import React, {ReactElement, useEffect, useRef} from \"react\";\r\nimport {CANVAS} from \"../../../../helpers/canvas\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport throttle from 'lodash/throttle';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFormValuesSelector, getPeriod, getValuesCurrent} from \"../../../../store/selectors/statistic-selectors\";\r\nimport {statisticAC} from \"../../../../store/reducers/statistic-reducer\";\r\n\r\n//==================== CUSTOM HOOK =====================\r\nconst useCanvasGraph = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const valuesCurrent = useSelector(getValuesCurrent);\r\n    const period = useSelector(getPeriod);\r\n    const caseType = useSelector(getFormValuesSelector).caseType;\r\n\r\n    let canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    let canvasCtxRef = React.useRef<CanvasRenderingContext2D | null>(null);\r\n\r\n    useEffect(() => {\r\n        const marginLeftX = CANVAS.marginLeftX;\r\n        const paddingLeftX = CANVAS.paddingLeftX;\r\n        const marginRightX = CANVAS.marginRightX;\r\n        const marginY = CANVAS.marginY;\r\n        const canvasW = CANVAS.canvasW();\r\n        const canvasH = CANVAS.canvasH();\r\n\r\n        if (canvasRef.current) {\r\n            canvasCtxRef.current = canvasRef.current.getContext('2d');\r\n            let ctx = canvasCtxRef.current;\r\n            ctx!.clearRect(0, 0, canvasW, canvasH);// очистка перед перерисовкой\r\n            ctx!.fillStyle = 'transparent';\r\n            ctx!.fillRect(0, 0, canvasW, canvasH);\r\n\r\n            const valuesCurrentFilter = valuesCurrent.filter(el => el || el === 0) as Array<number>; // фильтрация от недействительных значений\r\n            const valueMin = Math.min.apply(null, valuesCurrentFilter);// минимальное значение из массива\r\n            const valueMax = Math.max.apply(null, valuesCurrentFilter);// максимальное значение из массива\r\n            const DELTA = valueMax - valueMin; // разница между макс и мин\r\n            const deltaX = (canvasW - marginLeftX - marginRightX - paddingLeftX) / (period - 1);// коэффициэнт перевода в масштаб канваса по оси X\r\n            let canvasX = (i: number): number => {// функция пересчета значения X i-го элемента массива в масштаб канваса\r\n                return marginLeftX + paddingLeftX + i * deltaX;\r\n            };\r\n\r\n            let deltaGridY: number, valueMinGrid: number, valueMaxGrid: number, deltaY: number;\r\n            if (DELTA !== 0) {\r\n                deltaGridY = CANVAS.deltaGridYf(DELTA); // шаг координатной сетки по оси Y\r\n\r\n                valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);// значение по сетке, ограничивающее график снизу\r\n                valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);// значение по сетке, ограничивающее график сверху\r\n                deltaY = (canvasH - marginY) / (valueMaxGrid - valueMinGrid);// коэффициэнт перевода в масштаб канваса по оси Y\r\n\r\n                let canvasY = (value: number): number => {// функция пересчета значения Y i-го элемента массива в масштаб канваса\r\n                    return canvasH - marginY - deltaY * (value - valueMinGrid);\r\n                };\r\n\r\n                //горизонтальные линии\r\n                ctx!.strokeStyle = '#cccccc';\r\n                ctx!.lineWidth = 1;\r\n                ctx!.setLineDash([]);\r\n                let yLineStart = valueMinGrid;\r\n                while (true) {\r\n                    ctx!.beginPath();\r\n                    ctx!.moveTo(marginLeftX, canvasY(yLineStart));\r\n                    ctx!.lineTo(canvasW, canvasY(yLineStart));\r\n                    ctx!.stroke();\r\n                    yLineStart += deltaGridY;\r\n                    if (yLineStart > valueMaxGrid) {\r\n                        break\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                deltaGridY = 1;\r\n                valueMinGrid = valueMin;\r\n                valueMaxGrid = valueMax;\r\n            }\r\n\r\n            let canvasY = (value: number): number => {\r\n                if (DELTA !== 0) {\r\n                    return canvasH - marginY - deltaY * (value - valueMinGrid);\r\n                } else {\r\n                    return (canvasH) / 2 - marginY;\r\n                }\r\n            };\r\n\r\n            // график 'confirmed', 'recovered', 'deaths'\r\n            if (caseType === 'confirmed') ctx!.strokeStyle = 'red';\r\n            if (caseType === 'recovered') ctx!.strokeStyle = 'green';\r\n            if (caseType === 'deaths') ctx!.strokeStyle = 'blue';\r\n            ctx!.lineWidth = 3;\r\n            ctx!.setLineDash([]);\r\n            for (let i = 0; i < period; i++) {\r\n                if (i === 0) {\r\n                    ctx!.beginPath();\r\n                    if (valuesCurrent[0] !== null) {\r\n                        ctx!.moveTo(canvasX(i), canvasY(valuesCurrent[0]));\r\n                    } else {\r\n                        ctx!.moveTo(canvasX(i), canvasY(valueMinGrid))\r\n                    }\r\n\r\n                }\r\n                if (i > 0) {\r\n                    const valuePrev = valuesCurrent[i-1];\r\n                    const valueNow = valuesCurrent[i];\r\n\r\n                    if (valuePrev !== null && valueNow !== null) {\r\n                        ctx!.lineTo(canvasX(i), canvasY(valueNow));\r\n                    }\r\n                    if (valuePrev !== null && valueNow === null) {\r\n                        ctx!.lineTo(canvasX(i - 1), canvasY(valueMinGrid));\r\n                        ctx!.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                    }\r\n                    if (valuePrev == null && valueNow !== null) {\r\n                        ctx!.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                        ctx!.lineTo(canvasX(i), canvasY(valueNow));\r\n                    }\r\n                    if (valuePrev == null && valuesCurrent[i] == null) {\r\n                        ctx!.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                    }\r\n                }\r\n                if (i === period - 1) {\r\n                    ctx!.stroke();\r\n                }\r\n            }\r\n        }\r\n    }, [valuesCurrent, period, caseType]);\r\n\r\n    const onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\r\n        if (e.target) {\r\n            const canvas: DOMRect = e.currentTarget.getBoundingClientRect();\r\n            const x = e.clientX - canvas.left;\r\n            const y = e.clientY - canvas.top;\r\n            dispatch(statisticAC.setMouseXY(x, y));\r\n        }\r\n    };\r\n\r\n    const onMouseMoveThrottle = throttle(onMouseMove, 10);\r\n\r\n    const onMouseEnter = () => {\r\n        dispatch(statisticAC.setMouseHoverCanvas(true));\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        dispatch(statisticAC.setMouseHoverCanvas(false));\r\n    };\r\n\r\n    return {\r\n        classes, canvasRef, onMouseMoveThrottle,\r\n        onMouseEnter, onMouseLeave\r\n    }\r\n};\r\n\r\n//==================== COMPONENT =====================\r\nexport const CanvasGraph: React.FC<{}> = (): ReactElement => {\r\n    const {\r\n        classes, canvasRef, onMouseMoveThrottle,\r\n        onMouseEnter, onMouseLeave\r\n    } = useCanvasGraph();\r\n\r\n    return (\r\n        <canvas\r\n            className={classes.canvasGraph}\r\n            ref={canvasRef}\r\n            width={CANVAS.canvasW()}\r\n            height={CANVAS.canvasH()}\r\n            onMouseMove={onMouseMoveThrottle}\r\n            onMouseEnter={onMouseEnter}\r\n            onMouseLeave={onMouseLeave}\r\n        />\r\n    )\r\n};\r\nexport default CanvasGraph;\r\n\r\n//======================= STYLE ===================\r\nconst useStyles = makeStyles({\r\n    canvasGraph: {\r\n        zIndex: 4,\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n    },\r\n});","import React, {ReactElement, useEffect, useRef} from \"react\";\r\nimport {CANVAS} from \"../../../../helpers/canvas\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport throttle from 'lodash/throttle'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getFormValuesSelector,\r\n    getMouseHoverCanvas,\r\n    getMouseX, getShowInfo,\r\n    getXPoint,\r\n    getYPoint\r\n} from \"../../../../store/selectors/statistic-selectors\";\r\nimport {statisticAC} from \"../../../../store/reducers/statistic-reducer\";\r\n\r\n//================== CUSTOM HOOK ==================\r\nconst useCanvasPoint = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const mouseHoverCanvas = useSelector(getMouseHoverCanvas)\r\n    const mouseX = useSelector(getMouseX);\r\n    const xPoint = useSelector(getXPoint);\r\n    const yPoint = useSelector(getYPoint);\r\n    const caseType = useSelector(getFormValuesSelector).caseType;\r\n    const showInfo = useSelector(getShowInfo);\r\n\r\n    let canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    let canvasCtxRef = useRef<CanvasRenderingContext2D | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (canvasRef.current && mouseHoverCanvas && showInfo) {\r\n            const marginLeftX = CANVAS.marginLeftX;\r\n            const paddingLeftX = CANVAS.paddingLeftX;\r\n            const marginRightX = CANVAS.marginRightX;\r\n            const marginY = CANVAS.marginY;\r\n            const canvasW = CANVAS.canvasW();\r\n            const canvasH = CANVAS.canvasH();\r\n            canvasCtxRef.current = canvasRef.current.getContext('2d');\r\n            let ctx = canvasCtxRef.current;\r\n            ctx!.clearRect(0, 0, canvasW, canvasH);// очистка перед перерисовкой\r\n            ctx!.fillStyle = 'transparent';\r\n            ctx!.fillRect(0, 0, canvasW, canvasH);\r\n\r\n            // вертикальная линия\r\n            ctx!.strokeStyle = '#000000';\r\n            ctx!.lineWidth = 1;\r\n            ctx!.setLineDash([2, 1]);\r\n            ctx!.beginPath();\r\n\r\n            if (mouseX > marginLeftX + paddingLeftX\r\n                && mouseX < canvasW - marginRightX) {\r\n                ctx!.moveTo(xPoint, 0);\r\n                ctx!.lineTo(xPoint, canvasH - marginY);\r\n                ctx!.stroke();\r\n            }\r\n\r\n            // точка\r\n            if (yPoint !== null) {\r\n                let color = '000';\r\n                if (caseType === 'confirmed') color = 'red';\r\n                if (caseType === 'recovered') color = 'green';\r\n                if (caseType === 'deaths') color = 'blue';\r\n                ctx!.strokeStyle = color;\r\n                ctx!.lineWidth = 4;\r\n                ctx!.lineJoin = 'round';\r\n                ctx!.setLineDash([]);\r\n                ctx!.beginPath();\r\n                ctx!.arc(xPoint, yPoint, 3, 0, 2 * Math.PI);\r\n                ctx!.stroke();\r\n                ctx!.fillStyle = color;\r\n                ctx!.fill();\r\n            }\r\n\r\n        }\r\n    }, [mouseHoverCanvas, mouseX, xPoint, yPoint, caseType, showInfo]);\r\n\r\n    const onMouseEnter = () => {\r\n        dispatch(statisticAC.setMouseHoverCanvas(true));\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        dispatch(statisticAC.setMouseHoverCanvas(false));\r\n    };\r\n\r\n    const onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\r\n        if (e.target) {\r\n            const canvas: DOMRect = e.currentTarget.getBoundingClientRect();\r\n            const x = e.clientX - canvas.left;\r\n            const y = e.clientY - canvas.top;\r\n            dispatch(statisticAC.setMouseXY(x, y));\r\n        }\r\n    };\r\n\r\n    const onMouseMoveThrottle = throttle(onMouseMove, 10);\r\n\r\n    return {\r\n        classes, canvasRef, onMouseEnter,\r\n        onMouseLeave, onMouseMoveThrottle\r\n    }\r\n};\r\n\r\n//================== COMPONENT ====================\r\nexport const CanvasPoint: React.FC<{}> = (): ReactElement => {\r\n    const {\r\n\r\n        classes, canvasRef, onMouseEnter,\r\n        onMouseLeave, onMouseMoveThrottle\r\n    } = useCanvasPoint();\r\n\r\n    return (\r\n        <canvas\r\n            className={classes.canvasGraph}\r\n            ref={canvasRef}\r\n            width={CANVAS.canvasW()}\r\n            height={CANVAS.canvasH()}\r\n            onMouseEnter={onMouseEnter}\r\n            onMouseLeave={onMouseLeave}\r\n            onMouseMove={onMouseMoveThrottle}\r\n        />\r\n\r\n    )\r\n};\r\nexport default CanvasPoint;\r\n\r\n//======================= STYLE ===================\r\nconst useStyles = makeStyles({\r\n    canvasGraph: {\r\n        zIndex: 5,\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n    },\r\n});","import {ReactElement} from \"react\";\r\nimport React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {CANVAS} from \"../../../../helpers/canvas\";\r\nimport CanvasAxisMemo from \"./CanvasAxis\";\r\nimport Preloader from \"../../../common/Preloader\";\r\nimport Dates from \"./Dates/Dates\";\r\nimport Info from \"./Info/Info\";\r\nimport Values from \"./Values/Values\";\r\nimport {getMouseHoverCanvas, getShowInfo} from \"../../../../store/selectors/statistic-selectors\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getIsLoading, getLanError} from \"../../../../store/selectors/app-selector\";\r\nimport CanvasGraph from \"./CanvasGraph\";\r\nimport CanvasPoint from \"./CanvasPoint\";\r\n\r\n//================== CUSTOM HOOK ==================\r\nconst useCanvasAll = () => {\r\n    const classes = useStyles();\r\n    const mouseHoverCanvas = useSelector(getMouseHoverCanvas);\r\n    const showInfo = useSelector(getShowInfo);\r\n    const isLoading = useSelector(getIsLoading);\r\n    const lanError = useSelector(getLanError);\r\n\r\n    return {\r\n        classes, lanError, isLoading, showInfo, mouseHoverCanvas\r\n    }\r\n};\r\n\r\n//================== COMPONENT ====================\r\nexport const CanvasAll: React.FC<{}> = (): ReactElement => {\r\n    const {\r\n        classes, lanError, isLoading, showInfo, mouseHoverCanvas\r\n    } = useCanvasAll();\r\n\r\n    return (\r\n        <div className={classes.canvasBlock}>\r\n            <div className={classes.canvasAll}>\r\n                <CanvasAxisMemo/>\r\n                {\r\n                    !lanError &&\r\n                    <>\r\n                        {\r\n                            isLoading\r\n                                ? <Preloader/>\r\n                                : <>\r\n                                    <CanvasGraph/>\r\n                                    {showInfo && mouseHoverCanvas && <CanvasPoint/>}\r\n                                    <Values/>\r\n                                    {showInfo && mouseHoverCanvas && <Info/>}\r\n                                    <Dates/>\r\n                                </>\r\n                        }\r\n                    </>\r\n                }\r\n            </div>\r\n        </div>\r\n    )};\r\nexport default CanvasAll;\r\n\r\n//========================= STYLE ==================\r\nconst useStyles = makeStyles({\r\n    canvasBlock: {\r\n        backgroundColor: 'white',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        marginBottom: 5\r\n    },\r\n    canvasAll: {\r\n        margin: '50px auto 30px',\r\n        position: 'relative',\r\n        width: CANVAS.canvasW(),\r\n        height: CANVAS.canvasH()\r\n    },\r\n});","import React, {ReactElement, useEffect, useState} from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport LanErrorDialogContainer from \"./LanErrorDialog/LanErrorDialog\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport useCommonQueryParams from \"../../../hooks/useCommonQueryParams\";\r\nimport {StringParam, useQueryParam} from \"use-query-params\";\r\nimport {getInitial, getValues, statisticAC} from \"../../../store/reducers/statistic-reducer\";\r\nimport {ByDayOrTotalType, CaseTypeType, PeriodType} from \"../../../types/types\";\r\nimport {getDateEnd, getFormValuesSelector} from \"../../../store/selectors/statistic-selectors\";\r\nimport StatisticForm from \"./StatisticForm/StatisticForm\";\r\nimport CanvasAll from \"./Canvas/CanvasAll\";\r\n\r\n//================== CUSTOM HOOK ==================\r\nconst useStatistic = () => {\r\n    useCommonQueryParams(); // обработка общих Query параметров\r\n    const classes = useStyles();\r\n    const [lanErrorDialogOpen, setLanErrorDialogOpen] = useState(false);\r\n    const lanError = useSelector((state: StateType) => state.app.lanError);\r\n    const dateEnd = useSelector(getDateEnd);\r\n    const dispatch = useDispatch();\r\n    const formValues = useSelector(getFormValuesSelector);\r\n    const {country, period, byDayOrTotal, caseType} = formValues;\r\n\r\n    const [countryQuery, setCountryQuery] = useQueryParam('country', StringParam);\r\n    const [periodQuery, setPeriodQuery] = useQueryParam('period', StringParam);\r\n    const [byDayOrTotalQuery, setByDayOrTotalQuery] = useQueryParam('byDayOrTotal', StringParam);\r\n    const [caseTypeQuery, setCaseTypeQuery] = useQueryParam('caseType', StringParam);\r\n    const [dateEndQuery, setDateEndQuery] = useQueryParam('dateEnd', StringParam);\r\n\r\n    // URL => STATE\r\n    // первоначальная инициализация\r\n    useEffect(() => {\r\n        const countryInitial = countryQuery ? countryQuery : country;\r\n        const periodInitial = periodQuery ? periodQuery as PeriodType : period;\r\n        const byDayOrTotalInitial = byDayOrTotalQuery ? byDayOrTotalQuery as ByDayOrTotalType : byDayOrTotal;\r\n        const caseTypeInitial = caseTypeQuery ? caseTypeQuery as CaseTypeType : caseType;\r\n        dispatch(statisticAC.setFormValues({\r\n            country: countryInitial,\r\n            period: periodInitial,\r\n            byDayOrTotal: byDayOrTotalInitial,\r\n            caseType: caseTypeInitial,\r\n        }));\r\n        dispatch(statisticAC.setDateEnd(dateEndQuery ? dateEndQuery : dateEnd as string));\r\n        dispatch(getInitial(periodInitial, countryInitial, byDayOrTotalInitial, caseTypeInitial))\r\n    }, [dispatch]);\r\n\r\n    // STATE => URL\r\n    useEffect(() => {\r\n        setCountryQuery(country !== 'russia' ? country : undefined);\r\n        setPeriodQuery(period !== '14' ? period : undefined);\r\n        setByDayOrTotalQuery(byDayOrTotal !== 'byDay' ? byDayOrTotal : undefined);\r\n        setCaseTypeQuery(caseType !== 'confirmed' ? caseType : undefined);\r\n        setDateEndQuery(dateEnd ? dateEnd : undefined)\r\n    }, [formValues, dateEnd]);\r\n\r\n    // обработка данных из формы\r\n    // если изменилась country или period - запрос на сервер\r\n    useEffect(() => {\r\n        if (dateEnd) {\r\n            dispatch(getValues(dateEnd, period, country, byDayOrTotal, caseType));\r\n        }\r\n    }, [country, period, dispatch]);\r\n\r\n    useEffect(()=> {\r\n        if (+period !== -1) {\r\n            dispatch(statisticAC.setPeriod(+period))\r\n        }\r\n    }, [period]);\r\n\r\n    // если изменился только или byDayOrTotal или caseType - получить из store\r\n    useEffect(() => {\r\n        dispatch(statisticAC.setCurrentValues(byDayOrTotal, caseType));\r\n    }, [byDayOrTotal, caseType, dispatch]);\r\n\r\n    // обработка сетевой ошибки\r\n    useEffect(() => {\r\n        if (lanError) {\r\n            setLanErrorDialogOpen(true)\r\n        }\r\n    }, [lanError]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return {\r\n        classes, lanErrorDialogOpen, setLanErrorDialogOpen\r\n    }\r\n};\r\n\r\n//================== COMPONENT ====================\r\nconst Statistic: React.FC = (): ReactElement => {\r\n    const {\r\n        classes, lanErrorDialogOpen, setLanErrorDialogOpen\r\n    } = useStatistic();\r\n\r\n    return (\r\n        <div className={classes.statistic}>\r\n            <div>\r\n                <CanvasAll/>\r\n            </div>\r\n            <div>\r\n                <StatisticForm/>\r\n            </div>\r\n            <LanErrorDialogContainer lanErrorDialogOpen={lanErrorDialogOpen}\r\n                                     setLanErrorDialogOpen={setLanErrorDialogOpen}\r\n            />\r\n        </div>\r\n    )\r\n};\r\nexport default Statistic;\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    statistic: {\r\n        padding: '10px 10px 20px'\r\n    },\r\n});","import React, {ReactElement} from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {addCommaToNumber} from \"../../../helpers/addCommaToNumber\";\r\n\r\nconst SummaryCasesItem: React.FC<PropsType> = (props: PropsType): ReactElement => {\r\n    const {color, caseType, value, icon} = props;\r\n    const classes = useStyles();\r\n\r\n    const useStylesInner = makeStyles({\r\n        type: {\r\n            flexGrow: 1,\r\n            paddingLeft: 5,\r\n            color: color\r\n        },\r\n        iconWrapper: {\r\n            color: color\r\n        }\r\n    });\r\n    const classesInner = useStylesInner();\r\n\r\n    return (\r\n        <div className={classes.item}>\r\n            <Typography variant='h6'\r\n                        className={classesInner.type}>\r\n                {caseType}\r\n            </Typography>\r\n\r\n            <div className={classes.valueWrapper}>\r\n                <div className={classesInner.iconWrapper}>\r\n                    {icon}\r\n                </div>\r\n\r\n                <Typography variant='h6' className={classes.value}>\r\n                    {addCommaToNumber(value)}\r\n                </Typography>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SummaryCasesItem;\r\n\r\n//===================== TYPE =================\r\ntype PropsType = {\r\n    color: string\r\n    caseType: string\r\n    value: number\r\n    icon: ReactElement\r\n}\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    valueWrapper: {\r\n        flexBasis: 180,\r\n        flexShrink: 0,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-start'\r\n    },\r\n    value: {\r\n        marginLeft: 10\r\n    }\r\n});","import React, {ReactElement} from 'react';\r\nimport SummaryCasesItem from \"./SummaryCasesItem\";\r\nimport {CountryCasesType, LangType} from \"../../../types/types\";\r\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport {translate} from \"../../../helpers/translate\";\r\n\r\n\r\nconst SummaryCases: React.FC<PropsType> = (props: PropsType): ReactElement => {\r\n    const {cases, lang} = props;\r\n\r\n    const color = ['darkred', 'darkred', 'darkblue', 'darkblue', 'darkgreen', 'darkgreen'];\r\n    const caseType = [\r\n        translate(lang, 'Confirmed new'),\r\n        translate(lang, 'Confirmed total'),\r\n        translate(lang, 'Deaths new'),\r\n        translate(lang, 'Deaths total'),\r\n        translate(lang, 'Recovered new'),\r\n        translate(lang, 'Recovered total')\r\n    ];\r\n    const icons = [\r\n        <LocalHospitalIcon/>, <LocalHospitalIcon/>,\r\n        <HighlightOffIcon/>, <HighlightOffIcon/>,\r\n        <FavoriteIcon/>, <FavoriteIcon/>\r\n    ];\r\n\r\n    const summaryKeys = cases && Object.keys(cases);\r\n    const SummaryCasesElements = cases && summaryKeys &&\r\n        summaryKeys.map((key, i) => <SummaryCasesItem key={key}\r\n                                                      value={cases[key as keyof CountryCasesType]}\r\n                                                      color={color[i]}\r\n                                                      caseType={caseType[i]}\r\n                                                      icon={icons[i]}\r\n            />\r\n        );\r\n\r\n    return (\r\n        <div>\r\n            {SummaryCasesElements}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SummaryCases;\r\n\r\n//===================== TYPE =================\r\ntype PropsType = {\r\n    cases: null | CountryCasesType\r\n    lang: LangType\r\n}","import {summaryAPI} from \"../../DAL/api\";\r\nimport {BaseThunkType, GetActionsType} from \"../store\";\r\nimport {CountryCasesType, SummaryCountryType} from \"../../types/types\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nlet initialState = {\r\n    date: '', // последняя актуальная дата сбора данных (из API)\r\n    summaryCases: null as null | CountryCasesType, // объект значений суммарного (по всему миру) числа случаев\r\n    countriesCases: null as null | Array<SummaryCountryType>,// массив информации по странам\r\n    countriesList: [] as Array<string>, //список названий стран\r\n    currentCountry: \"Russian Federation\" // название выбранной страны\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype SummaryActionsType = GetActionsType<typeof summaryAC>\r\ntype ThunkType = BaseThunkType<SummaryActionsType | AppActionsType>\r\n\r\nconst summaryReducer = (state = initialState, action: SummaryActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SUMMARY/SET_DATE': {\r\n            return {...state, date: action.date}\r\n        }\r\n        case 'SUMMARY/SET_SUMMARY_CASES': {\r\n            return {\r\n                ...state,\r\n                summaryCases:\r\n                    {\r\n                        NewConfirmed: action.summaryCases.NewConfirmed,\r\n                        TotalConfirmed: action.summaryCases.TotalConfirmed,\r\n                        NewDeaths: action.summaryCases.NewDeaths,\r\n                        TotalDeaths: action.summaryCases.TotalDeaths,\r\n                        NewRecovered: action.summaryCases.NewRecovered,\r\n                        TotalRecovered: action.summaryCases.TotalRecovered\r\n                    }\r\n            }\r\n        }\r\n        case 'SUMMARY/SET_COUNTRIES_CASES': {\r\n            return {...state, countriesCases: action.countriesCases}\r\n        }\r\n        case 'SUMMARY/SET_CURRENT_COUNTRY': {\r\n            return {...state, currentCountry: action.country};\r\n        }\r\n        case 'SUMMARY/SET_COUNTRIES_LIST': {\r\n            let countriesList = [];\r\n            for (let i = 0; i < action.countriesCases.length; i++) {\r\n                countriesList.push(action.countriesCases[i].Country);\r\n            }\r\n            return {...state, countriesList: countriesList};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const summaryAC = {\r\n    setDate: (date: string) => ({type: 'SUMMARY/SET_DATE', date} as const),\r\n    setSummaryCases: (summaryCases: CountryCasesType) => ({type: 'SUMMARY/SET_SUMMARY_CASES', summaryCases} as const),\r\n    setCountriesCases: (countriesCases: Array<SummaryCountryType>) => ({\r\n        type: 'SUMMARY/SET_COUNTRIES_CASES',\r\n        countriesCases\r\n    } as const),\r\n    setCurrentCountry: (country: string) => ({type: 'SUMMARY/SET_CURRENT_COUNTRY', country} as const),\r\n    setCountriesList: (countriesCases: Array<SummaryCountryType>) => ({\r\n        type: 'SUMMARY/SET_COUNTRIES_LIST',\r\n        countriesCases\r\n    } as const),\r\n};\r\n\r\nexport const getSummary = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await summaryAPI.getSummary();\r\n        dispatch(summaryAC.setDate(data.Date));\r\n        dispatch(summaryAC.setSummaryCases(data.Global));\r\n        dispatch(summaryAC.setCountriesCases(data.Countries));\r\n        dispatch(summaryAC.setCountriesList(data.Countries));\r\n    } catch (e) {\r\n        console.log(e)\r\n        appAC.setLanError(true);\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n\r\n};\r\n\r\nexport default summaryReducer;\r\n\r\n","import {StateType} from \"../store\";\r\n\r\nexport const getDate = (state: StateType) => state.summary.date;\r\nexport const getSummaryCases = (state: StateType) => state.summary.summaryCases;\r\nexport const getCountriesCases = (state: StateType) => state.summary.countriesCases;\r\nexport const getCountriesList = (state: StateType) => state.summary.countriesList;\r\nexport const getCurrentCountry = (state: StateType) => state.summary.currentCountry;","import {ReactElement} from \"react\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm, submit} from \"redux-form\";\r\nimport renderSelectField from \"../../common/renderSelectField\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCountriesList, getCurrentCountry} from \"../../../store/selectors/summary-selector\";\r\nimport {summaryAC} from \"../../../store/reducers/summary-reducer\";\r\n\r\n//================================= FORM ===================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, countriesList} = props;\r\n    const classes = useStyles();\r\n    const optionElements = countriesList && countriesList\r\n        .map((el, i) => <option key={i}\r\n                                value={el}>\r\n                {el}\r\n            </option>\r\n        );\r\n    const dispatch = useDispatch();\r\n\r\n    const onChangeHandler = () => {\r\n        setTimeout(() => dispatch(submit('summary-country')));\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={classes.fieldWrapper}>\r\n                <Field name='country'\r\n                       component={renderSelectField}\r\n                       className={classes.selectField}\r\n                       onChange={onChangeHandler}\r\n                >\r\n                    {optionElements}\r\n                </Field>\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================ REDUX-FORM ====================================\r\nconst ReduxForm = reduxForm<FormValuesType, FormOwnPropsType>({\r\n    form: 'summary-country',\r\n})(Form);\r\n\r\n//========================== CUSTOM HOOK ========================\r\nconst useSelectCurrentCountry = () => {\r\n    const currentCountry = useSelector(getCurrentCountry);\r\n    const countriesList = useSelector(getCountriesList)\r\n    const dispatch = useDispatch();\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        dispatch(summaryAC.setCurrentCountry(formValue.country));\r\n    };\r\n    const initialValues: FormValuesType = {\r\n        country: currentCountry\r\n    };\r\n    return {\r\n        countriesList, onSubmit, initialValues\r\n    }\r\n};\r\n\r\n//=========================== COMPONENT =====================================\r\nconst SelectCurrentCountry: React.FC<{}> = (): ReactElement => {\r\n    const {\r\n        countriesList, onSubmit, initialValues\r\n    } = useSelectCurrentCountry();\r\n\r\n    return (\r\n        <ReduxForm onSubmit={onSubmit}\r\n                   initialValues={initialValues}\r\n                   countriesList={countriesList}\r\n        />\r\n    )\r\n};\r\n\r\nexport default SelectCurrentCountry;\r\n\r\n//========================== TYPE ============================\r\ntype FormPropsType = InjectedFormProps<FormValuesType, FormOwnPropsType> & FormOwnPropsType;\r\ntype FormValuesType = {\r\n    country: string\r\n};\r\ntype FormOwnPropsType = {\r\n    countriesList: Array<string>\r\n}\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    fieldWrapper: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr',\r\n        marginBottom: 5\r\n    },\r\n    selectField: {\r\n        backgroundColor: 'white',\r\n        paddingLeft: 5,\r\n        width: '100%'\r\n    },\r\n});\r\n\r\n\r\n\r\n","import React, {ReactElement, useEffect} from 'react';\r\nimport SummaryCases from \"./SummaryCases\";\r\nimport {CountryCasesType, LangType, SummaryCountryType} from \"../../../types/types\";\r\nimport {translate} from \"../../../helpers/translate\";\r\nimport {DATE} from \"../../../helpers/date\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport Preloader from \"../../common/Preloader\";\r\nimport clsx from \"clsx\";\r\nimport useCommonQueryParams from \"../../../hooks/useCommonQueryParams\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {StringParam, useQueryParam} from \"use-query-params\";\r\nimport {getSummary, summaryAC} from \"../../../store/reducers/summary-reducer\";\r\nimport SelectCurrentCountry from \"./SelectCurentCountry\";\r\nimport {\r\n    getCountriesCases,\r\n    getCurrentCountry,\r\n    getDate,\r\n    getSummaryCases\r\n} from \"../../../store/selectors/summary-selector\";\r\nimport {getIsLoading, getLang} from \"../../../store/selectors/app-selector\";\r\n\r\n//========================= CUSTOM HOOK ====================\r\nconst useSummary = () => {\r\n    useCommonQueryParams();\r\n    const dispatch = useDispatch();\r\n    const date = useSelector(getDate);\r\n    const summaryCases = useSelector(getSummaryCases);\r\n    const isLoading = useSelector(getIsLoading);\r\n    const lang = useSelector(getLang);\r\n    const countriesCases = useSelector(getCountriesCases);\r\n    const currentCountry = useSelector(getCurrentCountry);\r\n\r\n    useEffect(() => {\r\n        dispatch(getSummary());\r\n    }, []);\r\n\r\n    const [countryQuery, setCountryQuery] = useQueryParam('country', StringParam);\r\n    // URL => STATE\r\n    useEffect(() => {\r\n        dispatch(summaryAC.setCurrentCountry(countryQuery ? countryQuery : currentCountry));\r\n    }, [dispatch]);\r\n    // STATE => URL\r\n    useEffect(() => {\r\n        setCountryQuery(currentCountry !== 'Russian Federation' ? currentCountry : undefined);\r\n    }, [\r\n        currentCountry\r\n    ]);\r\n\r\n    const classes = useStyles();\r\n    const currentCasesFull = countriesCases && countriesCases.find(el => el.Country === currentCountry)\r\n    const currentCases = (currentCasesFull && {\r\n        NewConfirmed: currentCasesFull.NewConfirmed,\r\n        TotalConfirmed: currentCasesFull.TotalConfirmed,\r\n        NewDeaths: currentCasesFull.NewDeaths,\r\n        TotalDeaths: currentCasesFull.TotalDeaths,\r\n        NewRecovered: currentCasesFull.NewRecovered,\r\n        TotalRecovered: currentCasesFull.TotalRecovered\r\n    }) as null | CountryCasesType;\r\n\r\n    return {\r\n        classes, currentCases, date, summaryCases,\r\n        isLoading, lang\r\n    }\r\n};\r\n\r\n//========================= COMPONENT ======================\r\nconst Summary: React.FC<{}> = (): ReactElement => {\r\n    const {\r\n        classes, currentCases, date, summaryCases,\r\n        isLoading, lang\r\n    } = useSummary();\r\n\r\n    if (isLoading) return <Preloader/>;\r\n    return (\r\n        <>\r\n            <div className={classes.blocks}>\r\n                <div className={classes.block}>\r\n                    <div className={clsx(classes.titleWrapper, classes.titleWrapper1)}>\r\n                        <Typography variant='h5' align='center'>\r\n                            {translate(lang, 'Global')}\r\n                        </Typography>\r\n                    </div>\r\n                    <SummaryCases cases={summaryCases} lang={lang}/>\r\n                </div>\r\n                <div className={classes.block}>\r\n                    <div className={classes.titleWrapper}>\r\n                        <Typography variant='h5' align='center'>\r\n                            {translate(lang, 'By country')}\r\n                        </Typography>\r\n                    </div>\r\n                    <div>\r\n                        <SelectCurrentCountry/>\r\n\r\n                    </div>\r\n                    <SummaryCases cases={currentCases} lang={lang}/>\r\n                </div>\r\n            </div>\r\n            {\r\n                date &&\r\n                <Typography variant='subtitle1' align='center'>\r\n                    {DATE.dateTranslateFromAPI(date, lang)}\r\n                </Typography>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Summary;\r\n\r\n//================== TYPE ==================\r\ntype PropsType = {\r\n    date: string\r\n    summaryCases: null | CountryCasesType\r\n    isLoading: boolean\r\n    lang: LangType\r\n    countriesCases: null | Array<SummaryCountryType>\r\n    currentCountry: string\r\n}\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    blocks: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr 1fr',\r\n        gridGap: 20,\r\n        margin: '0 20px 10px'\r\n    },\r\n    block: {\r\n        border: '1px solid #fff',\r\n        borderRadius: 10,\r\n        padding: 10\r\n    },\r\n    titleWrapper: {\r\n        marginBottom: 10,\r\n        padding: '5px 0',\r\n        border: '1px solid #fff',\r\n        borderRadius: 10,\r\n    },\r\n    titleWrapper1: {\r\n        marginBottom: 47\r\n    }\r\n});\r\n","import React, {ReactElement} from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport HomeContainer from \"./Home/HomeContainer\";\r\nimport Statistic from \"./Statistic/Statistic\";\r\nimport Summary from \"./Summary/Summary\";\r\n\r\nconst Main: React.FC = (): ReactElement => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.main}>\r\n            <Switch>\r\n                <Route exact path='/' render={() => <HomeContainer/>}/>\r\n                <Route path='/summary' render={() => <Summary/>}/>\r\n                <Route path='/statistic' render={() => <Statistic/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n};\r\nexport default Main;\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        backgroundColor: grey[400],\r\n        padding: '10px 10px 20px',\r\n        flexGrow: 1,\r\n    },\r\n});\r\n","import {FormControlLabel} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport {LangSwitcherPropsType} from \"./LangSwitcherContainer\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\n\r\nconst LangSwitcher: React.FC<LangSwitcherPropsType> = (props: LangSwitcherPropsType) => {\r\n    const {lang, setLang} = props;\r\n    const classes = useStyles();\r\n    const checked = lang === 'eng'\r\n    const handleChange = () => {\r\n        if (lang === 'eng') {\r\n            setLang('rus')\r\n        } else {\r\n            setLang('eng')\r\n        }\r\n    };\r\n    const label = lang === 'eng' ? 'ENG' : 'RUS';\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <FormControlLabel\r\n                control={\r\n                    <Switch checked={checked}\r\n                            onChange={handleChange}\r\n                            name=\"checkedA\"\r\n                            classes={{\r\n                                root: classes.root,\r\n                                track: classes.track,\r\n                            }}\r\n                    />\r\n                }\r\n                label={label}\r\n                className={classes.label}\r\n            />\r\n        </div>\r\n    )\r\n};\r\nexport default LangSwitcher\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n       color: 'white'\r\n    },\r\n    label: {\r\n        color: 'white',\r\n        //width: 32\r\n    },\r\n    wrapper: {\r\n        width: 100,\r\n        marginLeft: 10\r\n    },\r\n    track: {\r\n       backgroundColor: grey[200],\r\n    }\r\n});\r\n\r\n","import {StateType} from \"../../../store/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {LangType} from \"../../../types/types\";\r\nimport LangSwitcher from \"./LangSwitcher\";\r\nimport {appAC} from \"../../../store/reducers/app-reducer\";\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    lang: state.app.lang\r\n});\r\n\r\nconst setLang = appAC.setLang;\r\nlet LangSwitcherContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setLang})(LangSwitcher);\r\nexport default LangSwitcherContainer;\r\n\r\n//====================== TYPE =========================\r\ntype MapStatePropsType = {\r\n    lang: LangType\r\n}\r\ntype MapDispatchPropsType = {\r\n    setLang: (lang: LangType) => void\r\n}\r\nexport type LangSwitcherPropsType = MapStatePropsType & MapDispatchPropsType;","import React, {ReactElement} from 'react';\r\nimport style from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport LangSwitcherContainer from \"./LangSwitcher/LangSwitcherContainer\";\r\nimport {HeaderPropsType} from \"./HeaderContainer\";\r\nimport {translate} from \"../../helpers/translate\";\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props: HeaderPropsType): ReactElement => {\r\n    const {lang} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <header className={classes.header}>\r\n            <Typography className={classes.logo}\r\n                        variant='h5'\r\n            >\r\n                Covid\r\n            </Typography>\r\n\r\n            <div className={classes.menu}>\r\n                <nav className={style.nav}>\r\n                    <NavLink to='/' className={style.navItem}>\r\n                        {translate(lang, 'Home')}\r\n                    </NavLink>\r\n                    <NavLink to='/summary' className={style.navItem} activeClassName={style.active}>\r\n                        {translate(lang, 'Summary')}\r\n                    </NavLink>\r\n                    <NavLink to='/statistic' className={style.navItem} activeClassName={style.active}>\r\n                        {translate(lang, 'Statistic')}\r\n                    </NavLink>\r\n                </nav>\r\n                <LangSwitcherContainer/>\r\n            </div>\r\n\r\n\r\n        </header>\r\n    )\r\n};\r\nexport default Header;\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        height: 60,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        backgroundColor: blueGrey[900],\r\n        padding: '0 10px 0 20px',\r\n    },\r\n    logo: {\r\n        color: grey[50],\r\n        textTransform: 'uppercase'\r\n    },\r\n    menu: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    }\r\n});","import Header from \"./Header\";\r\nimport {LangType} from \"../../types/types\";\r\nimport {StateType} from \"../../store/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {appAC} from \"../../store/reducers/app-reducer\";\r\n\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    lang: state.app.lang\r\n});\r\n\r\nconst setLang = appAC.setLang;\r\nlet HeaderContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setLang})(Header);\r\nexport default HeaderContainer;\r\n\r\n//====================== TYPE =========================\r\ntype MapStatePropsType = {\r\n    lang: LangType\r\n}\r\ntype MapDispatchPropsType = {}\r\nexport type HeaderPropsType = MapStatePropsType & MapDispatchPropsType;","import React from 'react';\r\nimport Main from \"./components/Main/Main\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\n\r\n//================ CONTAINER =================\r\nconst App = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.appWrapper}>\r\n            <div className={classes.app}>\r\n                <HeaderContainer/>\r\n                <Main/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default App;\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    appWrapper: {\r\n        backgroundColor: grey[100]\r\n    },\r\n    app: {\r\n        maxWidth: 1120,\r\n        width: '100%',\r\n        margin: '0 auto',\r\n        minHeight: '100vh',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n});","import thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {Action, applyMiddleware, combineReducers, createStore, Middleware} from \"redux\";\r\nimport summaryReducer from \"./reducers/summary-reducer\";\r\nimport statisticReducer from \"./reducers/statistic-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport appReducer from \"./reducers/app-reducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nlet rootReducer = combineReducers({\r\n    summary: summaryReducer,\r\n    statistic: statisticReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n});\r\nconst middleware: Array<Middleware> = [thunkMiddleware];\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;\r\n\r\n//======================== TYPE ==========================\r\nexport type StateType = ReturnType<typeof rootReducer>\r\nexport type GetActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, StateType, unknown, A>","import * as React from 'react';\r\nimport {ErrorInfo} from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component<PropsType, StateType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            errorInfo: null\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n        this.setState({\r\n            error: error,\r\n            errorInfo: errorInfo\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.errorInfo) {\r\n            return (\r\n                <div>\r\n                    <h2>Something went wrong</h2>\r\n                    <details style={{whiteSpace: 'pre-wrap'}}>\r\n                        {this.state.error && this.state.error.toString()}\r\n                    </details>\r\n                </div>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n//==================== TYPES ========================\r\ntype PropsType = {\r\n\r\n};\r\ntype StateType = {\r\n    error: null | Error\r\n    errorInfo: null | ErrorInfo\r\n}\r\n\r\n//\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {HashRouter, Route} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from './store/store'\r\nimport ErrorBoundary from \"./components/common/ErrorBoundary\";\r\nimport {CssBaseline} from \"@material-ui/core\";\r\nimport {QueryParamProvider} from \"use-query-params\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <QueryParamProvider ReactRouterRoute={Route}>\r\n                <ErrorBoundary>\r\n                    <CssBaseline/>\r\n                    <App/>\r\n                </ErrorBoundary>\r\n            </QueryParamProvider>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__FqsW2\",\"navItem\":\"Header_navItem__2y3HY\",\"active\":\"Header_active__fu_PZ\"};"],"sourceRoot":""}