{"version":3,"sources":["helpers/addCommaToNumber.ts","components/Main/Summary/SummaryCasesItem.tsx","helpers/translate.ts","components/Main/Summary/SummaryCases.tsx","helpers/date.ts","components/common/renderSelectField.jsx","components/Main/Summary/SelectCurentCountry.tsx","DAL/api.ts","store/app-reducer.ts","store/summary-reducer.ts","components/Main/Summary/SelectCurrentCountryContainer.tsx","components/common/Preloader.tsx","components/Main/Summary/Summary.tsx","components/Main/Summary/SummaryContainer.tsx","helpers/canvas.ts","components/Main/Statistic/Canvas/Info/Info.tsx","store/statistic-reducer.ts","components/Main/Statistic/Canvas/Info/InfoContainer.tsx","components/Main/Statistic/Canvas/CanvasPoint.tsx","components/Main/Statistic/Canvas/CanvasPointContainer.tsx","components/Main/Statistic/Canvas/CanvasAxis.tsx","components/Main/Statistic/Canvas/CanvasGraph.tsx","components/Main/Statistic/Canvas/CanvasGraphContainer.tsx","components/Main/Statistic/Canvas/Values/Value.tsx","components/Main/Statistic/Canvas/Values/Values.tsx","components/Main/Statistic/Canvas/Values/ValuesContainer.tsx","components/Main/Statistic/Canvas/Dates/Date.tsx","components/Main/Statistic/Canvas/Dates/Dates.tsx","components/Main/Statistic/Canvas/Dates/DatesContainer.tsx","components/Main/Statistic/Canvas/CanvasAll.tsx","components/Main/Statistic/Canvas/CanvasContainer.tsx","components/Main/Statistic/StatisticForm/StatisticFormRow.tsx","components/Main/Statistic/StatisticForm/StatisticForm.tsx","components/Main/Statistic/StatisticForm/StatisticFormContainer.tsx","components/Main/Statistic/Statistic.tsx","components/Main/Statistic/StatisticContainer.tsx","components/Main/Home/Home.tsx","components/Main/Home/HomeContainer.tsx","components/Main/Main.tsx","components/Header/LangSwitcher/LangSwitcher.tsx","components/Header/LangSwitcher/LangSwitcherContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","App.tsx","store/store.ts","components/common/ErrorBoundary.tsx","index.tsx","components/Header/Header.module.css"],"names":["addCommaToNumber","n","nString","length","result","slice","SummaryCasesItem","props","color","caseType","value","icon","classes","useStyles","classesInner","makeStyles","type","flexGrow","paddingLeft","iconWrapper","useStylesInner","className","item","Typography","variant","valueWrapper","display","alignItems","flexBasis","flexShrink","justifyContent","marginLeft","Translate","translate","lang","phrase","rus","eng","SummaryCases","cases","icons","summaryKeys","Object","keys","SummaryCasesElements","map","key","i","DATE","getCurrentDate","Date","dateJsToAPI","date","monthString","year","getFullYear","month","getMonth","dayString","day","getDate","dateAPIToJs","getStartPeriodDate","period","endPeriodDateJS","this","startPeriodDateJS","getTime","getStartPeriodDateActual","getDates","dateEnd","dates","push","getMonthWord","monthArray","dateTranslateFromAPI","monthWord","dateTranslateFromApiToGraph","renderSelectField","input","label","meta","touched","error","children","custom","FormControl","Select","native","inputProps","name","ReduxForm","reduxForm","form","handleSubmit","countriesList","optionElements","el","dispatch","useDispatch","onSubmit","fieldWrapper","Field","component","selectField","onChange","setTimeout","submit","SelectCurrentCountry","setCurrentCountry","currentCountry","initialValues","country","formValue","gridTemplateColumns","marginBottom","backgroundColor","width","instance","axios","create","baseURL","summaryAPI","get","response","data","statisticAPI","countrySlug","dateStart","dateEndAPI","initialState","globalError","isLoading","lanError","appAC","appReducer","state","action","console","log","summaryCases","countriesCases","summaryAC","summaryReducer","Country","SelectCurrentCountryContainer","connect","summary","Preloader","circularWrapper","CircularProgress","size","position","top","bottom","left","right","zIndex","Summary","currentCasesFull","find","currentCases","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","blocks","block","clsx","titleWrapper","titleWrapper1","align","gridGap","margin","border","borderRadius","padding","SummaryAJAX","getSummary","other","React","Component","SummaryContainer","app","a","Global","Countries","CANVAS","marginLeftX","paddingLeftX","marginRightX","marginY","canvasW","canvasH","deltaGridYf","DELTA","countOfNumber","Math","pow","Info","colorValue","mouseX","mouseY","setMouseHoverCanvas","infoValue","infoDate","deltaX","iMouseGrid","round","xMouseGrid","showInfo","styleInfo","red","green","indigo","styleValue","infoValueLabel","onMouseEnter","onMouseLeave","style","info","grey","cursor","boxShadow","fontWeight","countriesData","allValues","confirmed","byDay","values","total","recovered","deaths","mouseHoverCanvas","valuesCurrent","xPoint","yPoint","isInitialized","formValues","byDayOrTotal","statisticAC","statisticReducer","sort","b","i0","valuesConfirmedNew","valuesConfirmedTotal","valuesRecoveredNew","valuesRecoveredTotal","valuesDeathsNew","valuesDeathsTotal","Confirmed","Recovered","Deaths","valueMin","min","apply","filter","valueMax","max","deltaGridY","valueMinGrid","floor","valueMaxGrid","ceil","deltaY","canvasX","canvasY","iPoint","InfoContainer","statistic","CanvasPoint","setMouseXY","canvasRef","useRef","canvasCtxRef","useEffect","current","getContext","ctx","clearRect","fillStyle","fillRect","strokeStyle","lineWidth","setLineDash","beginPath","moveTo","lineTo","stroke","lineJoin","arc","PI","fill","canvasGraph","ref","height","onMouseMove","e","target","canvas","currentTarget","getBoundingClientRect","x","clientX","y","clientY","CanvasPointContainer","CanvasAxisMemo","memo","canvasAxisRef","canvasAxisCtxRef","canvasAxis","CanvasGraph","valuesCurrentFilter","yLineStart","valuePrev","valueNow","CanvasGraphContainer","Value","styleInline","transform","blueGrey","Values","valuesArr","topArr","valuesElements","ValuesContainer","Dates","leftArr","k","datesElements","DatesContainer","CanvasAll","valueIsExists","canvasBlock","canvasAll","CanvasContainer","StatisticFormRow","fieldTitle","elements","row","fieldName","typography","gridColumnGap","paddingRight","countryElements","Slug","periodElements","byDayOrTotalElements","caseTypeElements","StatisticForm","setFormValues","setPeriod","newFormValue","StatisticFormContainer","Statistic","StatisticAJAX","getInitial","prevProps","prevState","getValues","setCurrentValues","StatisticContainer","getCountriesResponse","dateEndJS","dateStartJS","dateStartAPI","getValuesByPeriodResponse","Home","HomeContainer","Main","main","exact","path","render","LangSwitcher","setLang","checked","wrapper","FormControlLabel","control","Switch","root","track","LangSwitcherContainer","Header","header","logo","menu","nav","to","navItem","activeClassName","active","textTransform","HeaderContainer","App","appWrapper","maxWidth","minHeight","flexDirection","rootReducer","combineReducers","formReducer","middleware","thunkMiddleware","store","createStore","composeWithDevTools","applyMiddleware","window","ErrorBoundary","errorInfo","setState","whiteSpace","toString","ReactDOM","CssBaseline","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.136b0c33.chunk.js","sourcesContent":["export const addCommaToNumber = (n: number): string => {\r\n    let nString: string = `${n}`;\r\n    let length = nString.length;\r\n    let result = '';\r\n    while (length > 3) {\r\n        result = '.' + nString.slice(length - 3) + result; // добавили к результату\r\n        nString = nString.slice(0, length - 3); //отрезали\r\n        length = length - 3;\r\n    }\r\n    result = nString + result;\r\n    return result;\r\n};","import React, {ReactElement} from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {addCommaToNumber} from \"../../../helpers/addCommaToNumber\";\r\n\r\nconst SummaryCasesItem: React.FC<PropsType> = (props: PropsType): ReactElement => {\r\n    const {color, caseType, value, icon} = props;\r\n    const classes = useStyles();\r\n\r\n    const useStylesInner = makeStyles({\r\n        type: {\r\n            flexGrow: 1,\r\n            paddingLeft: 5,\r\n            color: color\r\n        },\r\n        iconWrapper: {\r\n            color: color\r\n        }\r\n    });\r\n    const classesInner = useStylesInner();\r\n\r\n    return (\r\n        <div className={classes.item}>\r\n            <Typography variant='h6'\r\n                        className={classesInner.type}>\r\n                {caseType}\r\n            </Typography>\r\n\r\n            <div className={classes.valueWrapper}>\r\n                <div className={classesInner.iconWrapper}>\r\n                    {icon}\r\n                </div>\r\n\r\n                <Typography variant='h6' className={classes.value}>\r\n                    {addCommaToNumber(value)}\r\n                </Typography>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SummaryCasesItem;\r\n\r\n//===================== TYPE =================\r\ntype PropsType = {\r\n    color: string\r\n    caseType: string\r\n    value: number\r\n    icon: ReactElement\r\n}\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    valueWrapper: {\r\n        flexBasis: 180,\r\n        flexShrink: 0,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-start'\r\n    },\r\n    value: {\r\n        marginLeft: 10\r\n    }\r\n});","import {LangType} from \"../types/types\";\r\n\r\nexport const Translate: LangObjectType = {\r\n    'English': {\r\n        'eng': 'English',\r\n        'rus': 'Русский'\r\n    },\r\n    'Change language': {\r\n        'eng': 'Change language',\r\n        'rus': 'Сменить язык'\r\n    },\r\n    'Global': {\r\n        'eng': 'Global',\r\n        'rus': 'Весь мир'\r\n    },\r\n    'By country': {\r\n        'eng': 'By country',\r\n        'rus': 'Для страны'\r\n    },\r\n    'Confirmed new': {\r\n        'eng': 'Confirmed new',\r\n        'rus': 'Заболевших (за день)'\r\n    },\r\n    'Confirmed total': {\r\n        'eng': 'Confirmed total',\r\n        'rus': 'Заболевших (всего)'\r\n    },\r\n    'Deaths new': {\r\n        'eng': 'Deaths new',\r\n        'rus': 'Умерших (за день)'\r\n    },\r\n    'Deaths total': {\r\n        'eng': 'Deaths total',\r\n        'rus': 'Умерших (всего)'\r\n    },\r\n    'Recovered new': {\r\n        'eng': 'Recovered new',\r\n        'rus': 'Вылечившихся (за день)'\r\n    },\r\n    'Recovered total': {\r\n        'eng': 'Recovered total',\r\n        'rus': 'Вылечившихся (всего)'\r\n    },\r\n    'Home': {\r\n        'eng': 'Home',\r\n        'rus': 'Домой'\r\n    },\r\n    'Summary': {\r\n        'eng': 'Summary',\r\n        'rus': 'Суммарно'\r\n    },\r\n    'Statistic': {\r\n        'eng': 'Statistic',\r\n        'rus': 'Статистика'\r\n    },\r\n    '1 week': {\r\n        'eng': '1 week',\r\n        'rus': '1 неделя'\r\n    },\r\n    '2 week': {\r\n        'eng': '2 week',\r\n        'rus': '2 недели'\r\n    },\r\n    '30 days': {\r\n        'eng': '30 days',\r\n        'rus': '30 дней '\r\n    },\r\n    'By start': {\r\n        'eng': 'By start',\r\n        'rus': 'С начала'\r\n    },\r\n    'By day': {\r\n        'eng': 'By day',\r\n        'rus': 'За день'\r\n    },\r\n    'Total': {\r\n        'eng': 'Total',\r\n        'rus': 'Всего'\r\n    },\r\n    'Confirmed': {\r\n        'eng': 'Confirmed',\r\n        'rus': 'Заболевшие'\r\n    },\r\n    'Recovered': {\r\n        'eng': 'Recovered',\r\n        'rus': 'Вылечившиеся'\r\n    },\r\n    'Deaths': {\r\n        'eng': 'Deaths',\r\n        'rus': 'Умершие'\r\n    },\r\n    'Country': {\r\n        'eng': 'Country',\r\n        'rus': 'Страна'\r\n    },\r\n    'Period': {\r\n        'eng': 'Period',\r\n        'rus': 'Период'\r\n    },\r\n    'By day / Total': {\r\n        'eng': 'By day / Total',\r\n        'rus': 'За день / всего'\r\n    },\r\n    'Case type': {\r\n        'eng': 'Case type',\r\n        'rus': 'Тип'\r\n    },\r\n    'Coronavirus statistic': {\r\n        'eng': 'Coronavirus statistic',\r\n        'rus': 'Статистика коронавируса'\r\n    },\r\n};\r\n\r\n// const lang = useSelector(getLang);\r\n// {translate(lang, '')}\r\n\r\nexport const translate = (lang: LangType, phrase: string): string => {\r\n    return lang === 'rus' ? Translate[phrase].rus : Translate[phrase].eng\r\n};\r\n\r\ntype LangObjectType = {\r\n    [key: string]: {\r\n        'eng': string\r\n        'rus': string\r\n    }\r\n}\r\n\r\n","import React, {ReactElement} from 'react';\r\nimport SummaryCasesItem from \"./SummaryCasesItem\";\r\nimport {CountryCasesType, LangType} from \"../../../types/types\";\r\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport {translate} from \"../../../helpers/translate\";\r\n\r\n\r\nconst SummaryCases: React.FC<PropsType> = (props: PropsType): ReactElement => {\r\n    const {cases, lang} = props;\r\n\r\n    const color = ['darkred', 'darkred', 'darkblue', 'darkblue', 'darkgreen', 'darkgreen'];\r\n    const caseType = [\r\n        translate(lang, 'Confirmed new'),\r\n        translate(lang, 'Confirmed total'),\r\n        translate(lang, 'Deaths new'),\r\n        translate(lang, 'Deaths total'),\r\n        translate(lang, 'Recovered new'),\r\n        translate(lang, 'Recovered total')\r\n    ];\r\n    const icons = [\r\n        <LocalHospitalIcon/>, <LocalHospitalIcon/>,\r\n        <HighlightOffIcon/>, <HighlightOffIcon/>,\r\n        <FavoriteIcon/>, <FavoriteIcon/>\r\n    ];\r\n\r\n    const summaryKeys = cases && Object.keys(cases);\r\n    const SummaryCasesElements = cases && summaryKeys &&\r\n        summaryKeys.map((key, i) => <SummaryCasesItem key={key}\r\n                                                      value={cases[key as keyof CountryCasesType]}\r\n                                                      color={color[i]}\r\n                                                      caseType={caseType[i]}\r\n                                                      icon={icons[i]}\r\n            />\r\n        );\r\n\r\n    return (\r\n        <div>\r\n            {SummaryCasesElements}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SummaryCases;\r\n\r\n//===================== TYPE =================\r\ntype PropsType = {\r\n    cases: null | CountryCasesType\r\n    lang: LangType\r\n}","import {LangType} from \"../types/types\";\r\n\r\nexport const DATE = {\r\n    // получение текущей даты\r\n    // RETURN - JS DATE\r\n    getCurrentDate(): Date {\r\n        return new Date();\r\n    },\r\n\r\n    // перевод из формата js (Date) в формат API \"2020-07-09T00:00:00Z\"\r\n    dateJsToAPI(date: Date): string {\r\n        const year = date.getFullYear();\r\n        const month = date.getMonth() + 1;\r\n        let monthString: string;\r\n        if (month < 10) {\r\n            monthString = `0${month}`;\r\n        } else {\r\n            monthString = `${month}`;\r\n        }\r\n        let day = date.getDate();\r\n        let dayString: string;\r\n        if (day < 10) {\r\n            dayString = `0${day}`;\r\n        } else {\r\n            dayString = `${day}`;\r\n        }\r\n        return `${year}-${monthString}-${dayString}T00:00:00Z`;\r\n    },\r\n\r\n    // перевод даты из формата API ('2020-07-09T00:00:00Z') в формат js (Date)\r\n    dateAPIToJs(date: string): Date{\r\n       let year = +date.slice(0,4);\r\n       let month = +date.slice(5,7) - 1;\r\n       let day = +date.slice(8,10)\r\n       return new Date(year, month, day);\r\n    },\r\n\r\n    // определение даты начала периода (зависит от текущей последней) в формате API\r\n    getStartPeriodDate(period: number) {\r\n        // period = 7, 14, 30\r\n        // return = API\r\n        let endPeriodDateJS = this.getCurrentDate();\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - period * 24 * 60 * 60 * 1000);\r\n        return this.dateJsToAPI(startPeriodDateJS);\r\n    },\r\n\r\n    // определение актуальной даты начала периода (зависит от актуальной последней) в формате API\r\n    getStartPeriodDateActual(period: number, date: string) {\r\n        // date = dateEnd, API\r\n        // period = 7, 14, 30\r\n        // return = API\r\n        let endPeriodDateJS = this.dateAPIToJs(date);\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - period * 24 * 60 * 60 * 1000);\r\n        return this.dateJsToAPI(startPeriodDateJS);\r\n    },\r\n\r\n    // получение массива дат для canvas в формате 'DD.MM'\r\n    getDates(period: number, dateEnd: string) {\r\n        // dateEnd = API\r\n        let dates = [];\r\n        let endPeriodDateJS = this.dateAPIToJs(dateEnd);\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - (period - 1) * 24 * 60 * 60 * 1000);\r\n        for (let i = 0; i < period; i++){\r\n            let month = startPeriodDateJS.getMonth() + 1;\r\n            let monthString: string;\r\n            if (month < 10) {\r\n                monthString = `0${month}`;\r\n            } else {\r\n                monthString = `${month}`;\r\n            }\r\n            let day = startPeriodDateJS.getDate();\r\n            let dayString: string;\r\n            if (day < 10) {\r\n                dayString = `0${day}`;\r\n            } else {\r\n                dayString = `${day}`;\r\n            }\r\n            dates.push(`${dayString}.${monthString}`);\r\n            startPeriodDateJS = new Date(startPeriodDateJS.getTime() + 1 * 24 * 60 * 60 * 1000);\r\n        }\r\n        return dates;\r\n    },\r\n\r\n    // получить из числового обозначения месяца слово\r\n    getMonthWord(month: number, lang: LangType): string {\r\n        const monthArray = [\r\n            {'eng': \"January\", 'rus': 'Января'},\r\n            {'eng': \"February\", 'rus': 'Февраля'},\r\n            {'eng': \"March\", 'rus': 'Марта'},\r\n            {'eng': \"April\", 'rus': 'Апреля'},\r\n            {'eng': \"May\", 'rus': 'Мая'},\r\n            {'eng': \"June\", 'rus': 'Июня'},\r\n            {'eng': \"July\", 'rus': 'Июля'},\r\n            {'eng': \"August\", 'rus': 'Августа'},\r\n            {'eng': \"September\", 'rus': 'Сентября'},\r\n            {'eng': \"October\", 'rus': 'Октября'},\r\n            {'eng': \"November\", 'rus': 'Ноября'},\r\n            {'eng': \"December\", 'rus': 'Декабря'},\r\n        ];\r\n        return lang === 'eng' ? monthArray[month].eng : monthArray[month].rus\r\n    },\r\n\r\n    // перевод из '2020-07-09T00:00:00Z' в '7 сентября 2020'\r\n    dateTranslateFromAPI(date: string, lang: LangType): string {\r\n        const year = date.slice(0, 4);\r\n        const month = date.slice(5, 7);\r\n        const monthWord = this.getMonthWord(+month, lang);\r\n        const day = date[8] === '0' ? date.slice(9, 10) : date.slice(8, 10);\r\n        return `${day} ${monthWord} ${year}`\r\n    },\r\n\r\n    // \"2020-07-11T00:00:00Z\" ---> '07.11'\r\n    dateTranslateFromApiToGraph(date: string): string {\r\n        const day = date.slice(8, 10);\r\n        const month = date.slice(5, 7);\r\n        return `${day}.${month}`;\r\n    }\r\n\r\n}","import FormControl from \"@material-ui/core/FormControl\";\r\nimport React from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nconst renderSelectField = ({\r\n                               input,\r\n                               label,\r\n                               meta: {touched, error},\r\n                               children,\r\n                               ...custom\r\n                           }) => {\r\n    return (\r\n\r\n        <FormControl error={touched && error}>\r\n            <Select\r\n                native\r\n                {...input}\r\n                {...custom}\r\n                inputProps={{\r\n                    name: input.name,\r\n                    //id: 'color-native-simple'\r\n                }}\r\n            >\r\n                {children}\r\n            </Select>\r\n\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default renderSelectField;","import {ReactElement} from \"react\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm, submit} from \"redux-form\";\r\nimport renderSelectField from \"../../common/renderSelectField\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {SelectCurrentCountryPropsType} from \"./SelectCurrentCountryContainer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n//================================= FORM ===================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, countriesList} = props;\r\n    const classes = useStyles();\r\n    const optionElements = countriesList && countriesList\r\n        .map((el, i) => <option key={i}\r\n                                value={el}>\r\n                {el}\r\n            </option>\r\n        );\r\n    const dispatch = useDispatch();\r\n\r\n    const onChangeHandler = () => {\r\n        setTimeout(() => dispatch(submit('summary-country')));\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={classes.fieldWrapper}>\r\n                <Field name='country'\r\n                       component={renderSelectField}\r\n                       className={classes.selectField}\r\n                       onChange={onChangeHandler}\r\n                >\r\n                    {optionElements}\r\n                </Field>\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================ REDUX-FORM ====================================\r\nconst ReduxForm = reduxForm<FormValuesType, FormOwnPropsType>({\r\n    form: 'summary-country',\r\n})(Form);\r\n\r\n//=========================== COMPONENT =====================================\r\nconst SelectCurrentCountry: React.FC<ComponentPropsType> = (props: ComponentPropsType): ReactElement => {\r\n    const {setCurrentCountry, currentCountry, countriesList} = props;\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        setCurrentCountry(formValue.country);\r\n    };\r\n    const initialValues: FormValuesType = {\r\n        country: currentCountry\r\n    };\r\n    return (\r\n        <ReduxForm onSubmit={onSubmit}\r\n                   initialValues={initialValues}\r\n                   countriesList={countriesList}\r\n\r\n        />\r\n    )\r\n};\r\n\r\nexport default SelectCurrentCountry;\r\n\r\n//========================== TYPE ============================\r\ntype FormPropsType = InjectedFormProps<FormValuesType, FormOwnPropsType> & FormOwnPropsType;\r\ntype FormValuesType = {\r\n    country: string\r\n};\r\ntype FormOwnPropsType = {\r\n    countriesList: Array<string>\r\n}\r\ntype ComponentPropsType = SelectCurrentCountryPropsType;\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    fieldWrapper: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr',\r\n        marginBottom: 5\r\n    },\r\n    selectField: {\r\n        backgroundColor: 'white',\r\n        paddingLeft: 5,\r\n        width: '100%'\r\n    },\r\n});\r\n\r\n\r\n\r\n","import axios from \"axios\";\r\nimport {DATE} from \"../helpers/date\";\r\nimport {CountryCasesByDayType, CountryType, SummaryResponseType} from \"../types/types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.covid19api.com/'\r\n});\r\n\r\nexport const summaryAPI = {\r\n    async getSummary(){\r\n        const response = await instance.get<SummaryResponseType>('summary')\r\n        return response.data\r\n    }\r\n};\r\n\r\nexport const statisticAPI = {\r\n    // получить список названий стран\r\n    async getCountries(){\r\n        const response = await instance.get<Array<CountryType>>('countries')\r\n        return response.data\r\n    },\r\n    // получить значения для всех случаев, для конкретной страны, по дням, за период\r\n    async getValuesByPeriod(countrySlug: string, dateStart: string, dateEnd: string) {\r\n        const response = await instance.get<Array<CountryCasesByDayType>>(`total/country/${countrySlug}?from=${dateStart}&to=${dateEnd}`)\r\n        return response.data\r\n    },\r\n    // получение актуальной последней даты для конкретной страны (может не совпадать с текущей или вчерашней)\r\n    // запрашиваем значения начиная с позавчера до сегодня (для конкретной страны)\r\n    // и смотрим дату последнего значения\r\n    async getDateEnd(country: string){\r\n        let dateStart = DATE.getStartPeriodDate(2);\r\n        let dateEnd = DATE.dateJsToAPI(DATE.getCurrentDate());\r\n        const response = await instance.get<Array<CountryCasesByDayType>>(`total/country/${country}?from=${dateStart}&to=${dateEnd}`)\r\n        const dateEndAPI = response.data[response.data.length - 1].Date;//API\r\n        return dateEndAPI\r\n    },\r\n    // получить все типы для заданной страны с первого дня\r\n    async getValuesFromDayOne(country: string){\r\n        const response = await instance.get<Array<CountryCasesByDayType>>(`dayone/country/${country}`)\r\n        return response.data\r\n    }\r\n};","import {LangType} from \"../types/types\";\r\nimport {GetActionsType} from \"./store\";\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionsType = GetActionsType<typeof appAC>;\r\n\r\n\r\nlet initialState = {\r\n    globalError: null,\r\n    isLoading: false, // загрузка происходит?\r\n    lanError: false, // ошибка сети\r\n    lang: 'eng' as LangType // язык приложения\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_LANG':\r\n            console.log('APP/SET_LANG')\r\n            return {...state, lang: action.lang}\r\n\r\n        case 'APP/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'APP/SET_LAN_ERROR': {\r\n            return {...state, lanError: action.lanError}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    toggleLoading: (isLoading: boolean) => ({type: 'APP/TOGGLE_LOADING', isLoading} as const),\r\n    setLanError: (lanError: boolean) => ({type: 'APP/SET_LAN_ERROR', lanError} as const),\r\n    setLang: (lang: LangType) => ({type: 'APP/SET_LANG', lang} as const),\r\n};\r\n\r\nexport default appReducer;","import {summaryAPI} from \"../DAL/api\";\r\nimport {BaseThunkType, GetActionsType} from \"./store\";\r\nimport {CountryCasesType, SummaryCountryType} from \"../types/types\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nlet initialState = {\r\n    date: '', // последняя актуальная дата сбора данных (из API)\r\n    summaryCases: null as null | CountryCasesType, // объект значений суммарного (по всему миру) числа случаев\r\n    countriesCases: null as null | Array<SummaryCountryType>,// массив информации по странам\r\n    countriesList: [] as Array<string>, //список названий стран\r\n    currentCountry: \"Russian Federation\" // название выбранной страны\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype SummaryActionsType = GetActionsType<typeof summaryAC>\r\ntype ThunkType = BaseThunkType<SummaryActionsType | AppActionsType>\r\n\r\nconst summaryReducer = (state = initialState, action: SummaryActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SUMMARY/SET_DATE': {\r\n            return {...state, date: action.date}\r\n        }\r\n        case 'SUMMARY/SET_SUMMARY_CASES': {\r\n           return {...state, summaryCases: action.summaryCases}\r\n        }\r\n        case 'SUMMARY/SET_COUNTRIES_CASES': {\r\n            return {...state, countriesCases: action.countriesCases}\r\n        }\r\n        case 'SUMMARY/SET_CURRENT_COUNTRY': {\r\n            return {...state, currentCountry: action.country};\r\n        }\r\n        case 'SUMMARY/SET_COUNTRIES_LIST': {\r\n            let countriesList = [];\r\n            for (let i = 0; i < action.countriesCases.length; i++) {\r\n                countriesList.push(action.countriesCases[i].Country);\r\n            }\r\n            return {...state, countriesList: countriesList};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const summaryAC = {\r\n    setDate: (date: string) => ({type: 'SUMMARY/SET_DATE', date} as const),\r\n    setSummaryCases: (summaryCases: CountryCasesType) => ({type: 'SUMMARY/SET_SUMMARY_CASES', summaryCases} as const),\r\n    setCountriesCases: (countriesCases: Array<SummaryCountryType>) => ({type: 'SUMMARY/SET_COUNTRIES_CASES', countriesCases} as const),\r\n    setCurrentCountry: (country: string) => ({type: 'SUMMARY/SET_CURRENT_COUNTRY', country} as const),\r\n    setCountriesList: (countriesCases: Array<SummaryCountryType>) => ({type: 'SUMMARY/SET_COUNTRIES_LIST', countriesCases} as const),\r\n };\r\n\r\nexport const getSummary = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await summaryAPI.getSummary();\r\n                dispatch(summaryAC.setDate(data.Date));\r\n                dispatch(summaryAC.setSummaryCases(data.Global));\r\n                dispatch(summaryAC.setCountriesCases(data.Countries));\r\n                dispatch(summaryAC.setCountriesList(data.Countries));\r\n    } catch (e) {\r\n        console.log(e)\r\n        appAC.setLanError(true);\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n\r\n};\r\n\r\nexport default summaryReducer;\r\n\r\n","import {StateType} from \"../../../store/store\";\r\nimport {connect} from \"react-redux\";\r\nimport SelectCurrentCountry from \"./SelectCurentCountry\";\r\nimport {summaryAC} from \"../../../store/summary-reducer\";\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    summaryCases: state.summary.summaryCases,\r\n    countriesList: state.summary.countriesList,\r\n    currentCountry: state.summary.currentCountry\r\n});\r\n\r\n\r\nconst setCurrentCountry = summaryAC.setCurrentCountry;\r\nconst SelectCurrentCountryContainer = connect<MapStatePropsType, MapDispatchPropsType,\r\n    OwnPropsType, StateType>\r\n(mapStateToProps, {setCurrentCountry})(SelectCurrentCountry);\r\n\r\nexport default SelectCurrentCountryContainer;\r\n\r\n//============== TYPE ========================\r\nexport type SelectCurrentCountryPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    countriesList: Array<string>\r\n    currentCountry: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    setCurrentCountry: (currentCountry: string) => void\r\n}\r\ntype OwnPropsType = {}","import {CircularProgress} from \"@material-ui/core\";\r\nimport React, {ReactElement} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n//======================= COMPONENT ===============================\r\nconst Preloader: React.FC = (): ReactElement => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.circularWrapper}>\r\n            <CircularProgress size={200} color='primary' />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader;\r\n\r\n//============================ STYLES =======================================================\r\nconst useStyles = makeStyles({\r\n    circularWrapper: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: 1001\r\n    }\r\n});\r\n","import React, {ReactElement} from 'react';\r\nimport SummaryCases from \"./SummaryCases\";\r\nimport {CountryCasesType, LangType, SummaryCountryType} from \"../../../types/types\";\r\nimport {translate} from \"../../../helpers/translate\";\r\nimport {DATE} from \"../../../helpers/date\";\r\nimport SelectCurrentCountryContainer from \"./SelectCurrentCountryContainer\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport Preloader from \"../../common/Preloader\";\r\nimport clsx from \"clsx\";\r\n\r\nconst Summary: React.FC<PropsType> = (props: PropsType): ReactElement => {\r\n    const {date, summaryCases, isLoading, lang, countriesCases, currentCountry} = props;\r\n    const classes = useStyles();\r\n    const currentCasesFull = countriesCases && countriesCases.find(el => el.Country === currentCountry)\r\nconst currentCases = (currentCasesFull && {\r\n    NewConfirmed: currentCasesFull.NewConfirmed,\r\n    TotalConfirmed: currentCasesFull.TotalConfirmed,\r\n    NewDeaths: currentCasesFull.NewDeaths,\r\n    TotalDeaths: currentCasesFull.TotalDeaths,\r\n    NewRecovered: currentCasesFull.NewRecovered,\r\n    TotalRecovered: currentCasesFull.TotalRecovered\r\n}) as null | CountryCasesType;\r\n    if (isLoading) return <Preloader/>;\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.blocks}>\r\n                <div className={classes.block}>\r\n                    <div className={clsx(classes.titleWrapper, classes.titleWrapper1)}>\r\n                        <Typography variant='h5' align='center'>\r\n                            {translate(lang, 'Global')}\r\n                        </Typography>\r\n                    </div>\r\n                    <SummaryCases cases={summaryCases} lang={lang}/>\r\n                </div>\r\n                <div className={classes.block}>\r\n                    <div className={classes.titleWrapper}>\r\n                        <Typography variant='h5' align='center'>\r\n                            {translate(lang, 'By country')}\r\n                        </Typography>\r\n                    </div>\r\n                    <div>\r\n                        <SelectCurrentCountryContainer/>\r\n\r\n                    </div>\r\n                    <SummaryCases cases={currentCases} lang={lang}/>\r\n                </div>\r\n            </div>\r\n            <Typography variant='subtitle1' align='center'>\r\n                {DATE.dateTranslateFromAPI(date, lang)}\r\n            </Typography>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Summary;\r\n\r\n//================== TYPE ==================\r\ntype PropsType = {\r\n    date: string\r\n    summaryCases: null | CountryCasesType\r\n    isLoading: boolean\r\n    lang: LangType\r\n    countriesCases: null | Array<SummaryCountryType>\r\n    currentCountry: string\r\n}\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    blocks: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr 1fr',\r\n        gridGap: 20,\r\n        margin: '0 20px 10px'\r\n    },\r\n    block: {\r\n        border: '1px solid #fff',\r\n        borderRadius: 10,\r\n        padding: 10\r\n    },\r\n    titleWrapper: {\r\n        marginBottom: 10,\r\n        padding: '5px 0',\r\n        border: '1px solid #fff',\r\n        borderRadius: 10,\r\n    },\r\n    titleWrapper1: {\r\n        marginBottom: 47\r\n    }\r\n});\r\n","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport Summary from \"./Summary\";\r\nimport {getSummary} from \"../../../store/summary-reducer\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {CountryCasesType, LangType, SummaryCountryType} from \"../../../types/types\";\r\n\r\nclass SummaryAJAX extends React.Component<SummaryPropsType, {}> {\r\n    componentDidMount() {\r\n        this.props.getSummary();\r\n    }\r\n\r\n    render() {\r\n        const {getSummary, ...other} = this.props\r\n        return <Summary {...other}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    date: state.summary.date,\r\n    summaryCases: state.summary.summaryCases,\r\n    isLoading: state.app.isLoading,\r\n    lang: state.app.lang,\r\n    countriesCases: state.summary.countriesCases,\r\n    currentCountry: state.summary.currentCountry\r\n});\r\n\r\nconst SummaryContainer = connect<MapStatePropsType, MapDispatchPropsType,\r\n    OwnPropsType, StateType>\r\n(mapStateToProps, {getSummary})(SummaryAJAX);\r\n\r\nexport default SummaryContainer;\r\n\r\n//============== TYPE ========================\r\ntype SummaryPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    date: string\r\n    summaryCases: null | CountryCasesType\r\n    isLoading: boolean\r\n    lang: LangType\r\n    countriesCases: null | Array<SummaryCountryType>\r\n    currentCountry: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    getSummary: () => void\r\n}\r\ntype OwnPropsType = {}","export const CANVAS = {\r\n    marginLeftX: 30,\r\n    paddingLeftX: 30,\r\n    marginRightX: 30,\r\n    marginY: 30, // вниз\r\n    canvasW: function (): number {\r\n        return 800 + this.marginLeftX + this.paddingLeftX + this.marginRightX\r\n    },\r\n    canvasH: function (): number {\r\n        return 300 + this.marginY\r\n    },\r\n    deltaGridYf(DELTA: number): number {\r\n        const DELTAString = `${DELTA}`;\r\n        const countOfNumber = DELTAString.length;\r\n        const topNumber = Math.pow(10, countOfNumber);\r\n        if (DELTA > topNumber / 2) {\r\n            return Math.pow(10, countOfNumber - 1);\r\n        } else {\r\n            return Math.pow(10, countOfNumber - 1) / 2;\r\n        }\r\n        // if (DELTA <= 10) {\r\n        //     return 1;\r\n        // } else if (DELTA > 10 && DELTA <= 50) {\r\n        //     return 5;\r\n        // } else if (DELTA > 50 && DELTA <= 100) {\r\n        //     return 10;\r\n        // } else if (DELTA > 100 && DELTA <= 500) {\r\n        //     return 50;\r\n        // } else if (DELTA > 500 && DELTA <= 1000) {\r\n        //     return 100;\r\n        // } else if (DELTA > 1000 && DELTA <= 5000) {\r\n        //     return 500;\r\n        // } else if (DELTA > 5000 && DELTA <= 10000) {\r\n        //     return 1000;\r\n        // } else if (DELTA > 10000 && DELTA <= 50000) {\r\n        //     return 5000;\r\n        // } else if (DELTA > 50000 && DELTA <= 100000) {\r\n        //     return 10000;\r\n        // } else if (DELTA > 100000 && DELTA <= 500000) {\r\n        //     return 50000;\r\n        // } else if (DELTA > 500000 && DELTA <= 1000000) {\r\n        //     return 100000;\r\n        // } else if (DELTA > 1000000 && DELTA <= 5000000) {\r\n        //     return 500000;\r\n        // } else if (DELTA > 5000000 && DELTA <= 10000000) {\r\n        //     return 1000000;\r\n        // } else return 1000000;\r\n\r\n    }\r\n};","import React, {ReactElement} from 'react';\r\nimport {CANVAS} from \"../../../../../helpers/canvas\";\r\nimport {InfoType} from \"./InfoContainer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport {addCommaToNumber} from \"../../../../../helpers/addCommaToNumber\";\r\n\r\nconst Info: React.FC<InfoType> = (props: InfoType): ReactElement => {\r\n    const {period, mouseX, mouseY, caseType, setMouseHoverCanvas, infoValue, infoDate} = props;\r\n    const classes = useStyles();\r\n    let left: number;\r\n    const deltaX = (CANVAS.canvasW() - CANVAS.marginLeftX - CANVAS.marginRightX - CANVAS.paddingLeftX) / (period - 1);\r\n    let canvasX = (i: number) => {\r\n        return CANVAS.marginLeftX + CANVAS.paddingLeftX + i * deltaX;\r\n    };\r\n    let iMouseGrid = Math.round((mouseX - CANVAS.paddingLeftX - CANVAS.marginLeftX) / deltaX);\r\n    let xMouseGrid = iMouseGrid && canvasX(iMouseGrid);\r\n    // курсор в границах графика\r\n    const showInfo = (mouseX > CANVAS.marginLeftX + CANVAS.paddingLeftX)\r\n        && (mouseX < CANVAS.canvasW() - CANVAS.marginRightX);\r\n    left = xMouseGrid;\r\n    let styleInfo = {\r\n        top: mouseY - 50,\r\n        left: left + 10\r\n    };\r\n    let colorValue;\r\n    if (caseType === 'confirmed') colorValue = red[600];\r\n    if (caseType === 'recovered') colorValue = green[600];\r\n    if (caseType === 'deaths') colorValue = indigo[600];\r\n    let styleValue = {\r\n        color: colorValue\r\n    };\r\n\r\n    let onMouseEnter = () => {\r\n        setMouseHoverCanvas(true);\r\n    };\r\n\r\n    let onMouseLeave = () => {\r\n        setMouseHoverCanvas(false);\r\n    };\r\n\r\n    const infoValueLabel: string = infoValue\r\n        ? addCommaToNumber(infoValue)\r\n        : 'No data';\r\n\r\n    return (\r\n        <>\r\n            {\r\n                showInfo &&\r\n                <div onMouseEnter={onMouseEnter}\r\n                     onMouseLeave={onMouseLeave}\r\n                     style={styleInfo}\r\n                     className={classes.info}>\r\n\r\n                    <Typography variant='body1'\r\n                                style={styleValue}\r\n                                className={classes.value}\r\n                    >\r\n                        {infoValueLabel}\r\n                    </Typography>\r\n\r\n                    <Typography variant='body1'\r\n                                color='textPrimary'\r\n                    >\r\n                        {infoDate}\r\n                    </Typography>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Info;\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    info: {\r\n        position: 'absolute',\r\n        backgroundColor: grey[50],\r\n        zIndex: 101,\r\n        cursor: 'default',\r\n        padding: '2px 5px',\r\n        boxShadow: '2px 2px 2px 2px rgba(0, 0, 0, 0.5)',\r\n    },\r\n    value: {\r\n        fontWeight: 700\r\n    }\r\n});","import {statisticAPI} from \"../DAL/api\";\r\nimport {DATE} from \"../helpers/date\";\r\nimport {CANVAS} from \"../helpers/canvas\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {BaseThunkType, GetActionsType} from \"./store\";\r\nimport {\r\n    ByDayOrTotalType,\r\n    CaseTypeType,\r\n    CountryCasesByDayType,\r\n    CountryType,\r\n    PeriodType,\r\n    StatisticFormValuesType,\r\n    typeType\r\n} from \"../types/types\";\r\n\r\nlet initialState = {\r\n    countriesData: null as null | Array<CountryType>, // Список названий стран, слагов стран и ISO2\r\n    period: 14, // результирующее значение для всех типов (в днях): formValues.period | periodByFirstDay ---> period\r\n    dateEnd: null as null | string, // последняя актуальная дата (в формате API)\r\n    dates: [] as Array<string>,// массив дат в формате DD.MM\r\n    allValues: {\r\n        confirmed: {\r\n            byDay: {values: [] as Array<number | null>},// массив значений (по дням) - подтвержденные - за день\r\n            total: {values: [] as Array<number | null>},// массив значений (по дням) - подтвержденные - общее количество\r\n        },\r\n        recovered: {\r\n            byDay: {values: [] as Array<number | null>},// массив значений (по дням) - вылеченные - за день\r\n            total: {values: [] as Array<number | null>},// массив значений (по дням) - вылеченные - общее количество\r\n        },\r\n        deaths: {\r\n            byDay: {values: [] as Array<number | null>},// массив значений (по дням) - умершие - за день\r\n            total: {values: [] as Array<number | null>},// массив значений (по дням) - умершие - общее количество\r\n        },\r\n    },\r\n    mouseX: 0, // координаты курсора относительно Canvas (меняются когда курсор над Canvas)\r\n    mouseY: 0, // координаты курсора относительно Canvas\r\n    mouseHoverCanvas: false, // курсор над канвасом,\r\n    // valuesCurrent зависит от country, period, byDayOrTotal и caseType\r\n    // при изменении country или period - загрузка с сервера - getValues (getInitial - при инициализации)\r\n    // при неизменности country или period и изменении byDayOrTotal или caseType - получить из стора - setCurrentValues\r\n    valuesCurrent: [] as Array<number | null>, // массив значений текущего выбранного типа\r\n    showInfo: false, // показывать или нет модальное окно со значением\r\n    infoValue: null as null | number, // выводимое в модальном окне значение\r\n    infoDate: null as null | string, // выводимая в модальном окне дата\r\n    xPoint: 0, // координаты точки на графике и линии\r\n    yPoint: 0 as number | null,  // координаты точки на графике и линии\r\n    isInitialized: false, // инициализация: список стран, крайняя дата, значения для параметров ворму по умолчанию\r\n    formValues: { // значения из формы\r\n        country: 'russia',\r\n        period: '14' as PeriodType, // '7', '14', '30', '-1' (с начала)\r\n        byDayOrTotal: 'byDay' as typeType,\r\n        caseType: 'confirmed' as CaseTypeType,\r\n    },\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype StatisticActionsType = GetActionsType<typeof statisticAC>\r\ntype ThunkType = BaseThunkType<StatisticActionsType | AppActionsType>\r\n\r\nconst statisticReducer = (state = initialState, action: StatisticActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'statistic/SET_INITIALIZED': {\r\n            return {...state, isInitialized: true}\r\n        }\r\n        case 'statistic/SET_FORM_VALUES': {\r\n            return {...state, formValues: action.formValues}\r\n        }\r\n        case 'statistic/SET_COUNTRIES_DATA': {\r\n            action.countriesData.sort((a, b) => {\r\n                if (a.Country > b.Country) {\r\n                    return 1;\r\n                }\r\n                if (a.Country < b.Country) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            });\r\n            return {...state, countriesData: action.countriesData};\r\n        }\r\n        case 'statistic/SET_PERIOD': {\r\n            return {...state, period: action.period}\r\n        }\r\n        case 'statistic/SET_DATE_END': { // установка актуальной даты конца периода\r\n            return {...state, dateEnd: action.dateEnd} //, dates: dates\r\n        }\r\n        case 'statistic/SET_DATES': { // установка массив дат в формате DD.MM для canvas\r\n            let dates = [] as Array<string>;\r\n            // если period=7,14,30, длина массива данных равно period + 1 для получения значений разницы (за один день)\r\n            const i0 = action.values.length <= 31 ? 1 : 0; //индекс начала итерации\r\n            for (let i = i0; i < action.values.length; i++) { // заполнение  массива dates\r\n                dates.push(DATE.dateTranslateFromApiToGraph(action.values[i].Date));// \"2020-07-11T00:00:00Z\" ---> '07.11'\r\n            }\r\n            return {...state, dates: dates}\r\n        }\r\n        case 'statistic/SET_VALUES': {\r\n            let valuesConfirmedNew = [] as Array<number | null>;\r\n            let valuesConfirmedTotal = [] as Array<number | null>;\r\n            let valuesRecoveredNew = [] as Array<number | null>;\r\n            let valuesRecoveredTotal = [] as Array<number | null>;\r\n            let valuesDeathsNew = [] as Array<number | null>;\r\n            let valuesDeathsTotal = [] as Array<number | null>;\r\n            // если period=7,14,30, длина массива данных равно period+1 для получения значений разницы (за один день)\r\n            const i0 = action.values.length <= 31 ? 1 : 0; //индекс начала итерации\r\n            for (let i = i0; i < action.values.length; i++) {\r\n                if (i0 === 0 && i === 0) {\r\n                    valuesConfirmedNew.push(action.values[i].Confirmed);\r\n                    valuesConfirmedTotal.push(action.values[i].Confirmed);\r\n                    valuesRecoveredNew.push(action.values[i].Recovered);\r\n                    valuesRecoveredTotal.push(action.values[i].Recovered);\r\n                    valuesDeathsNew.push(action.values[i].Deaths);\r\n                    valuesDeathsTotal.push(action.values[i].Deaths);\r\n                } else {\r\n                    // проверка присланных данных на ошибки\r\n                    // может быть общее послед. меньше, чем общее предыдущее, тогда устанавливаем null\r\n                    if (action.values[i].Confirmed >= action.values[i - 1].Confirmed) {\r\n                        valuesConfirmedTotal.push(action.values[i].Confirmed);\r\n                        valuesConfirmedNew.push(action.values[i].Confirmed - action.values[i - 1].Confirmed);\r\n                    } else {\r\n                        valuesConfirmedTotal.push(null);\r\n                        valuesConfirmedNew.push(null);\r\n                    }\r\n\r\n                    if (action.values[i].Recovered >= action.values[i - 1].Recovered) {\r\n                        valuesRecoveredTotal.push(action.values[i].Recovered);\r\n                        valuesRecoveredNew.push(action.values[i].Recovered - action.values[i - 1].Recovered);\r\n                    } else {\r\n                        valuesRecoveredTotal.push(null);\r\n                        valuesRecoveredNew.push(null);\r\n                    }\r\n\r\n                    if (action.values[i].Deaths >= action.values[i - 1].Deaths) {\r\n                        valuesDeathsTotal.push(action.values[i].Deaths);\r\n                        valuesDeathsNew.push(action.values[i].Deaths - action.values[i - 1].Deaths);\r\n                    } else {\r\n                        valuesDeathsTotal.push(null);\r\n                        valuesDeathsNew.push(null);\r\n                    }\r\n                }\r\n            }\r\n            const allValues = {\r\n                confirmed: {\r\n                    byDay: {values: valuesConfirmedNew},\r\n                    total: {values: valuesConfirmedTotal},\r\n                },\r\n                recovered: {\r\n                    byDay: {values: valuesRecoveredNew},\r\n                    total: {values: valuesRecoveredTotal},\r\n                },\r\n                deaths: {\r\n                    byDay: {values: valuesDeathsNew},\r\n                    total: {values: valuesDeathsTotal},\r\n                },\r\n            };\r\n            // текущее выбранное\r\n            const valuesCurrent = allValues[action.caseType][action.byDayOrTotal].values;\r\n            return {\r\n                ...state,\r\n                valuesCurrent: valuesCurrent,\r\n                allValues: allValues\r\n            };\r\n        }\r\n        case 'statistic/SET_MOUSE_XY': {\r\n            let showInfo;\r\n            // определение надо ли показывать Info\r\n            if (action.mouseX > CANVAS.marginLeftX + CANVAS.paddingLeftX\r\n                && action.mouseX < CANVAS.canvasW() - CANVAS.marginRightX\r\n                && action.mouseY < CANVAS.canvasH() - CANVAS.marginY) {\r\n                showInfo = true;\r\n            } else {\r\n                showInfo = false;\r\n            }\r\n            // определение infoValue и infoDate, определение координат вертикальной линии и точки\r\n            const valueMin = Math.min.apply(null, (state.valuesCurrent as Array<number>).filter(el => el !== null)) as number;\r\n            const valueMax = Math.max.apply(null, (state.valuesCurrent as Array<number>).filter(el => el !== null)) as number;\r\n            const DELTA = valueMax - valueMin;\r\n            const deltaGridY = CANVAS.deltaGridYf(DELTA); // шаг координатной сетки по оси Y\r\n            const valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);\r\n            const valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);\r\n            const deltaX = (CANVAS.canvasW() - CANVAS.marginLeftX - CANVAS.marginRightX - CANVAS.paddingLeftX) / (state.period - 1);\r\n            const deltaY = (CANVAS.canvasH() - CANVAS.marginY) / (valueMaxGrid - valueMinGrid);\r\n            const canvasX = (i: number): number => {\r\n                return CANVAS.marginLeftX + CANVAS.paddingLeftX + i * deltaX;\r\n            };\r\n            const canvasY = (value: number): number => {\r\n                return CANVAS.canvasH() - CANVAS.marginY - deltaY * (value - valueMinGrid);\r\n            };\r\n            const iPoint = Math.round((action.mouseX - CANVAS.paddingLeftX - CANVAS.marginLeftX) / deltaX);\r\n            const xPoint = canvasX(iPoint);// координата вертикальной линии и точки\r\n            let yPoint;// координата точки\r\n            if ((state.valuesCurrent as Array<number>)[iPoint] !== null) {\r\n                yPoint = canvasY((state.valuesCurrent as Array<number>)[iPoint]);\r\n            } else {\r\n                yPoint = null;\r\n            }\r\n            let infoValue: number | null | string = (state.valuesCurrent as Array<number | null>)[iPoint];\r\n            // if (infoValue === null) {\r\n            //     infoValue = 'no data';\r\n            // }\r\n            const infoDate = state.dates && state.dates[iPoint];\r\n            return {\r\n                ...state, mouseX: action.mouseX, mouseY: action.mouseY,\r\n                showInfo: showInfo, infoValue: infoValue, infoDate: infoDate,\r\n                xPoint: xPoint, yPoint: yPoint\r\n            }\r\n        }\r\n        case 'statistic/SET_MOUSE_HOVER_CANVAS': {\r\n            return {...state, mouseHoverCanvas: action.mouseHoverCanvas}\r\n        }\r\n        case 'statistic/SET_CURRENT_VALUES': {\r\n            const valuesCurrent = state.allValues[action.caseType][action.byDayOrTotal].values;\r\n            return {...state, valuesCurrent: valuesCurrent}\r\n        }\r\n        case 'statistic/SET_SHOW_INFO': {\r\n            return {...state, showInfo: action.showInfo}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const statisticAC = {\r\n    setInitialized: () => ({type: 'statistic/SET_INITIALIZED'} as const),\r\n    setFormValues: (formValues: StatisticFormValuesType) => ({type: 'statistic/SET_FORM_VALUES', formValues} as const),\r\n    setCountriesData: (countriesData: Array<CountryType>) => ({\r\n        type: 'statistic/SET_COUNTRIES_DATA',\r\n        countriesData\r\n    } as const),\r\n    setPeriod: (period: number) => ({type: 'statistic/SET_PERIOD', period} as const),\r\n    setDateEnd: (dateEnd: string) => ({type: 'statistic/SET_DATE_END', dateEnd} as const),\r\n    setDates: (values: Array<CountryCasesByDayType>) => ({type: 'statistic/SET_DATES', values} as const),\r\n    setValues: (values: Array<CountryCasesByDayType>, byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType) => ({\r\n        type: 'statistic/SET_VALUES',\r\n        values,\r\n        byDayOrTotal,\r\n        caseType\r\n    } as const),\r\n    setMouseXY: (mouseX: number, mouseY: number) => ({type: 'statistic/SET_MOUSE_XY', mouseX, mouseY} as const),\r\n    setMouseHoverCanvas: (mouseHoverCanvas: boolean) => ({\r\n        type: 'statistic/SET_MOUSE_HOVER_CANVAS',\r\n        mouseHoverCanvas\r\n    } as const),\r\n    setCurrentValues: (byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType) => ({\r\n        type: 'statistic/SET_CURRENT_VALUES',\r\n        byDayOrTotal,\r\n        caseType\r\n    } as const),\r\n    setShowInfo: (showInfo: boolean) => ({type: 'statistic/SET_SHOW_INFO', showInfo} as const)\r\n};\r\n\r\n\r\n// 1 - получение списка стран, 2 - получение актуальной последней даты, 3 - получить значения\r\nexport const getInitial = (period: PeriodType, country: string, byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        // 1 - получение списка стран\r\n        const getCountriesResponse = await statisticAPI.getCountries()\r\n        dispatch(statisticAC.setCountriesData(getCountriesResponse));\r\n        // 2 - получение актуальной последней даты\r\n        const dateEndAPI = await statisticAPI.getDateEnd(country)\r\n        //let dateEndAPI = getDateEndResponse[getDateEndResponse.length - 1].Date;//API\r\n        dispatch(statisticAC.setDateEnd(dateEndAPI));\r\n        let dateEndJS = DATE.dateAPIToJs(dateEndAPI);\r\n        // массив values имеет длину period + 1 для определения величины за день\r\n        // valuesDay[0] = valuesTotal[0] - valuesTotal[-1]\r\n        // для этого начальная дата в запросе меньше на день\r\n        let dateStartJS = new Date(dateEndJS.getTime() - (+period) * 24 * 60 * 60 * 1000);\r\n        let dateStartAPI = DATE.dateJsToAPI(dateStartJS);\r\n        // 3 - получить значения\r\n        const getValuesByPeriodResponse = await statisticAPI.getValuesByPeriod(country, dateStartAPI, dateEndAPI)\r\n        dispatch(statisticAC.setValues(getValuesByPeriodResponse, byDayOrTotal, caseType));\r\n        dispatch(statisticAC.setDates(getValuesByPeriodResponse)); // установить массив дат\r\n        // 4 - окончательно - проинициализировать\r\n        dispatch(statisticAC.setInitialized())\r\n    } catch (e) {\r\n        console.log(e);\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n\r\n}\r\n\r\nexport const getValues = (dateEnd: string, period: PeriodType, country: string, byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType): ThunkType => async (dispatch) => {\r\n    try {\r\n       console.log('getValues')\r\n        dispatch(appAC.toggleLoading(true));\r\n        if (period === '7' || period === '14' || period === '30') {\r\n            let dateEndJS = DATE.dateAPIToJs(dateEnd);\r\n            let dateStartJS = new Date(dateEndJS.getTime() - (+period) * 24 * 60 * 60 * 1000);\r\n            let dateStartAPI = DATE.dateJsToAPI(dateStartJS);\r\n            const data = await statisticAPI.getValuesByPeriod(country, dateStartAPI, dateEnd)\r\n            dispatch(statisticAC.setValues(data, byDayOrTotal, caseType)); // установить значения\r\n            dispatch(statisticAC.setDates(data)); // установить даты\r\n        } else { // period === '-1'\r\n            //console.log('getValuesFromDayOne')\r\n            const data = await statisticAPI.getValuesFromDayOne(country)\r\n            dispatch(statisticAC.setPeriod(data.length));\r\n            dispatch(statisticAC.setValues(data, byDayOrTotal, caseType)); // установить значения\r\n            dispatch(statisticAC.setDates(data)); // установить массив дат\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default statisticReducer;","import {connect} from \"react-redux\";\r\nimport Info from \"./Info\";\r\nimport {statisticAC} from \"../../../../../store/statistic-reducer\";\r\nimport {CaseTypeType} from \"../../../../../types/types\";\r\nimport {StateType} from \"../../../../../store/store\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType  => ({\r\n    mouseX: state.statistic.mouseX,\r\n    period: state.statistic.period,\r\n    caseType: state.statistic.formValues.caseType,\r\n    mouseY: state.statistic.mouseY,\r\n    infoValue: state.statistic.infoValue,\r\n    infoDate: state.statistic.infoDate\r\n});\r\n\r\nconst setMouseHoverCanvas = statisticAC.setMouseHoverCanvas;\r\nconst InfoContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,{setMouseHoverCanvas})(Info);\r\n\r\nexport default InfoContainer;\r\n\r\n//=================== TYPE ========================\r\ntype MapStatePropsType = {\r\n    mouseX: number\r\n    mouseY: number\r\n    period: number\r\n    caseType: CaseTypeType\r\n    infoValue: null | number\r\n    infoDate: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    setMouseHoverCanvas: (mouseHoverCanvas: boolean) => void\r\n}\r\nexport type InfoType = MapStatePropsType & MapDispatchPropsType;","import React, {ReactElement, useEffect, useRef} from \"react\";\r\nimport {CANVAS} from \"../../../../helpers/canvas\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {CanvasPointPropsType} from \"./CanvasPointContainer\";\r\n\r\nexport const CanvasPoint: React.FC<CanvasPointPropsType> = (props): ReactElement => {\r\n    const {\r\n        mouseHoverCanvas, mouseX, xPoint, yPoint,\r\n        caseType, showInfo, setMouseXY, setMouseHoverCanvas\r\n    } = props;\r\n    const classes = useStyles();\r\n\r\n    let canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    let canvasCtxRef = useRef<CanvasRenderingContext2D | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (canvasRef.current && mouseHoverCanvas && showInfo) {\r\n            const marginLeftX = CANVAS.marginLeftX;\r\n            const paddingLeftX = CANVAS.paddingLeftX;\r\n            const marginRightX = CANVAS.marginRightX;\r\n            const marginY = CANVAS.marginY;\r\n            const canvasW = CANVAS.canvasW();\r\n            const canvasH = CANVAS.canvasH();\r\n            canvasCtxRef.current = canvasRef.current.getContext('2d');\r\n            let ctx = canvasCtxRef.current;\r\n            ctx!.clearRect(0, 0, canvasW, canvasH);// очистка перед перерисовкой\r\n            ctx!.fillStyle = 'transparent';\r\n            ctx!.fillRect(0, 0, canvasW, canvasH);\r\n\r\n            // вертикальная линия\r\n            ctx!.strokeStyle = '#000000';\r\n            ctx!.lineWidth = 1;\r\n            ctx!.setLineDash([2, 1]);\r\n            ctx!.beginPath();\r\n\r\n            if (mouseX > marginLeftX + paddingLeftX\r\n                && mouseX < canvasW - marginRightX) {\r\n                ctx!.moveTo(xPoint, 0);\r\n                ctx!.lineTo(xPoint, canvasH - marginY);\r\n                ctx!.stroke();\r\n            }\r\n\r\n            // точка\r\n            if (yPoint !== null) {\r\n                let color = '000';\r\n                if (caseType === 'confirmed') color = 'red';\r\n                if (caseType === 'recovered') color = 'green';\r\n                if (caseType === 'deaths') color = 'blue';\r\n                ctx!.strokeStyle = color;\r\n                ctx!.lineWidth = 4;\r\n                ctx!.lineJoin = 'round';\r\n                ctx!.setLineDash([]);\r\n                ctx!.beginPath();\r\n                ctx!.arc(xPoint, yPoint, 3, 0, 2 * Math.PI);\r\n                ctx!.stroke();\r\n                ctx!.fillStyle = color;\r\n                ctx!.fill();\r\n            }\r\n\r\n        }\r\n    }, [mouseHoverCanvas, mouseX, xPoint, yPoint, caseType, showInfo]);\r\n\r\n    const onMouseEnter = () => {\r\n        setMouseHoverCanvas(true)\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        setMouseHoverCanvas(false)\r\n    };\r\n\r\n    const onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\r\n        if (e.target) {\r\n            const canvas: DOMRect = e.currentTarget.getBoundingClientRect();\r\n            const x = e.clientX - canvas.left\r\n            const y = e.clientY - canvas.top;\r\n            setMouseXY(x, y);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <canvas\r\n            className={classes.canvasGraph}\r\n            ref={canvasRef}\r\n            width={CANVAS.canvasW()}\r\n            height={CANVAS.canvasH()}\r\n            onMouseEnter={onMouseEnter}\r\n            onMouseLeave={onMouseLeave}\r\n            onMouseMove={onMouseMove}\r\n        />\r\n\r\n    )\r\n};\r\nexport default CanvasPoint;\r\n\r\n//======================= STYLE ===================\r\nconst useStyles = makeStyles({\r\n    canvasGraph: {\r\n        zIndex: 5,\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n    },\r\n});","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CaseTypeType} from \"../../../../types/types\";\r\n\r\nimport CanvasPoint from \"./CanvasPoint\";\r\nimport {statisticAC} from \"../../../../store/statistic-reducer\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    mouseHoverCanvas: state.statistic.mouseHoverCanvas,\r\n    mouseX: state.statistic.mouseX,\r\n    xPoint: state.statistic.xPoint,\r\n    yPoint: state.statistic.yPoint,\r\n    caseType: state.statistic.formValues.caseType,\r\n    showInfo: state.statistic.showInfo,\r\n});\r\n\r\nconst setMouseXY = statisticAC.setMouseXY;\r\nconst setMouseHoverCanvas = statisticAC.setMouseHoverCanvas;\r\nconst CanvasPointContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setMouseXY, setMouseHoverCanvas})(CanvasPoint);\r\n\r\nexport default CanvasPointContainer;\r\n\r\n//======================== TYPE ==========================\r\ntype MapStatePropsType = {\r\n    mouseHoverCanvas: boolean\r\n    mouseX: number\r\n    xPoint: number\r\n    yPoint: number | null\r\n    caseType: CaseTypeType\r\n    showInfo: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    setMouseXY: (mouseX: number, mouseY: number) => void\r\n    setMouseHoverCanvas: (mouseHoverCanvas: boolean) => void\r\n}\r\nexport type CanvasPointPropsType = MapStatePropsType & MapDispatchPropsType","import React, {ReactElement, useEffect, useRef} from \"react\";\r\nimport {CANVAS} from \"../../../../helpers/canvas\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\n\r\n\r\nexport const CanvasAxis: React.FC = (): ReactElement => {\r\n    const classes = useStyles();\r\n\r\n\r\n    let canvasAxisRef = useRef<HTMLCanvasElement | null>(null);\r\n    let canvasAxisCtxRef = React.useRef<CanvasRenderingContext2D | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (canvasAxisRef.current) {\r\n            const canvasW = CANVAS.canvasW();\r\n            const canvasH = CANVAS.canvasH();\r\n            canvasAxisCtxRef.current = canvasAxisRef.current.getContext('2d');\r\n            let ctx = canvasAxisCtxRef.current;\r\n            ctx!.clearRect(0, 0, canvasW, canvasH);\r\n            ctx!.fillStyle = '#fff';\r\n            ctx!.fillRect(0, 0, canvasW, canvasH);\r\n            ctx!.strokeStyle = '#aaa';\r\n            ctx!.lineWidth = 4;\r\n            ctx!.setLineDash([]);\r\n            ctx!.beginPath();\r\n            ctx!.moveTo(CANVAS.marginLeftX, 0);\r\n            ctx!.lineTo(CANVAS.marginLeftX, CANVAS.canvasH() - CANVAS.marginY);\r\n            ctx!.moveTo(CANVAS.marginLeftX, CANVAS.canvasH() - CANVAS.marginY);\r\n            ctx!.lineTo(CANVAS.canvasW(), CANVAS.canvasH() - CANVAS.marginY);\r\n            ctx!.stroke();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n\r\n            </div>\r\n        <canvas\r\n            className={classes.canvasAxis}\r\n            ref={canvasAxisRef}\r\n            width={CANVAS.canvasW()}\r\n            height={CANVAS.canvasH()}\r\n        />\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nconst CanvasAxisMemo = React.memo(CanvasAxis)\r\n\r\nexport default CanvasAxisMemo;\r\n\r\n//======================= STYLE ===================\r\nconst useStyles = makeStyles({\r\n    canvasAxis: {\r\n        zIndex: 3,\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n    },\r\n});","import React, {ReactElement, useEffect, useRef} from \"react\";\r\nimport {CANVAS} from \"../../../../helpers/canvas\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {CanvasGraphPropsType} from \"./CanvasGraphContainer\";\r\n\r\n\r\nexport const CanvasGraph: React.FC<CanvasGraphPropsType> = (props: CanvasGraphPropsType): ReactElement => {\r\n    const {\r\n        setMouseXY, setMouseHoverCanvas,\r\n        valuesCurrent, period, caseType\r\n    } = props;\r\n    const classes = useStyles();\r\n\r\n    let canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    let canvasCtxRef = React.useRef<CanvasRenderingContext2D | null>(null);\r\n\r\n    useEffect(() => {\r\n        const marginLeftX = CANVAS.marginLeftX;\r\n        const paddingLeftX = CANVAS.paddingLeftX;\r\n        const marginRightX = CANVAS.marginRightX;\r\n        const marginY = CANVAS.marginY;\r\n        const canvasW = CANVAS.canvasW();\r\n        const canvasH = CANVAS.canvasH();\r\n\r\n        if (canvasRef.current) {\r\n            canvasCtxRef.current = canvasRef.current.getContext('2d');\r\n            let ctx = canvasCtxRef.current;\r\n            ctx!.clearRect(0, 0, canvasW, canvasH);// очистка перед перерисовкой\r\n            ctx!.fillStyle = 'transparent';\r\n            ctx!.fillRect(0, 0, canvasW, canvasH);\r\n\r\n            const valuesCurrentFilter = valuesCurrent.filter(el => el) as Array<number>\r\n            const valueMin = Math.min.apply(null, valuesCurrentFilter);// минимальное значение из массива\r\n            const valueMax = Math.max.apply(null, valuesCurrentFilter);// максимальное значение из массива\r\n            const DELTA = valueMax - valueMin; // разница между макс и мин\r\n            const deltaX = (canvasW - marginLeftX - marginRightX - paddingLeftX) / (period - 1);// коэффициэнт перевода в масштаб канваса по оси X\r\n            let canvasX = (i: number): number => {// функция пересчета значения X i-го элемента массива в масштаб канваса\r\n                return marginLeftX + paddingLeftX + i * deltaX;\r\n            };\r\n\r\n            let deltaGridY: number, valueMinGrid: number, valueMaxGrid: number, deltaY: number;\r\n            if (DELTA !== 0) {\r\n                deltaGridY = CANVAS.deltaGridYf(DELTA); // шаг координатной сетки по оси Y\r\n                valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);// значение по сетке, ограничивающее график снизу\r\n                valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);// значение по сетке, ограничивающее график сверху\r\n                deltaY = (canvasH - marginY) / (valueMaxGrid - valueMinGrid);// коэффициэнт перевода в масштаб канваса по оси Y\r\n\r\n                let canvasY = (value: number): number => {// функция пересчета значения Y i-го элемента массива в масштаб канваса\r\n                    return canvasH - marginY - deltaY * (value - valueMinGrid);\r\n                };\r\n\r\n                //горизонтальные линии\r\n                ctx!.strokeStyle = '#cccccc';\r\n                ctx!.lineWidth = 1;\r\n                ctx!.setLineDash([]);\r\n                let yLineStart = valueMinGrid;\r\n                while (true) {\r\n                    ctx!.beginPath();\r\n                    ctx!.moveTo(marginLeftX, canvasY(yLineStart));\r\n                    ctx!.lineTo(canvasW, canvasY(yLineStart));\r\n                    ctx!.stroke();\r\n                    yLineStart += deltaGridY;\r\n                    if (yLineStart > valueMaxGrid) {\r\n                        break\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                deltaGridY = 1;\r\n                valueMinGrid = valueMin;\r\n                valueMaxGrid = valueMax;\r\n            }\r\n\r\n            let canvasY = (value: number): number => {\r\n                if (DELTA !== 0) {\r\n                    return canvasH - marginY - deltaY * (value - valueMinGrid);\r\n                } else {\r\n                    return (canvasH) / 2 - marginY;\r\n                }\r\n            }\r\n\r\n            // график 'confirmed', 'recovered', 'deaths'\r\n            if (caseType === 'confirmed') ctx!.strokeStyle = 'red';\r\n            if (caseType === 'recovered') ctx!.strokeStyle = 'green';\r\n            if (caseType === 'deaths') ctx!.strokeStyle = 'blue';\r\n            ctx!.lineWidth = 3;\r\n            ctx!.setLineDash([]);\r\n            for (let i = 0; i < period; i++) {\r\n                if (i === 0) {\r\n                    ctx!.beginPath();\r\n                    if (valuesCurrent[0] !== null) {\r\n                        ctx!.moveTo(canvasX(i), canvasY(valuesCurrent[0]));\r\n                    } else {\r\n                        ctx!.moveTo(canvasX(i), canvasY(valueMinGrid))\r\n                    }\r\n\r\n                }\r\n                if (i > 0) {\r\n                    const valuePrev = valuesCurrent[i-1];\r\n                    const valueNow = valuesCurrent[i];\r\n\r\n                    if (valuePrev !== null && valueNow !== null) {\r\n                        ctx!.lineTo(canvasX(i), canvasY(valueNow));\r\n                    }\r\n                    if (valuePrev !== null && valueNow === null) {\r\n                        ctx!.lineTo(canvasX(i - 1), canvasY(valueMinGrid));\r\n                        ctx!.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                    }\r\n                    if (valuePrev == null && valueNow !== null) {\r\n                        ctx!.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                        ctx!.lineTo(canvasX(i), canvasY(valueNow));\r\n                    }\r\n                    if (valuePrev == null && valuesCurrent[i] == null) {\r\n                        ctx!.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                    }\r\n                }\r\n                if (i === period - 1) {\r\n                    ctx!.stroke();\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n    }, [valuesCurrent, period, caseType]);\r\n\r\n    const onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\r\n        if (e.target) {\r\n            const canvas: DOMRect = e.currentTarget.getBoundingClientRect();\r\n            const x = e.clientX - canvas.left\r\n            const y = e.clientY - canvas.top;\r\n            setMouseXY(x, y);\r\n        }\r\n    };\r\n\r\n    const onMouseEnter = () => {\r\n        setMouseHoverCanvas(true)\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        setMouseHoverCanvas(false)\r\n    };\r\n\r\n    return (\r\n        <canvas\r\n            className={classes.canvasGraph}\r\n            ref={canvasRef}\r\n            width={CANVAS.canvasW()}\r\n            height={CANVAS.canvasH()}\r\n            onMouseMove={onMouseMove}\r\n            onMouseEnter={onMouseEnter}\r\n            onMouseLeave={onMouseLeave}\r\n\r\n        />\r\n\r\n    )\r\n};\r\nexport default CanvasGraph;\r\n\r\n//======================= STYLE ===================\r\nconst useStyles = makeStyles({\r\n    canvasGraph: {\r\n        zIndex: 4,\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n    },\r\n});","import {connect} from \"react-redux\";\r\nimport {statisticAC} from \"../../../../store/statistic-reducer\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CaseTypeType} from \"../../../../types/types\";\r\nimport CanvasGraph from \"./CanvasGraph\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    period: state.statistic.period,\r\n    valuesCurrent: state.statistic.valuesCurrent,\r\n    caseType: state.statistic.formValues.caseType\r\n});\r\n\r\nconst setMouseXY = statisticAC.setMouseXY;\r\nconst setMouseHoverCanvas = statisticAC.setMouseHoverCanvas;\r\nconst CanvasGraphContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setMouseXY, setMouseHoverCanvas})(CanvasGraph);\r\n\r\nexport default CanvasGraphContainer;\r\n\r\n//======================== TYPE ==========================\r\ntype MapStatePropsType = {\r\n    period: number\r\n    valuesCurrent: Array<number | null>\r\n    caseType: CaseTypeType\r\n}\r\ntype MapDispatchPropsType = {\r\n    setMouseXY: (mouseX: number, mouseY: number) => void\r\n    setMouseHoverCanvas: (mouseHoverCanvas: boolean) => void\r\n}\r\nexport type CanvasGraphPropsType = MapStatePropsType & MapDispatchPropsType","import React from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {addCommaToNumber} from \"../../../../../helpers/addCommaToNumber\";\r\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\n\r\nconst Value: React.FC<PropsType> = (props: PropsType) => {\r\n    const {top, left, value} = props;\r\n    const classes = useStyles();\r\n    let styleInline = {top: top, left: left}\r\n    return (\r\n        <div className={classes.value} style={styleInline}>\r\n            {addCommaToNumber(value)}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Value;\r\n\r\n//====================== TYPE ==========================\r\ntype PropsType = {\r\n    top: number\r\n    left: number\r\n    value: number\r\n}\r\n//======================= STYLE =======================\r\nconst useStyles = makeStyles({\r\n    value: {\r\n        position: 'absolute',\r\n        transform: 'translate(-100%, -50%)',\r\n        backgroundColor: blueGrey[600],\r\n        color: grey[50],\r\n        zIndex: 100,\r\n        padding: '2px 4px',\r\n        borderRadius: 1\r\n    },\r\n});","import React, {ReactElement} from 'react';\r\nimport Value from \"./Value\";\r\nimport {CANVAS} from \"../../../../../helpers/canvas\";\r\nimport {ValuesPropsType} from \"./ValuesContainer\";\r\n\r\nconst Values: React.FC<ValuesPropsType> = (props: ValuesPropsType): ReactElement => {\r\n    const {valuesCurrent} = props;\r\n\r\n    const marginY = CANVAS.marginY;\r\n    const canvasH = CANVAS.canvasH();\r\n\r\n    const valuesCurrentFilter = valuesCurrent.filter(el => el) as Array<number>\r\n    const valueMin = Math.min.apply(null, valuesCurrentFilter);// минимальное значение из массива\r\n    const valueMax = Math.max.apply(null, valuesCurrentFilter);// максимальное значение из массива\r\n    const DELTA = valueMax - valueMin; // разница между макс и мин\r\n\r\n    let deltaGridY: number; // шаг координатной сетки по оси Y\r\n    let valueMinGrid: number; // значение по сетке, ограничивающее график снизу\r\n    let valueMaxGrid: number; // значение по сетке, ограничивающее график сверху\r\n    let deltaY: number; // коэффициэнт перевода в масштаб канваса по оси Y\r\n    let valuesArr = [] as Array<number>; // массив значений на шкале Y\r\n    let topArr = [] as Array<number>; // массив свойства top абсолютного позиционирования\r\n\r\n    if (DELTA !== 0) {\r\n        deltaGridY = CANVAS.deltaGridYf(DELTA);\r\n        valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);\r\n        valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);\r\n        deltaY = (canvasH - marginY) / (valueMaxGrid - valueMinGrid);\r\n        const canvasY = (value: number): number => {// функция пересчета значения Y i-го элемента массива в масштаб канваса\r\n            return canvasH - marginY - deltaY * (value - valueMinGrid);\r\n        };\r\n\r\n        let y = valueMinGrid;\r\n        while (true) {\r\n            valuesArr.push(y);\r\n            topArr.push(canvasY(y));\r\n            y += deltaGridY;\r\n            if (y > valueMaxGrid - deltaGridY) {\r\n                valuesArr.push(y);\r\n                topArr.push(canvasY(y));\r\n                break\r\n            }\r\n        }\r\n    } else { // если все значения одинаковы\r\n        valuesArr = [valueMax];\r\n        topArr = [CANVAS.canvasH() / 2 - CANVAS.marginY]\r\n    }\r\n\r\n    let left = CANVAS.marginLeftX - 5; // значение left абсолютного позиционирования\r\n\r\n    let valuesElements = valuesArr.map((el, i) => (\r\n        <Value key={i}\r\n               value={el}\r\n               top={topArr[i]}\r\n               left={left}/>\r\n    ));\r\n\r\n    return (\r\n        <>\r\n            {valuesElements}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Values;","import {connect} from \"react-redux\";\r\nimport Values from \"./Values\";\r\nimport {StateType} from \"../../../../../store/store\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    valuesCurrent: state.statistic.valuesCurrent,\r\n});\r\n\r\nconst ValuesContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {})(Values);\r\n\r\nexport default ValuesContainer;\r\n\r\n//======================== TYPE ==========================\r\ntype MapStatePropsType = {\r\n    valuesCurrent: Array<number | null>\r\n}\r\ntype MapDispatchPropsType = {}\r\nexport type ValuesPropsType = MapStatePropsType & MapDispatchPropsType","import React from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\n\r\nconst Date: React.FC<PropsType> = (props: PropsType) => {\r\n    const {top, left, date} = props;\r\n    const classes = useStyles();\r\n\r\n    let styleInline = {\r\n        top: top,\r\n        left: left\r\n    };\r\n\r\n    return (\r\n        <div className={classes.date} style={styleInline}>\r\n            {date}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Date;\r\n\r\n//==================== TYPE ======================\r\ntype PropsType = {\r\n    top: number\r\n    left: number\r\n    date: string\r\n}\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    date: {\r\n        position: 'absolute',\r\n        transform: 'translate(-50%, 5px)',\r\n        backgroundColor: blueGrey[600],\r\n        color: grey[50],\r\n        zIndex: 100,\r\n        padding: '2px 4px',\r\n        borderRadius: 1,\r\n    },\r\n});","import React, {ReactElement} from 'react';\r\nimport Date from \"./Date\";\r\nimport {CANVAS} from \"../../../../../helpers/canvas\";\r\nimport {DatesPropsType} from \"./DatesContainer\";\r\n\r\nconst Dates: React.FC<DatesPropsType> = (props: DatesPropsType): ReactElement => {\r\n    const {dates, period} = props;\r\n\r\n    const canvasW = CANVAS.canvasW();\r\n    const canvasH = CANVAS.canvasH();\r\n    const marginY = CANVAS.marginY\r\n    const marginLeftX = CANVAS.marginLeftX;\r\n    const marginRightX = CANVAS.marginRightX;\r\n    const paddingLeftX = CANVAS.paddingLeftX\r\n\r\n    const deltaX = (canvasW - marginLeftX - marginRightX - paddingLeftX) / (period - 1);\r\n    let canvasX = (i: number): number => {\r\n        return marginLeftX + paddingLeftX + i * deltaX;\r\n    };\r\n    let top = canvasH - marginY;\r\n    let leftArr = [] as Array<number>;\r\n    for (let i = 0; i < props.dates.length; i++){\r\n        leftArr.push(canvasX(i));\r\n    }\r\n\r\n    let k = 1;\r\n    if (+period === 30) {\r\n        k = 2\r\n    } else if (+period > 30) {\r\n        k = Math.floor(+period/16);\r\n    }\r\n    let datesElements = dates.map((date, i) => (\r\n        (i % k === 0)\r\n            ? <Date key={i}\r\n                    date={date}\r\n                    top={top}\r\n                    left={leftArr[i]}\r\n            />\r\n            : null)\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {datesElements}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Dates;\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../../store/store\";\r\nimport Dates from \"./Dates\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    dates: state.statistic.dates,\r\n    period: state.statistic.period,\r\n});\r\n\r\nconst DatesContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {})(Dates);\r\n\r\nexport default DatesContainer;\r\n\r\n//======================== TYPE ==========================\r\ntype MapStatePropsType = {\r\n    dates: Array<string>\r\n    period: number\r\n}\r\ntype MapDispatchPropsType = {}\r\nexport type DatesPropsType = MapStatePropsType & MapDispatchPropsType","import {CanvasPropsType} from \"./CanvasContainer\";\r\nimport {ReactElement} from \"react\";\r\nimport React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {CANVAS} from \"../../../../helpers/canvas\";\r\nimport InfoContainer from \"./Info/InfoContainer\";\r\nimport CanvasPointContainer from \"./CanvasPointContainer\";\r\nimport CanvasAxisMemo from \"./CanvasAxis\";\r\nimport CanvasGraphContainer from \"./CanvasGraphContainer\";\r\nimport ValuesContainer from \"./Values/ValuesContainer\";\r\nimport DatesContainer from \"./Dates/DatesContainer\";\r\nimport Preloader from \"../../../common/Preloader\";\r\n\r\nexport const CanvasAll: React.FC<CanvasPropsType> = (props: CanvasPropsType): ReactElement => {\r\n    const {valuesCurrent, mouseHoverCanvas, showInfo, isLoading} = props;\r\n    const classes = useStyles();\r\n    let valueIsExists = !!valuesCurrent.length;\r\n\r\n    return (\r\n        <div className={classes.canvasBlock}>\r\n            <div className={classes.canvasAll}>\r\n                <CanvasAxisMemo/>\r\n                {\r\n                    isLoading || !valueIsExists\r\n                        ? <Preloader/>\r\n                        : <>\r\n                            <CanvasGraphContainer/>\r\n                            {showInfo && mouseHoverCanvas && <CanvasPointContainer/>}\r\n                            <ValuesContainer />\r\n                            {showInfo && mouseHoverCanvas && <InfoContainer/>}\r\n                            <DatesContainer />\r\n                        </>\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\nexport default CanvasAll;\r\n\r\n//========================= STYLE ==================\r\nconst useStyles = makeStyles({\r\n    canvasBlock: {\r\n        backgroundColor: 'white',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        marginBottom: 5\r\n    },\r\n    canvasAll: {\r\n        margin: '50px auto 30px',\r\n        position: 'relative',\r\n        width: CANVAS.canvasW(),\r\n        height: CANVAS.canvasH()\r\n    },\r\n});","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport CanvasAll from \"./CanvasAll\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    valuesCurrent: state.statistic.valuesCurrent,\r\n    mouseHoverCanvas: state.statistic.mouseHoverCanvas,\r\n    showInfo: state.statistic.showInfo,\r\n    isLoading: state.app.isLoading\r\n});\r\n\r\nconst CanvasContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {})(CanvasAll);\r\n\r\nexport default CanvasContainer;\r\n\r\n//======================== TYPE ==========================\r\ntype MapStatePropsType = {\r\n    valuesCurrent: Array<number | null>\r\n    mouseHoverCanvas: boolean\r\n    showInfo: boolean\r\n    isLoading: boolean\r\n}\r\ntype MapDispatchPropsType = {}\r\nexport type CanvasPropsType = MapStatePropsType & MapDispatchPropsType","import Typography from \"@material-ui/core/Typography\";\r\nimport {Field, submit} from \"redux-form\";\r\nimport renderSelectField from \"../../../common/renderSelectField\";\r\nimport React, {ReactElement} from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport {StatisticFormValuesType} from \"../../../../types/types\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\r\n\r\nconst StatisticFormRow: React.FC<PropsType> = (props): ReactElement => {\r\n    const {fieldTitle, name, elements} = props;\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const onChangeHandler = () => {\r\n        setTimeout(() => dispatch(submit('statistic')));\r\n    };\r\n    return (\r\n        <div className={classes.row}>\r\n            <div className={classes.fieldName}>\r\n                <Typography className={classes.typography}>\r\n                    {fieldTitle}\r\n                </Typography>\r\n            </div>\r\n\r\n            <Field name={name}\r\n                   component={renderSelectField}\r\n                   className={classes.selectField}\r\n                   onChange={onChangeHandler}\r\n            >\r\n                {elements}\r\n            </Field>\r\n        </div>\r\n    )\r\n};\r\nexport default StatisticFormRow;\r\n//============================= TYPE ============================\r\ntype PropsType = {\r\n    fieldTitle: string\r\n    name: keyof StatisticFormValuesType\r\n    elements: Array<JSX.Element> | null\r\n}\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    row: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr 1fr',\r\n        gridColumnGap: 5,\r\n        marginBottom: 2\r\n    },\r\n    fieldName: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        alignItems: 'center',\r\n        backgroundColor: blueGrey[900],\r\n        paddingRight: 15\r\n    },\r\n    typography: {\r\n        color: grey[50],\r\n    },\r\n    selectField: {\r\n        backgroundColor: grey[50],\r\n        //paddingLeft: 10\r\n    }\r\n});\r\n","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {CountryType, LangType, StatisticFormValuesType} from \"../../../../types/types\";\r\nimport React, {ReactElement} from \"react\";\r\nimport {StatisticFormPropsType} from \"./StatisticFormContainer\";\r\nimport StatisticFormRow from \"./StatisticFormRow\";\r\nimport {translate} from \"../../../../helpers/translate\";\r\n\r\n//================================= FORM ===================================\r\nconst Form: React.FC<FormPropsType> = (props: FormPropsType): ReactElement => {\r\n    const {\r\n        handleSubmit, countriesData, lang\r\n    } = props;\r\n    const countryElements = countriesData && countriesData.map((el, i) => <option key={i}\r\n                                                                                  value={el.Slug}>\r\n        {el.Country}\r\n    </option>);\r\n\r\n    const periodArray = [\r\n        {label: translate(lang, '1 week'), value: 7},\r\n        {label: translate(lang, '2 week'), value: 14},\r\n        {label: translate(lang, '30 days'), value: 30},\r\n        {label: translate(lang, 'By start'), value: -1}\r\n    ];\r\n    const periodElements = periodArray.map(\r\n        (el, i) => (\r\n            <option key={i}\r\n                    value={el.value}>\r\n                {el.label}\r\n            </option>\r\n        ));\r\n\r\n    const byDayOrTotalArray = [\r\n        {label: translate(lang, 'By day'), value: 'byDay'},\r\n        {label: translate(lang, 'Total'), value: 'total'},\r\n    ];\r\n    const byDayOrTotalElements = byDayOrTotalArray.map(\r\n        (el, i) => (\r\n            <option key={i}\r\n                    value={el.value}>\r\n                {el.label}\r\n            </option>\r\n        ));\r\n\r\n    const caseTypeArray = [\r\n        {label: translate(lang, 'Confirmed'), value: 'confirmed'},\r\n        {label: translate(lang, 'Recovered'), value: 'recovered'},\r\n        {label: translate(lang, 'Deaths'), value: 'deaths'},\r\n    ];\r\n    const caseTypeElements = caseTypeArray.map(\r\n        (el, i) => (\r\n            <option key={i}\r\n                    value={el.value}>\r\n                {el.label}\r\n            </option>\r\n        ));\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <StatisticFormRow fieldTitle={translate(lang, 'Country')} name='country' elements={countryElements}/>\r\n            <StatisticFormRow fieldTitle={translate(lang, 'Period')} name='period' elements={periodElements}/>\r\n            <StatisticFormRow fieldTitle={translate(lang, 'By day / Total')} name='byDayOrTotal'\r\n                              elements={byDayOrTotalElements}/>\r\n            <StatisticFormRow fieldTitle={translate(lang, 'Case type')} name='caseType' elements={caseTypeElements}/>\r\n        </form>\r\n    )\r\n};\r\n\r\n//============================ REDUX-FORM ====================================\r\nconst ReduxForm = reduxForm<StatisticFormValuesType, FormOwnPropsType>({\r\n    form: 'statistic',\r\n})(Form);\r\n\r\n//=========================== COMPONENT =====================================\r\nconst StatisticForm: React.FC<StatisticFormPropsType> = (props: StatisticFormPropsType): ReactElement => {\r\n    const {countriesData, formValues, setFormValues, setPeriod, lang} = props;\r\n    const onSubmit = (newFormValue: StatisticFormValuesType) => {\r\n        setFormValues(newFormValue);\r\n        // если formValues.period = -1 (старое значение, из стора)\r\n        // и изменилось ByDayOrTotal или caseType - что не приводит к загрузке данных с сервера и пересчету period на реальное значение,\r\n        // state.period переписывать на значение из формы (-1) нельзя\r\n        if (\r\n            !(formValues.period === '-1' &&\r\n                (formValues.caseType !== newFormValue.caseType || formValues.byDayOrTotal !== newFormValue.byDayOrTotal))\r\n        ) {\r\n            setPeriod(+newFormValue.period);\r\n        }\r\n    };\r\n    const initialValues: StatisticFormValuesType = formValues;\r\n    return (\r\n        <ReduxForm onSubmit={onSubmit}\r\n                   initialValues={initialValues}\r\n                   countriesData={countriesData}\r\n                   lang={lang}\r\n        />\r\n    )\r\n};\r\n\r\nexport default StatisticForm;\r\n\r\n//============================= TYPE ============================\r\ntype FormPropsType = InjectedFormProps<StatisticFormValuesType, FormOwnPropsType> & FormOwnPropsType\r\ntype FormOwnPropsType = {\r\n    countriesData: null | Array<CountryType>\r\n    lang: LangType\r\n};\r\n\r\n","import {StateType} from \"../../../../store/store\";\r\nimport {CountryType, LangType, StatisticFormValuesType} from \"../../../../types/types\";\r\nimport {connect} from \"react-redux\";\r\nimport StatisticForm from \"./StatisticForm\";\r\nimport {statisticAC} from \"../../../../store/statistic-reducer\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    countriesData: state.statistic.countriesData,\r\n    formValues: state.statistic.formValues,\r\n    lang: state.app.lang\r\n});\r\n\r\nconst setFormValues = statisticAC.setFormValues;\r\nconst setPeriod = statisticAC.setPeriod;\r\nconst StatisticFormContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setFormValues, setPeriod})(StatisticForm);\r\n\r\nexport default StatisticFormContainer;\r\n\r\n//==================== TYPE ===================\r\ntype MapStatePropsType = {\r\n    countriesData: null | Array<CountryType>\r\n    formValues: StatisticFormValuesType\r\n    lang: LangType\r\n}\r\ntype MapDispatchPropsType = {\r\n    setFormValues: (formValues: StatisticFormValuesType) => void\r\n    setPeriod: (period: number) => void\r\n}\r\nexport type StatisticFormPropsType = MapStatePropsType & MapDispatchPropsType;","import React, {ReactElement} from 'react';\r\nimport CanvasContainer from \"./Canvas/CanvasContainer\";\r\nimport StatisticFormContainer from \"./StatisticForm/StatisticFormContainer\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\n\r\nconst Statistic: React.FC = (): ReactElement => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.statistic}>\r\n            <div>\r\n                <CanvasContainer/>\r\n            </div>\r\n            <div>\r\n                <StatisticFormContainer/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default Statistic;\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    statistic: {\r\n        padding: '10px 10px 20px'\r\n    },\r\n});","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport Statistic from \"./Statistic\";\r\nimport {getInitial, getValues, statisticAC} from \"../../../store/statistic-reducer\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {ByDayOrTotalType, CaseTypeType, PeriodType, StatisticFormValuesType} from \"../../../types/types\";\r\n\r\nclass StatisticAJAX extends React.Component<StatisticContainerPropsType, {}> {\r\n    componentDidMount() {\r\n        const period = this.props.formValues.period;\r\n        const country = this.props.formValues.country;\r\n        const byDayOrTotal = this.props.formValues.byDayOrTotal;\r\n        const caseType = this.props.formValues.caseType;\r\n        this.props.getInitial(period, country, byDayOrTotal, caseType);\r\n    }\r\n    componentDidUpdate(prevProps: StatisticContainerPropsType, prevState: StatisticContainerPropsType) {\r\n        const period = this.props.formValues.period;\r\n        const country = this.props.formValues.country;\r\n        const byDayOrTotal = this.props.formValues.byDayOrTotal;\r\n        const caseType = this.props.formValues.caseType;\r\n        // если изменилась страна или период - получить с сервера\r\n        if (this.props.dateEnd\r\n            && (prevProps.formValues.period !== this.props.formValues.period\r\n            || prevProps.formValues.country !== this.props.formValues.country)) {\r\n            this.props.getValues(this.props.dateEnd, period, country, byDayOrTotal, caseType)\r\n        }\r\n        // если изменился только или тип за день/общее или тип случая - получить из стора\r\n        if (\r\n            prevProps.formValues.country === this.props.formValues.country\r\n            && prevProps.formValues.period === this.props.formValues.period\r\n            && (prevProps.formValues.byDayOrTotal !== this.props.formValues.byDayOrTotal\r\n            || prevProps.formValues.caseType !== this.props.formValues.caseType)\r\n        ) {\r\n            this.props.setCurrentValues(byDayOrTotal, caseType);\r\n        }\r\n    }\r\n    render() {\r\n        return <Statistic />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    isInitialized: state.statistic.isInitialized,\r\n    isLoading: state.app.isLoading,\r\n    dateEnd: state.statistic.dateEnd,\r\n    formValues: state.statistic.formValues\r\n});\r\n\r\nconst setCurrentValues = statisticAC.setCurrentValues;\r\nlet StatisticContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {getInitial, getValues, setCurrentValues})(StatisticAJAX);\r\nexport default StatisticContainer;\r\n\r\n//====================== TYPE =========================\r\ntype MapStatePropsType = {\r\n    isInitialized: boolean\r\n    isLoading: boolean\r\n    dateEnd: string | null\r\n    formValues: StatisticFormValuesType\r\n}\r\ntype MapDispatchPropsType = {\r\n    getInitial: (period: PeriodType, country: string, byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType) => void\r\n    getValues: (dateEnd: string, period: PeriodType, country: string, byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType) => void\r\n    setCurrentValues: (byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType) => void\r\n}\r\ntype StatisticContainerPropsType = MapStatePropsType & MapDispatchPropsType;","import React, {ReactElement} from 'react';\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {translate} from \"../../../helpers/translate\";\r\nimport {HomePropsType} from \"./HomeContainer\";\r\n\r\nconst Home: React.FC<HomePropsType> = (props: HomePropsType): ReactElement => {\r\n    const {lang} = props;\r\n    return (\r\n        <div>\r\n            <Typography variant='h4' align='center'>\r\n                {translate(lang, 'Coronavirus statistic')}\r\n            </Typography>\r\n        </div>\r\n    )\r\n}\r\nexport default Home;\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {LangType} from \"../../../types/types\";\r\nimport Home from \"./Home\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    lang: state.app.lang,\r\n});\r\n\r\nconst HomeContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {})(Home);\r\n\r\nexport default HomeContainer;\r\n\r\n//======================== TYPE ==========================\r\ntype MapStatePropsType = {\r\n    lang: LangType\r\n}\r\ntype MapDispatchPropsType = {}\r\nexport type HomePropsType = MapStatePropsType & MapDispatchPropsType","import React, {ReactElement} from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport SummaryContainer from \"./Summary/SummaryContainer\";\r\nimport StatisticContainer from \"./Statistic/StatisticContainer\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport HomeContainer from \"./Home/HomeContainer\";\r\n\r\nconst Main: React.FC = (): ReactElement => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.main}>\r\n            <Switch>\r\n                <Route exact path='/' render={() => <HomeContainer/>}/>\r\n                <Route path='/summary' render={() => <SummaryContainer/>}/>\r\n                <Route path='/statistic' render={() => <StatisticContainer/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n};\r\nexport default Main;\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        backgroundColor: grey[400],\r\n        padding: '10px 10px 20px',\r\n        flexGrow: 1,\r\n    },\r\n});\r\n","import {FormControlLabel} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport {LangSwitcherPropsType} from \"./LangSwitcherContainer\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\n\r\nconst LangSwitcher: React.FC<LangSwitcherPropsType> = (props: LangSwitcherPropsType) => {\r\n    const {lang, setLang} = props;\r\n    const classes = useStyles();\r\n    const checked = lang === 'eng'\r\n    const handleChange = () => {\r\n        if (lang === 'eng') {\r\n            setLang('rus')\r\n        } else {\r\n            setLang('eng')\r\n        }\r\n    };\r\n    const label = lang === 'eng' ? 'ENG' : 'RUS';\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <FormControlLabel\r\n                control={\r\n                    <Switch checked={checked}\r\n                            onChange={handleChange}\r\n                            name=\"checkedA\"\r\n                            classes={{\r\n                                root: classes.root,\r\n                                track: classes.track,\r\n                            }}\r\n                    />\r\n                }\r\n                label={label}\r\n                className={classes.label}\r\n            />\r\n        </div>\r\n    )\r\n};\r\nexport default LangSwitcher\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n       color: 'white'\r\n    },\r\n    label: {\r\n        color: 'white',\r\n        //width: 32\r\n    },\r\n    wrapper: {\r\n        width: 100,\r\n        marginLeft: 10\r\n    },\r\n    track: {\r\n       backgroundColor: grey[200],\r\n    }\r\n});\r\n\r\n","import {StateType} from \"../../../store/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {LangType} from \"../../../types/types\";\r\nimport LangSwitcher from \"./LangSwitcher\";\r\nimport {appAC} from \"../../../store/app-reducer\";\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    lang: state.app.lang\r\n});\r\n\r\nconst setLang = appAC.setLang;\r\nlet LangSwitcherContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setLang})(LangSwitcher);\r\nexport default LangSwitcherContainer;\r\n\r\n//====================== TYPE =========================\r\ntype MapStatePropsType = {\r\n    lang: LangType\r\n}\r\ntype MapDispatchPropsType = {\r\n    setLang: (lang: LangType) => void\r\n}\r\nexport type LangSwitcherPropsType = MapStatePropsType & MapDispatchPropsType;","import React, {ReactElement} from 'react';\r\nimport style from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport LangSwitcherContainer from \"./LangSwitcher/LangSwitcherContainer\";\r\nimport {HeaderPropsType} from \"./HeaderContainer\";\r\nimport {translate} from \"../../helpers/translate\";\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props: HeaderPropsType): ReactElement => {\r\n    const {lang} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <header className={classes.header}>\r\n            <Typography className={classes.logo}\r\n                        variant='h5'\r\n            >\r\n                Covid\r\n            </Typography>\r\n\r\n            <div className={classes.menu}>\r\n                <nav className={style.nav}>\r\n                    <NavLink to='/' className={style.navItem}>\r\n                        {translate(lang, 'Home')}\r\n                    </NavLink>\r\n                    <NavLink to='/summary' className={style.navItem} activeClassName={style.active}>\r\n                        {translate(lang, 'Summary')}\r\n                    </NavLink>\r\n                    <NavLink to='/statistic' className={style.navItem} activeClassName={style.active}>\r\n                        {translate(lang, 'Statistic')}\r\n                    </NavLink>\r\n                </nav>\r\n                <LangSwitcherContainer/>\r\n            </div>\r\n\r\n\r\n        </header>\r\n    )\r\n};\r\nexport default Header;\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        height: 60,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        backgroundColor: blueGrey[900],\r\n        padding: '0 10px 0 20px',\r\n    },\r\n    logo: {\r\n        color: grey[50],\r\n        textTransform: 'uppercase'\r\n    },\r\n    menu: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    }\r\n});","import Header from \"./Header\";\r\nimport {LangType} from \"../../types/types\";\r\nimport {StateType} from \"../../store/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {appAC} from \"../../store/app-reducer\";\r\n\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    lang: state.app.lang\r\n});\r\n\r\nconst setLang = appAC.setLang;\r\nlet HeaderContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setLang})(Header);\r\nexport default HeaderContainer;\r\n\r\n//====================== TYPE =========================\r\ntype MapStatePropsType = {\r\n    lang: LangType\r\n}\r\ntype MapDispatchPropsType = {}\r\nexport type HeaderPropsType = MapStatePropsType & MapDispatchPropsType;","import React from 'react';\nimport Main from \"./components/Main/Main\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\n\nconst App = () => {\n    const classes = useStyles();\n    return (\n        <div className={classes.appWrapper}>\n            <div className={classes.app}>\n                <HeaderContainer/>\n                <Main/>\n            </div>\n        </div>\n    )\n};\n\nexport default App;\n//====================== STYLES ============================\nconst useStyles = makeStyles({\n    appWrapper: {\n        backgroundColor: grey[100]\n    },\n    app: {\n        maxWidth: 1120,\n        width: '100%',\n        margin: '0 auto',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column'\n    },\n});","import thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {Action, applyMiddleware, combineReducers, createStore, Middleware} from \"redux\";\r\nimport summaryReducer from \"./summary-reducer\";\r\nimport statisticReducer from \"./statistic-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport appReducer from \"./app-reducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nlet rootReducer = combineReducers({\r\n    summary: summaryReducer,\r\n    statistic: statisticReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n});\r\nconst middleware: Array<Middleware> = [thunkMiddleware];\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;\r\n\r\n//======================== TYPE ==========================\r\nexport type StateType = ReturnType<typeof rootReducer>\r\nexport type GetActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, StateType, unknown, A>","import * as React from 'react';\r\nimport {ErrorInfo} from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component<PropsType, StateType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            errorInfo: null\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n        this.setState({\r\n            error: error,\r\n            errorInfo: errorInfo\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.errorInfo) {\r\n            return (\r\n                <div>\r\n                    <h2>Something went wrong</h2>\r\n                    <details style={{whiteSpace: 'pre-wrap'}}>\r\n                        {this.state.error && this.state.error.toString()}\r\n                    </details>\r\n                </div>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n//==================== TYPES ========================\r\ntype PropsType = {\r\n\r\n};\r\ntype StateType = {\r\n    error: null | Error\r\n    errorInfo: null | ErrorInfo\r\n}\r\n\r\n//\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {HashRouter} from \"react-router-dom\";\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\nimport store from './store/store'\nimport ErrorBoundary from \"./components/common/ErrorBoundary\";\nimport {CssBaseline} from \"@material-ui/core\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <ErrorBoundary>\n                <CssBaseline />\n                <App/>\n            </ErrorBoundary>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__FqsW2\",\"navItem\":\"Header_navItem__2y3HY\",\"active\":\"Header_active__fu_PZ\"};"],"sourceRoot":""}