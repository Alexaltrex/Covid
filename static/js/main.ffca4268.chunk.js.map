{"version":3,"sources":["helpers/addCommaToNumber.ts","components/Main/Summary/SummaryCasesItem.tsx","helpers/translate.ts","components/Main/Summary/SummaryCases.tsx","helpers/date.ts","components/common/renderSelectField.jsx","components/Main/Summary/SelectCurentCountry.tsx","DAL/api.ts","store/app-reducer.ts","store/summary-reducer.ts","components/Main/Summary/SelectCurrentCountryContainer.tsx","components/common/Preloader.tsx","hooks/useCommonQueryParams.ts","components/Main/Summary/Summary.tsx","components/Main/Summary/SummaryContainer.tsx","helpers/canvas.ts","components/Main/Statistic/Canvas/Info/Info.tsx","store/statistic-reducer.ts","components/Main/Statistic/Canvas/Info/InfoContainer.tsx","components/Main/Statistic/Canvas/CanvasPoint.tsx","components/Main/Statistic/Canvas/CanvasPointContainer.tsx","components/Main/Statistic/Canvas/CanvasAxis.tsx","components/Main/Statistic/Canvas/CanvasGraph.tsx","components/Main/Statistic/Canvas/CanvasGraphContainer.tsx","components/Main/Statistic/Canvas/Values/Value.tsx","components/Main/Statistic/Canvas/Values/Values.tsx","components/Main/Statistic/Canvas/Values/ValuesContainer.tsx","components/Main/Statistic/Canvas/Dates/Date.tsx","components/Main/Statistic/Canvas/Dates/Dates.tsx","components/Main/Statistic/Canvas/Dates/DatesContainer.tsx","components/Main/Statistic/Canvas/CanvasAll.tsx","components/Main/Statistic/Canvas/CanvasContainer.tsx","components/Main/Statistic/StatisticForm/StatisticFormRow.tsx","components/Main/Statistic/StatisticForm/StatisticForm.tsx","components/Main/Statistic/StatisticForm/StatisticFormContainer.tsx","components/Main/Statistic/LanErrorDialog/LanErrorDialog.tsx","components/Main/Statistic/Statistic.tsx","components/Main/Statistic/StatisticContainer.tsx","components/Main/Home/Home.tsx","components/Main/Home/HomeContainer.tsx","components/Main/Main.tsx","components/Header/LangSwitcher/LangSwitcher.tsx","components/Header/LangSwitcher/LangSwitcherContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","App.tsx","store/store.ts","components/common/ErrorBoundary.tsx","index.tsx","components/Header/Header.module.css"],"names":["addCommaToNumber","n","nString","length","result","slice","SummaryCasesItem","props","color","caseType","value","icon","classes","useStyles","classesInner","makeStyles","type","flexGrow","paddingLeft","iconWrapper","useStylesInner","className","item","Typography","variant","valueWrapper","display","alignItems","flexBasis","flexShrink","justifyContent","marginLeft","Translate","translate","lang","phrase","rus","eng","SummaryCases","cases","icons","summaryKeys","Object","keys","SummaryCasesElements","map","key","i","DATE","getCurrentDate","Date","dateJsToAPI","date","monthString","year","getFullYear","month","getMonth","dayString","day","getDate","dateAPIToJs","getStartPeriodDate","period","endPeriodDateJS","this","startPeriodDateJS","getTime","getStartPeriodDateActual","getDates","dateEnd","dates","push","getMonthWord","monthArray","dateTranslateFromAPI","monthWord","dateTranslateFromApiToGraph","renderSelectField","input","label","meta","touched","error","children","custom","FormControl","Select","native","inputProps","name","ReduxForm","reduxForm","form","handleSubmit","countriesList","optionElements","el","dispatch","useDispatch","onSubmit","fieldWrapper","Field","component","selectField","onChange","setTimeout","submit","SelectCurrentCountry","setCurrentCountry","currentCountry","initialValues","country","formValue","gridTemplateColumns","marginBottom","backgroundColor","width","instance","axios","create","baseURL","summaryAPI","get","response","data","statisticAPI","countrySlug","dateStart","dateEndAPI","initialState","globalError","isLoading","lanError","lanErrorResponse","appAC","appReducer","state","action","summaryCases","countriesCases","summaryAC","summaryReducer","Country","SelectCurrentCountryContainer","connect","summary","Preloader","circularWrapper","CircularProgress","size","position","top","bottom","left","right","zIndex","useCommonQueryParams","useSelector","app","useQueryParam","StringParam","langQuery","setLangQuery","useEffect","undefined","Summary","countryQuery","setCountryQuery","currentCasesFull","find","currentCases","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","useSummary","blocks","block","clsx","titleWrapper","titleWrapper1","align","gridGap","margin","border","borderRadius","padding","SummaryAJAX","getSummary","other","React","Component","SummaryContainer","a","Global","Countries","console","log","CANVAS","marginLeftX","paddingLeftX","marginRightX","marginY","canvasW","canvasH","deltaGridYf","DELTA","countOfNumber","Math","pow","Info","colorValue","mouseX","mouseY","setMouseHoverCanvas","infoValue","infoDate","deltaX","iMouseGrid","round","xMouseGrid","showInfo","styleInfo","red","green","indigo","styleValue","infoValueLabel","onMouseEnter","onMouseLeave","style","info","grey","cursor","boxShadow","fontWeight","countriesData","allValues","confirmed","byDay","values","total","recovered","deaths","mouseHoverCanvas","valuesCurrent","xPoint","yPoint","isInitialized","formValues","byDayOrTotal","statisticAC","getInitial","getCountriesResponse","dateEndJS","dateStartJS","dateStartAPI","getValuesByPeriodResponse","status","headers","message","request","statisticReducer","sort","b","i0","valuesConfirmedNew","valuesConfirmedTotal","valuesRecoveredNew","valuesRecoveredTotal","valuesDeathsNew","valuesDeathsTotal","Confirmed","Recovered","Deaths","valueMin","min","apply","filter","valueMax","max","deltaGridY","valueMinGrid","floor","valueMaxGrid","ceil","deltaY","canvasX","canvasY","iPoint","InfoContainer","statistic","CanvasPoint","setMouseXY","canvasRef","useRef","canvasCtxRef","current","getContext","ctx","clearRect","fillStyle","fillRect","strokeStyle","lineWidth","setLineDash","beginPath","moveTo","lineTo","stroke","lineJoin","arc","PI","fill","onMouseMoveThrottle","throttle","e","target","canvas","currentTarget","getBoundingClientRect","x","clientX","y","clientY","canvasGraph","ref","height","onMouseMove","CanvasPointContainer","CanvasAxisMemo","memo","canvasAxisRef","canvasAxisCtxRef","canvasAxis","CanvasGraph","valuesCurrentFilter","yLineStart","valuePrev","valueNow","CanvasGraphContainer","Value","styleInline","transform","blueGrey","Values","valuesArr","topArr","valuesElements","ValuesContainer","Dates","leftArr","k","datesElements","DatesContainer","CanvasAll","canvasBlock","canvasAll","CanvasContainer","StatisticFormRow","fieldTitle","elements","row","fieldName","typography","gridColumnGap","paddingRight","countryElements","Slug","periodElements","byDayOrTotalElements","caseTypeElements","StatisticForm","setFormValues","setPeriod","newFormValue","enableReinitialize","StatisticFormContainer","setLanError","setLanErrorResponse","LanErrorDialogContainer","lanErrorDialogOpen","setLanErrorDialogOpen","useState","count","setCount","label01","label02","Dialog","disableBackdropClick","disableEscapeKeyDown","maxWidth","aria-labelledby","open","dialog","DialogTitle","id","dialogTitle","dialogTitleInner","DialogContent","DialogActions","buttonWrapper","Button","onClick","fullWidth","button","textTransform","marginRight","Statistic","periodQuery","setPeriodQuery","byDayOrTotalQuery","setByDayOrTotalQuery","caseTypeQuery","setCaseTypeQuery","dateEndQuery","setDateEndQuery","useStatistic","StatisticAJAX","prevProps","prevState","getValues","setCurrentValues","StatisticContainer","Home","HomeContainer","Main","main","exact","path","render","LangSwitcher","setLang","checked","wrapper","FormControlLabel","control","Switch","root","track","LangSwitcherContainer","Header","header","logo","menu","nav","to","navItem","activeClassName","active","HeaderContainer","App","appWrapper","minHeight","flexDirection","rootReducer","combineReducers","formReducer","middleware","thunkMiddleware","store","createStore","composeWithDevTools","applyMiddleware","window","ErrorBoundary","errorInfo","setState","whiteSpace","toString","ReactDOM","ReactRouterRoute","Route","CssBaseline","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ffca4268.chunk.js","sourcesContent":["export const addCommaToNumber = (n: number): string => {\r\n    let nString: string = `${n}`;\r\n    let length = nString.length;\r\n    let result = '';\r\n    while (length > 3) {\r\n        result = '.' + nString.slice(length - 3) + result; // добавили к результату\r\n        nString = nString.slice(0, length - 3); //отрезали\r\n        length = length - 3;\r\n    }\r\n    result = nString + result;\r\n    return result;\r\n};","import React, {ReactElement} from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {addCommaToNumber} from \"../../../helpers/addCommaToNumber\";\r\n\r\nconst SummaryCasesItem: React.FC<PropsType> = (props: PropsType): ReactElement => {\r\n    const {color, caseType, value, icon} = props;\r\n    const classes = useStyles();\r\n\r\n    const useStylesInner = makeStyles({\r\n        type: {\r\n            flexGrow: 1,\r\n            paddingLeft: 5,\r\n            color: color\r\n        },\r\n        iconWrapper: {\r\n            color: color\r\n        }\r\n    });\r\n    const classesInner = useStylesInner();\r\n\r\n    return (\r\n        <div className={classes.item}>\r\n            <Typography variant='h6'\r\n                        className={classesInner.type}>\r\n                {caseType}\r\n            </Typography>\r\n\r\n            <div className={classes.valueWrapper}>\r\n                <div className={classesInner.iconWrapper}>\r\n                    {icon}\r\n                </div>\r\n\r\n                <Typography variant='h6' className={classes.value}>\r\n                    {addCommaToNumber(value)}\r\n                </Typography>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SummaryCasesItem;\r\n\r\n//===================== TYPE =================\r\ntype PropsType = {\r\n    color: string\r\n    caseType: string\r\n    value: number\r\n    icon: ReactElement\r\n}\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    valueWrapper: {\r\n        flexBasis: 180,\r\n        flexShrink: 0,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-start'\r\n    },\r\n    value: {\r\n        marginLeft: 10\r\n    }\r\n});","import {LangType} from \"../types/types\";\r\n\r\nexport const Translate: LangObjectType = {\r\n    'English': {\r\n        'eng': 'English',\r\n        'rus': 'Русский'\r\n    },\r\n    'Change language': {\r\n        'eng': 'Change language',\r\n        'rus': 'Сменить язык'\r\n    },\r\n    'Global': {\r\n        'eng': 'Global',\r\n        'rus': 'Весь мир'\r\n    },\r\n    'By country': {\r\n        'eng': 'By country',\r\n        'rus': 'Для страны'\r\n    },\r\n    'Confirmed new': {\r\n        'eng': 'Confirmed new',\r\n        'rus': 'Заболевших (за день)'\r\n    },\r\n    'Confirmed total': {\r\n        'eng': 'Confirmed total',\r\n        'rus': 'Заболевших (всего)'\r\n    },\r\n    'Deaths new': {\r\n        'eng': 'Deaths new',\r\n        'rus': 'Умерших (за день)'\r\n    },\r\n    'Deaths total': {\r\n        'eng': 'Deaths total',\r\n        'rus': 'Умерших (всего)'\r\n    },\r\n    'Recovered new': {\r\n        'eng': 'Recovered new',\r\n        'rus': 'Вылечившихся (за день)'\r\n    },\r\n    'Recovered total': {\r\n        'eng': 'Recovered total',\r\n        'rus': 'Вылечившихся (всего)'\r\n    },\r\n    'Home': {\r\n        'eng': 'Home',\r\n        'rus': 'Домой'\r\n    },\r\n    'Summary': {\r\n        'eng': 'Summary',\r\n        'rus': 'Суммарно'\r\n    },\r\n    'Statistic': {\r\n        'eng': 'Statistic',\r\n        'rus': 'Статистика'\r\n    },\r\n    '1 week': {\r\n        'eng': '1 week',\r\n        'rus': '1 неделя'\r\n    },\r\n    '2 week': {\r\n        'eng': '2 week',\r\n        'rus': '2 недели'\r\n    },\r\n    '30 days': {\r\n        'eng': '30 days',\r\n        'rus': '30 дней '\r\n    },\r\n    'By start': {\r\n        'eng': 'By start',\r\n        'rus': 'С начала'\r\n    },\r\n    'By day': {\r\n        'eng': 'By day',\r\n        'rus': 'За день'\r\n    },\r\n    'Total': {\r\n        'eng': 'Total',\r\n        'rus': 'Всего'\r\n    },\r\n    'Confirmed': {\r\n        'eng': 'Confirmed',\r\n        'rus': 'Заболевшие'\r\n    },\r\n    'Recovered': {\r\n        'eng': 'Recovered',\r\n        'rus': 'Вылечившиеся'\r\n    },\r\n    'Deaths': {\r\n        'eng': 'Deaths',\r\n        'rus': 'Умершие'\r\n    },\r\n    'Country': {\r\n        'eng': 'Country',\r\n        'rus': 'Страна'\r\n    },\r\n    'Period': {\r\n        'eng': 'Period',\r\n        'rus': 'Период'\r\n    },\r\n    'By day / Total': {\r\n        'eng': 'By day / Total',\r\n        'rus': 'За день / всего'\r\n    },\r\n    'Case type': {\r\n        'eng': 'Case type',\r\n        'rus': 'Тип'\r\n    },\r\n    'Coronavirus statistic': {\r\n        'eng': 'Coronavirus statistic',\r\n        'rus': 'Статистика коронавируса'\r\n    },\r\n    'Automatically retry server request in': {\r\n        'eng': 'Automatically retry server request in',\r\n        'rus': 'Автоматический повтор запроса на сервер через'\r\n    },\r\n    'sec': {\r\n        'eng': 'sec',\r\n        'rus': 'сек'\r\n    }\r\n};\r\n\r\n// const lang = useSelector(getLang);\r\n// {translate(lang, '')}\r\n\r\nexport const translate = (lang: LangType, phrase: string): string => {\r\n    return lang === 'rus' ? Translate[phrase].rus : Translate[phrase].eng\r\n};\r\n\r\ntype LangObjectType = {\r\n    [key: string]: {\r\n        'eng': string\r\n        'rus': string\r\n    }\r\n}\r\n\r\n","import React, {ReactElement} from 'react';\r\nimport SummaryCasesItem from \"./SummaryCasesItem\";\r\nimport {CountryCasesType, LangType} from \"../../../types/types\";\r\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport {translate} from \"../../../helpers/translate\";\r\n\r\n\r\nconst SummaryCases: React.FC<PropsType> = (props: PropsType): ReactElement => {\r\n    const {cases, lang} = props;\r\n\r\n    const color = ['darkred', 'darkred', 'darkblue', 'darkblue', 'darkgreen', 'darkgreen'];\r\n    const caseType = [\r\n        translate(lang, 'Confirmed new'),\r\n        translate(lang, 'Confirmed total'),\r\n        translate(lang, 'Deaths new'),\r\n        translate(lang, 'Deaths total'),\r\n        translate(lang, 'Recovered new'),\r\n        translate(lang, 'Recovered total')\r\n    ];\r\n    const icons = [\r\n        <LocalHospitalIcon/>, <LocalHospitalIcon/>,\r\n        <HighlightOffIcon/>, <HighlightOffIcon/>,\r\n        <FavoriteIcon/>, <FavoriteIcon/>\r\n    ];\r\n\r\n    const summaryKeys = cases && Object.keys(cases);\r\n    const SummaryCasesElements = cases && summaryKeys &&\r\n        summaryKeys.map((key, i) => <SummaryCasesItem key={key}\r\n                                                      value={cases[key as keyof CountryCasesType]}\r\n                                                      color={color[i]}\r\n                                                      caseType={caseType[i]}\r\n                                                      icon={icons[i]}\r\n            />\r\n        );\r\n\r\n    return (\r\n        <div>\r\n            {SummaryCasesElements}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SummaryCases;\r\n\r\n//===================== TYPE =================\r\ntype PropsType = {\r\n    cases: null | CountryCasesType\r\n    lang: LangType\r\n}","import {LangType} from \"../types/types\";\r\n\r\nexport const DATE = {\r\n    // получение текущей даты\r\n    // RETURN - JS DATE\r\n    getCurrentDate(): Date {\r\n        return new Date();\r\n    },\r\n\r\n    // перевод из формата js (Date) в формат API \"2020-07-09T00:00:00Z\"\r\n    dateJsToAPI(date: Date): string {\r\n        const year = date.getFullYear();\r\n        const month = date.getMonth() + 1;\r\n        let monthString: string;\r\n        if (month < 10) {\r\n            monthString = `0${month}`;\r\n        } else {\r\n            monthString = `${month}`;\r\n        }\r\n        let day = date.getDate();\r\n        let dayString: string;\r\n        if (day < 10) {\r\n            dayString = `0${day}`;\r\n        } else {\r\n            dayString = `${day}`;\r\n        }\r\n        return `${year}-${monthString}-${dayString}T00:00:00Z`;\r\n    },\r\n\r\n    // перевод даты из формата API ('2020-07-09T00:00:00Z') в формат js (Date)\r\n    dateAPIToJs(date: string): Date{\r\n       let year = +date.slice(0,4);\r\n       let month = +date.slice(5,7) - 1;\r\n       let day = +date.slice(8,10)\r\n       return new Date(year, month, day);\r\n    },\r\n\r\n    // определение даты начала периода (зависит от текущей последней) в формате API\r\n    getStartPeriodDate(period: number) {\r\n        // period = 7, 14, 30\r\n        // return = API\r\n        let endPeriodDateJS = this.getCurrentDate();\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - period * 24 * 60 * 60 * 1000);\r\n        return this.dateJsToAPI(startPeriodDateJS);\r\n    },\r\n\r\n    // определение актуальной даты начала периода (зависит от актуальной последней) в формате API\r\n    getStartPeriodDateActual(period: number, date: string) {\r\n        // date = dateEnd, API\r\n        // period = 7, 14, 30\r\n        // return = API\r\n        let endPeriodDateJS = this.dateAPIToJs(date);\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - period * 24 * 60 * 60 * 1000);\r\n        return this.dateJsToAPI(startPeriodDateJS);\r\n    },\r\n\r\n    // получение массива дат для canvas в формате 'DD.MM'\r\n    getDates(period: number, dateEnd: string) {\r\n        // dateEnd = API\r\n        let dates = [];\r\n        let endPeriodDateJS = this.dateAPIToJs(dateEnd);\r\n        let startPeriodDateJS = new Date(endPeriodDateJS.getTime() - (period - 1) * 24 * 60 * 60 * 1000);\r\n        for (let i = 0; i < period; i++){\r\n            let month = startPeriodDateJS.getMonth() + 1;\r\n            let monthString: string;\r\n            if (month < 10) {\r\n                monthString = `0${month}`;\r\n            } else {\r\n                monthString = `${month}`;\r\n            }\r\n            let day = startPeriodDateJS.getDate();\r\n            let dayString: string;\r\n            if (day < 10) {\r\n                dayString = `0${day}`;\r\n            } else {\r\n                dayString = `${day}`;\r\n            }\r\n            dates.push(`${dayString}.${monthString}`);\r\n            startPeriodDateJS = new Date(startPeriodDateJS.getTime() + 1 * 24 * 60 * 60 * 1000);\r\n        }\r\n        return dates;\r\n    },\r\n\r\n    // получить из числового обозначения месяца слово\r\n    getMonthWord(month: number, lang: LangType): string {\r\n        const monthArray = [\r\n            {'eng': \"January\", 'rus': 'Января'},\r\n            {'eng': \"February\", 'rus': 'Февраля'},\r\n            {'eng': \"March\", 'rus': 'Марта'},\r\n            {'eng': \"April\", 'rus': 'Апреля'},\r\n            {'eng': \"May\", 'rus': 'Мая'},\r\n            {'eng': \"June\", 'rus': 'Июня'},\r\n            {'eng': \"July\", 'rus': 'Июля'},\r\n            {'eng': \"August\", 'rus': 'Августа'},\r\n            {'eng': \"September\", 'rus': 'Сентября'},\r\n            {'eng': \"October\", 'rus': 'Октября'},\r\n            {'eng': \"November\", 'rus': 'Ноября'},\r\n            {'eng': \"December\", 'rus': 'Декабря'},\r\n        ];\r\n        return lang === 'eng' ? monthArray[month].eng : monthArray[month].rus\r\n    },\r\n\r\n    // перевод из '2020-07-09T00:00:00Z' в '7 сентября 2020'\r\n    dateTranslateFromAPI(date: string, lang: LangType): string {\r\n        const year = date.slice(0, 4);\r\n        const month =  +date.slice(5, 7); // 1...12\r\n        const monthWord = this.getMonthWord((+month) - 1, lang);\r\n        const day = date[8] === '0' ? date.slice(9, 10) : date.slice(8, 10);\r\n        return `${day} ${monthWord} ${year}`\r\n    },\r\n\r\n    // \"2020-07-11T00:00:00Z\" ---> '07.11'\r\n    dateTranslateFromApiToGraph(date: string): string {\r\n        const day = date.slice(8, 10);\r\n        const month = date.slice(5, 7);\r\n        return `${day}.${month}`;\r\n    }\r\n\r\n}","import FormControl from \"@material-ui/core/FormControl\";\r\nimport React from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nconst renderSelectField = ({\r\n                               input,\r\n                               label,\r\n                               meta: {touched, error},\r\n                               children,\r\n                               ...custom\r\n                           }) => {\r\n    return (\r\n\r\n        <FormControl error={touched && error}>\r\n            <Select\r\n                native\r\n                {...input}\r\n                {...custom}\r\n                inputProps={{\r\n                    name: input.name,\r\n                    //id: 'color-native-simple'\r\n                }}\r\n            >\r\n                {children}\r\n            </Select>\r\n\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default renderSelectField;","import {ReactElement} from \"react\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm, submit} from \"redux-form\";\r\nimport renderSelectField from \"../../common/renderSelectField\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {SelectCurrentCountryPropsType} from \"./SelectCurrentCountryContainer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n//================================= FORM ===================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, countriesList} = props;\r\n    const classes = useStyles();\r\n    const optionElements = countriesList && countriesList\r\n        .map((el, i) => <option key={i}\r\n                                value={el}>\r\n                {el}\r\n            </option>\r\n        );\r\n    const dispatch = useDispatch();\r\n\r\n    const onChangeHandler = () => {\r\n        setTimeout(() => dispatch(submit('summary-country')));\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={classes.fieldWrapper}>\r\n                <Field name='country'\r\n                       component={renderSelectField}\r\n                       className={classes.selectField}\r\n                       onChange={onChangeHandler}\r\n                >\r\n                    {optionElements}\r\n                </Field>\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================ REDUX-FORM ====================================\r\nconst ReduxForm = reduxForm<FormValuesType, FormOwnPropsType>({\r\n    form: 'summary-country',\r\n})(Form);\r\n\r\n//=========================== COMPONENT =====================================\r\nconst SelectCurrentCountry: React.FC<ComponentPropsType> = (props: ComponentPropsType): ReactElement => {\r\n    const {setCurrentCountry, currentCountry, countriesList} = props;\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        setCurrentCountry(formValue.country);\r\n    };\r\n    const initialValues: FormValuesType = {\r\n        country: currentCountry\r\n    };\r\n    return (\r\n        <ReduxForm onSubmit={onSubmit}\r\n                   initialValues={initialValues}\r\n                   countriesList={countriesList}\r\n\r\n        />\r\n    )\r\n};\r\n\r\nexport default SelectCurrentCountry;\r\n\r\n//========================== TYPE ============================\r\ntype FormPropsType = InjectedFormProps<FormValuesType, FormOwnPropsType> & FormOwnPropsType;\r\ntype FormValuesType = {\r\n    country: string\r\n};\r\ntype FormOwnPropsType = {\r\n    countriesList: Array<string>\r\n}\r\ntype ComponentPropsType = SelectCurrentCountryPropsType;\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    fieldWrapper: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr',\r\n        marginBottom: 5\r\n    },\r\n    selectField: {\r\n        backgroundColor: 'white',\r\n        paddingLeft: 5,\r\n        width: '100%'\r\n    },\r\n});\r\n\r\n\r\n\r\n","import axios from \"axios\";\r\nimport {DATE} from \"../helpers/date\";\r\nimport {CountryCasesByDayType, CountryType, SummaryResponseType} from \"../types/types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.covid19api.com/'\r\n});\r\n\r\nexport const summaryAPI = {\r\n    async getSummary(){\r\n        const response = await instance.get<SummaryResponseType>('summary')\r\n        return response.data\r\n    }\r\n};\r\n\r\nexport const statisticAPI = {\r\n    // получить список названий стран\r\n    async getCountries(){\r\n        const response = await instance.get<Array<CountryType>>('countries')\r\n        return response.data\r\n    },\r\n    // получить значения для всех случаев, для конкретной страны, по дням, за период\r\n    async getValuesByPeriod(countrySlug: string, dateStart: string, dateEnd: string) {\r\n        const response = await instance.get<Array<CountryCasesByDayType>>(`total/country/${countrySlug}?from=${dateStart}&to=${dateEnd}`)\r\n        return response.data\r\n    },\r\n    // получение актуальной последней даты для конкретной страны (может не совпадать с текущей или вчерашней)\r\n    // запрашиваем значения начиная с позавчера до сегодня (для конкретной страны)\r\n    // и смотрим дату последнего значения\r\n    async getDateEnd(country: string){\r\n        let dateStart = DATE.getStartPeriodDate(2);\r\n        let dateEnd = DATE.dateJsToAPI(DATE.getCurrentDate());\r\n        const response = await instance.get<Array<CountryCasesByDayType>>(`total/country/${country}?from=${dateStart}&to=${dateEnd}`)\r\n        const dateEndAPI = response.data[response.data.length - 1].Date;//API\r\n        return dateEndAPI\r\n    },\r\n    // получить все типы для заданной страны с первого дня\r\n    async getValuesFromDayOne(country: string){\r\n        const response = await instance.get<Array<CountryCasesByDayType>>(`dayone/country/${country}`)\r\n        return response.data\r\n    }\r\n};","import {LangType} from \"../types/types\";\r\nimport {GetActionsType} from \"./store\";\r\nimport {LanErrorResponseType} from \"../types/types\";\r\n\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionsType = GetActionsType<typeof appAC>;\r\n\r\n\r\nlet initialState = {\r\n    globalError: null,\r\n    isLoading: false, // загрузка происходит?\r\n    lanError: false, // есть или нет ошибка сети\r\n    lanErrorResponse: null as null | LanErrorResponseType, // информация об ошибке\r\n    lang: 'eng' as LangType // язык приложения\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_LAN_ERROR_RESPONSE': {\r\n            return {...state, lanErrorResponse: action.lanErrorResponse}\r\n        }\r\n        case 'APP/SET_LANG':\r\n            return {...state, lang: action.lang}\r\n\r\n        case 'APP/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'APP/SET_LAN_ERROR': {\r\n            return {...state, lanError: action.lanError}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    setLanError: (lanError: boolean) => ({type: 'APP/SET_LAN_ERROR', lanError} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'APP/TOGGLE_LOADING', isLoading} as const),\r\n    setLanErrorResponse: (lanErrorResponse: null | LanErrorResponseType) => ({type: 'APP/SET_LAN_ERROR_RESPONSE', lanErrorResponse} as const),\r\n    setLang: (lang: LangType) => ({type: 'APP/SET_LANG', lang} as const),\r\n};\r\n\r\nexport default appReducer;","import {summaryAPI} from \"../DAL/api\";\r\nimport {BaseThunkType, GetActionsType} from \"./store\";\r\nimport {CountryCasesType, SummaryCountryType} from \"../types/types\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nlet initialState = {\r\n    date: '', // последняя актуальная дата сбора данных (из API)\r\n    summaryCases: null as null | CountryCasesType, // объект значений суммарного (по всему миру) числа случаев\r\n    countriesCases: null as null | Array<SummaryCountryType>,// массив информации по странам\r\n    countriesList: [] as Array<string>, //список названий стран\r\n    currentCountry: \"Russian Federation\" // название выбранной страны\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype SummaryActionsType = GetActionsType<typeof summaryAC>\r\ntype ThunkType = BaseThunkType<SummaryActionsType | AppActionsType>\r\n\r\nconst summaryReducer = (state = initialState, action: SummaryActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SUMMARY/SET_DATE': {\r\n            return {...state, date: action.date}\r\n        }\r\n        case 'SUMMARY/SET_SUMMARY_CASES': {\r\n           return {...state, summaryCases: action.summaryCases}\r\n        }\r\n        case 'SUMMARY/SET_COUNTRIES_CASES': {\r\n            return {...state, countriesCases: action.countriesCases}\r\n        }\r\n        case 'SUMMARY/SET_CURRENT_COUNTRY': {\r\n            return {...state, currentCountry: action.country};\r\n        }\r\n        case 'SUMMARY/SET_COUNTRIES_LIST': {\r\n            let countriesList = [];\r\n            for (let i = 0; i < action.countriesCases.length; i++) {\r\n                countriesList.push(action.countriesCases[i].Country);\r\n            }\r\n            return {...state, countriesList: countriesList};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const summaryAC = {\r\n    setDate: (date: string) => ({type: 'SUMMARY/SET_DATE', date} as const),\r\n    setSummaryCases: (summaryCases: CountryCasesType) => ({type: 'SUMMARY/SET_SUMMARY_CASES', summaryCases} as const),\r\n    setCountriesCases: (countriesCases: Array<SummaryCountryType>) => ({type: 'SUMMARY/SET_COUNTRIES_CASES', countriesCases} as const),\r\n    setCurrentCountry: (country: string) => ({type: 'SUMMARY/SET_CURRENT_COUNTRY', country} as const),\r\n    setCountriesList: (countriesCases: Array<SummaryCountryType>) => ({type: 'SUMMARY/SET_COUNTRIES_LIST', countriesCases} as const),\r\n };\r\n\r\nexport const getSummary = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await summaryAPI.getSummary();\r\n                dispatch(summaryAC.setDate(data.Date));\r\n                dispatch(summaryAC.setSummaryCases(data.Global));\r\n                dispatch(summaryAC.setCountriesCases(data.Countries));\r\n                dispatch(summaryAC.setCountriesList(data.Countries));\r\n    } catch (e) {\r\n        console.log(e)\r\n        appAC.setLanError(true);\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n\r\n};\r\n\r\nexport default summaryReducer;\r\n\r\n","import {StateType} from \"../../../store/store\";\r\nimport {connect} from \"react-redux\";\r\nimport SelectCurrentCountry from \"./SelectCurentCountry\";\r\nimport {summaryAC} from \"../../../store/summary-reducer\";\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    summaryCases: state.summary.summaryCases,\r\n    countriesList: state.summary.countriesList,\r\n    currentCountry: state.summary.currentCountry\r\n});\r\n\r\n\r\nconst setCurrentCountry = summaryAC.setCurrentCountry;\r\nconst SelectCurrentCountryContainer = connect<MapStatePropsType, MapDispatchPropsType,\r\n    OwnPropsType, StateType>\r\n(mapStateToProps, {setCurrentCountry})(SelectCurrentCountry);\r\n\r\nexport default SelectCurrentCountryContainer;\r\n\r\n//============== TYPE ========================\r\nexport type SelectCurrentCountryPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    countriesList: Array<string>\r\n    currentCountry: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    setCurrentCountry: (currentCountry: string) => void\r\n\r\n}\r\ntype OwnPropsType = {}","import {CircularProgress} from \"@material-ui/core\";\r\nimport React, {ReactElement} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n//======================= COMPONENT ===============================\r\nconst Preloader: React.FC = (): ReactElement => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.circularWrapper}>\r\n            <CircularProgress size={200} color='primary' />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader;\r\n\r\n//============================ STYLES =======================================================\r\nconst useStyles = makeStyles({\r\n    circularWrapper: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: 1001\r\n    }\r\n});\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {StringParam, useQueryParam} from \"use-query-params\";\r\nimport {useEffect} from \"react\";\r\nimport {LangType} from \"../types/types\";\r\nimport {StateType} from \"../store/store\";\r\nimport {appAC} from \"../store/app-reducer\";\r\n\r\nconst useCommonQueryParams = () => {\r\n    const dispatch = useDispatch();\r\n    const lang = useSelector((state: StateType) => state.app.lang);\r\n\r\n    const [langQuery, setLangQuery] = useQueryParam('lang', StringParam);\r\n\r\n    // URL => STATE\r\n    useEffect(() => {\r\n        dispatch(appAC.setLang(langQuery ? langQuery as LangType : lang));\r\n           }, [dispatch]);\r\n    // STATE => URL\r\n    useEffect(() => {\r\n        setLangQuery(lang !== 'eng' ? lang : undefined);\r\n            }, [\r\n        lang,\r\n    ]);\r\n}\r\nexport default useCommonQueryParams;","import React, {ReactElement, useEffect} from 'react';\r\nimport SummaryCases from \"./SummaryCases\";\r\nimport {CountryCasesType, LangType, SummaryCountryType} from \"../../../types/types\";\r\nimport {translate} from \"../../../helpers/translate\";\r\nimport {DATE} from \"../../../helpers/date\";\r\nimport SelectCurrentCountryContainer from \"./SelectCurrentCountryContainer\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport Preloader from \"../../common/Preloader\";\r\nimport clsx from \"clsx\";\r\nimport useCommonQueryParams from \"../../../hooks/useCommonQueryParams\";\r\nimport {useDispatch} from 'react-redux';\r\nimport {StringParam, useQueryParam} from \"use-query-params\";\r\nimport {summaryAC} from \"../../../store/summary-reducer\";\r\n\r\n//========================= CUSTOM HOOK ====================\r\nconst useSummary = (\r\n    currentCountry: string,\r\n    countriesCases: null | Array<SummaryCountryType>,\r\n) => {\r\n    const dispatch = useDispatch();\r\n    useCommonQueryParams();\r\n    const [countryQuery, setCountryQuery] = useQueryParam('country', StringParam);\r\n    // URL => STATE\r\n    useEffect(() => {\r\n        dispatch(summaryAC.setCurrentCountry(countryQuery ? countryQuery : currentCountry));\r\n    }, [dispatch]);\r\n    // STATE => URL\r\n    useEffect(() => {\r\n        setCountryQuery(currentCountry !== 'Russian Federation' ? currentCountry : undefined);\r\n    }, [\r\n        currentCountry\r\n    ]);\r\n\r\n    const classes = useStyles();\r\n    const currentCasesFull = countriesCases && countriesCases.find(el => el.Country === currentCountry)\r\n    const currentCases = (currentCasesFull && {\r\n        NewConfirmed: currentCasesFull.NewConfirmed,\r\n        TotalConfirmed: currentCasesFull.TotalConfirmed,\r\n        NewDeaths: currentCasesFull.NewDeaths,\r\n        TotalDeaths: currentCasesFull.TotalDeaths,\r\n        NewRecovered: currentCasesFull.NewRecovered,\r\n        TotalRecovered: currentCasesFull.TotalRecovered\r\n    }) as null | CountryCasesType;\r\n\r\n    return {\r\n        classes, currentCases\r\n    }\r\n}\r\n\r\n//========================= COMPONENT ======================\r\nconst Summary: React.FC<PropsType> = (props: PropsType): ReactElement => {\r\n    const {date, summaryCases, isLoading, lang, countriesCases, currentCountry} = props;\r\n    const {\r\n        classes, currentCases\r\n    } = useSummary(currentCountry, countriesCases);\r\n\r\n    if (isLoading) return <Preloader/>;\r\n    return (\r\n        <>\r\n            <div className={classes.blocks}>\r\n                <div className={classes.block}>\r\n                    <div className={clsx(classes.titleWrapper, classes.titleWrapper1)}>\r\n                        <Typography variant='h5' align='center'>\r\n                            {translate(lang, 'Global')}\r\n                        </Typography>\r\n                    </div>\r\n                    <SummaryCases cases={summaryCases} lang={lang}/>\r\n                </div>\r\n                <div className={classes.block}>\r\n                    <div className={classes.titleWrapper}>\r\n                        <Typography variant='h5' align='center'>\r\n                            {translate(lang, 'By country')}\r\n                        </Typography>\r\n                    </div>\r\n                    <div>\r\n                        <SelectCurrentCountryContainer/>\r\n\r\n                    </div>\r\n                    <SummaryCases cases={currentCases} lang={lang}/>\r\n                </div>\r\n            </div>\r\n            {\r\n                date &&\r\n                <Typography variant='subtitle1' align='center'>\r\n                    {DATE.dateTranslateFromAPI(date, lang)}\r\n                </Typography>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Summary;\r\n\r\n//================== TYPE ==================\r\ntype PropsType = {\r\n    date: string\r\n    summaryCases: null | CountryCasesType\r\n    isLoading: boolean\r\n    lang: LangType\r\n    countriesCases: null | Array<SummaryCountryType>\r\n    currentCountry: string\r\n}\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    blocks: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr 1fr',\r\n        gridGap: 20,\r\n        margin: '0 20px 10px'\r\n    },\r\n    block: {\r\n        border: '1px solid #fff',\r\n        borderRadius: 10,\r\n        padding: 10\r\n    },\r\n    titleWrapper: {\r\n        marginBottom: 10,\r\n        padding: '5px 0',\r\n        border: '1px solid #fff',\r\n        borderRadius: 10,\r\n    },\r\n    titleWrapper1: {\r\n        marginBottom: 47\r\n    }\r\n});\r\n","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport Summary from \"./Summary\";\r\nimport {getSummary} from \"../../../store/summary-reducer\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {CountryCasesType, LangType, SummaryCountryType} from \"../../../types/types\";\r\n\r\nclass SummaryAJAX extends React.Component<SummaryPropsType, {}> {\r\n    componentDidMount() {\r\n        this.props.getSummary();\r\n    }\r\n\r\n    render() {\r\n        const {getSummary, ...other} = this.props;\r\n        return <Summary {...other}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    date: state.summary.date,\r\n    summaryCases: state.summary.summaryCases,\r\n    isLoading: state.app.isLoading,\r\n    lang: state.app.lang,\r\n    countriesCases: state.summary.countriesCases,\r\n    currentCountry: state.summary.currentCountry\r\n});\r\n\r\nconst SummaryContainer = connect<MapStatePropsType, MapDispatchPropsType,\r\n    OwnPropsType, StateType>\r\n(mapStateToProps, {getSummary})(SummaryAJAX);\r\n\r\nexport default SummaryContainer;\r\n\r\n//============== TYPE ========================\r\ntype SummaryPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    date: string\r\n    summaryCases: null | CountryCasesType\r\n    isLoading: boolean\r\n    lang: LangType\r\n    countriesCases: null | Array<SummaryCountryType>\r\n    currentCountry: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    getSummary: () => void\r\n}\r\ntype OwnPropsType = {}","export const CANVAS = {\r\n    marginLeftX: 30,\r\n    paddingLeftX: 30,\r\n    marginRightX: 30,\r\n    marginY: 30, // вниз\r\n    canvasW: function (): number {\r\n        return 800 + this.marginLeftX + this.paddingLeftX + this.marginRightX\r\n    },\r\n    canvasH: function (): number {\r\n        return 300 + this.marginY\r\n    },\r\n    deltaGridYf(DELTA: number): number {\r\n        const DELTAString = `${DELTA}`;\r\n        const countOfNumber = DELTAString.length;\r\n        const topNumber = Math.pow(10, countOfNumber);\r\n        if (DELTA > topNumber / 2) {\r\n            return Math.pow(10, countOfNumber - 1);\r\n        } else {\r\n            return Math.pow(10, countOfNumber - 1) / 2;\r\n        }\r\n        // if (DELTA <= 10) {\r\n        //     return 1;\r\n        // } else if (DELTA > 10 && DELTA <= 50) {\r\n        //     return 5;\r\n        // } else if (DELTA > 50 && DELTA <= 100) {\r\n        //     return 10;\r\n        // } else if (DELTA > 100 && DELTA <= 500) {\r\n        //     return 50;\r\n        // } else if (DELTA > 500 && DELTA <= 1000) {\r\n        //     return 100;\r\n        // } else if (DELTA > 1000 && DELTA <= 5000) {\r\n        //     return 500;\r\n        // } else if (DELTA > 5000 && DELTA <= 10000) {\r\n        //     return 1000;\r\n        // } else if (DELTA > 10000 && DELTA <= 50000) {\r\n        //     return 5000;\r\n        // } else if (DELTA > 50000 && DELTA <= 100000) {\r\n        //     return 10000;\r\n        // } else if (DELTA > 100000 && DELTA <= 500000) {\r\n        //     return 50000;\r\n        // } else if (DELTA > 500000 && DELTA <= 1000000) {\r\n        //     return 100000;\r\n        // } else if (DELTA > 1000000 && DELTA <= 5000000) {\r\n        //     return 500000;\r\n        // } else if (DELTA > 5000000 && DELTA <= 10000000) {\r\n        //     return 1000000;\r\n        // } else return 1000000;\r\n\r\n    }\r\n};","import React, {ReactElement} from 'react';\r\nimport {CANVAS} from \"../../../../../helpers/canvas\";\r\nimport {InfoType} from \"./InfoContainer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport {addCommaToNumber} from \"../../../../../helpers/addCommaToNumber\";\r\n\r\nconst Info: React.FC<InfoType> = (props: InfoType): ReactElement => {\r\n    const {period, mouseX, mouseY, caseType, setMouseHoverCanvas, infoValue, infoDate} = props;\r\n    const classes = useStyles();\r\n    let left: number;\r\n    const deltaX = (CANVAS.canvasW() - CANVAS.marginLeftX - CANVAS.marginRightX - CANVAS.paddingLeftX) / (period - 1);\r\n    let canvasX = (i: number) => {\r\n        return CANVAS.marginLeftX + CANVAS.paddingLeftX + i * deltaX;\r\n    };\r\n    let iMouseGrid = Math.round((mouseX - CANVAS.paddingLeftX - CANVAS.marginLeftX) / deltaX);\r\n    let xMouseGrid = iMouseGrid && canvasX(iMouseGrid);\r\n    // курсор в границах графика\r\n    const showInfo = (mouseX > CANVAS.marginLeftX + CANVAS.paddingLeftX)\r\n        && (mouseX < CANVAS.canvasW() - CANVAS.marginRightX);\r\n    left = xMouseGrid;\r\n    let styleInfo = {\r\n        top: mouseY - 50,\r\n        left: left + 10\r\n    };\r\n    let colorValue;\r\n    if (caseType === 'confirmed') colorValue = red[600];\r\n    if (caseType === 'recovered') colorValue = green[600];\r\n    if (caseType === 'deaths') colorValue = indigo[600];\r\n    let styleValue = {\r\n        color: colorValue\r\n    };\r\n\r\n    let onMouseEnter = () => {\r\n        setMouseHoverCanvas(true);\r\n    };\r\n\r\n    let onMouseLeave = () => {\r\n        setMouseHoverCanvas(false);\r\n    };\r\n\r\n    const infoValueLabel: string = infoValue\r\n        ? addCommaToNumber(infoValue)\r\n        : 'No data';\r\n\r\n    return (\r\n        <>\r\n            {\r\n                showInfo &&\r\n                <div onMouseEnter={onMouseEnter}\r\n                     onMouseLeave={onMouseLeave}\r\n                     style={styleInfo}\r\n                     className={classes.info}>\r\n\r\n                    <Typography variant='body1'\r\n                                style={styleValue}\r\n                                className={classes.value}\r\n                    >\r\n                        {infoValueLabel}\r\n                    </Typography>\r\n\r\n                    <Typography variant='body1'\r\n                                color='textPrimary'\r\n                    >\r\n                        {infoDate}\r\n                    </Typography>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Info;\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    info: {\r\n        position: 'absolute',\r\n        backgroundColor: grey[50],\r\n        zIndex: 101,\r\n        cursor: 'default',\r\n        padding: '2px 5px',\r\n        boxShadow: '2px 2px 2px 2px rgba(0, 0, 0, 0.5)',\r\n    },\r\n    value: {\r\n        fontWeight: 700\r\n    }\r\n});","import {statisticAPI} from \"../DAL/api\";\r\nimport {DATE} from \"../helpers/date\";\r\nimport {CANVAS} from \"../helpers/canvas\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {BaseThunkType, GetActionsType} from \"./store\";\r\nimport {\r\n    ByDayOrTotalType,\r\n    CaseTypeType,\r\n    CountryCasesByDayType,\r\n    CountryType, LanErrorResponseType,\r\n    PeriodType,\r\n    StatisticFormValuesType,\r\n    typeType\r\n} from \"../types/types\";\r\n\r\nlet initialState = {\r\n    countriesData: null as null | Array<CountryType>, // Список названий стран, слагов стран и ISO2\r\n    period: 14, // результирующее значение для всех типов (в днях): formValues.period | periodByFirstDay ---> period\r\n    dateEnd: null as null | string, // последняя актуальная дата (в формате API)\r\n    dates: [] as Array<string>,// массив дат в формате DD.MM\r\n    allValues: {\r\n        confirmed: {\r\n            byDay: {values: [] as Array<number | null>},// массив значений (по дням) - подтвержденные - за день\r\n            total: {values: [] as Array<number | null>},// массив значений (по дням) - подтвержденные - общее количество\r\n        },\r\n        recovered: {\r\n            byDay: {values: [] as Array<number | null>},// массив значений (по дням) - вылеченные - за день\r\n            total: {values: [] as Array<number | null>},// массив значений (по дням) - вылеченные - общее количество\r\n        },\r\n        deaths: {\r\n            byDay: {values: [] as Array<number | null>},// массив значений (по дням) - умершие - за день\r\n            total: {values: [] as Array<number | null>},// массив значений (по дням) - умершие - общее количество\r\n        },\r\n    },\r\n    mouseX: 0, // координаты курсора относительно Canvas (меняются когда курсор над Canvas)\r\n    mouseY: 0, // координаты курсора относительно Canvas\r\n    mouseHoverCanvas: false, // курсор над канвасом,\r\n    // valuesCurrent зависит от country, period, byDayOrTotal и caseType\r\n    // при изменении country или period - загрузка с сервера - getValues (getInitial - при инициализации)\r\n    // при неизменности country или period и изменении byDayOrTotal или caseType - получить из стора - setCurrentValues\r\n    valuesCurrent: [] as Array<number | null>, // массив значений текущего выбранного типа\r\n    showInfo: false, // показывать или нет модальное окно со значением в точке\r\n    infoValue: null as null | number, // выводимое в модальном окне значение\r\n    infoDate: null as null | string, // выводимая в модальном окне дата\r\n    xPoint: 0, // координаты точки на графике и линии\r\n    yPoint: 0 as number | null,  // координаты точки на графике и линии\r\n    isInitialized: false, // инициализация: список стран, крайняя дата, значения для параметров ворму по умолчанию\r\n    formValues: { // значения из формы\r\n        country: 'russia',\r\n        period: '14' as PeriodType, // '7', '14', '30', '-1' (с начала)\r\n        byDayOrTotal: 'byDay' as typeType,\r\n        caseType: 'confirmed' as CaseTypeType,\r\n    },\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype StatisticActionsType = GetActionsType<typeof statisticAC>\r\ntype ThunkType = BaseThunkType<StatisticActionsType | AppActionsType>\r\n\r\nconst statisticReducer = (state = initialState, action: StatisticActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'statistic/SET_INITIALIZED': {\r\n            return {...state, isInitialized: true}\r\n        }\r\n        case 'statistic/SET_FORM_VALUES': {\r\n            return {...state, formValues: action.formValues}\r\n        }\r\n        case 'statistic/SET_COUNTRIES_DATA': {\r\n            action.countriesData.sort((a, b) => {\r\n                if (a.Country > b.Country) {\r\n                    return 1;\r\n                }\r\n                if (a.Country < b.Country) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            });\r\n            return {...state, countriesData: action.countriesData};\r\n        }\r\n        case 'statistic/SET_PERIOD': {\r\n            return {...state, period: action.period}\r\n        }\r\n        case 'statistic/SET_DATE_END': { // установка актуальной даты конца периода\r\n            return {...state, dateEnd: action.dateEnd} //, dates: dates\r\n        }\r\n        case 'statistic/SET_DATES': { // установка массив дат в формате DD.MM для canvas\r\n            let dates = [] as Array<string>;\r\n            // если period=7,14,30, длина массива данных равно period + 1 для получения значений разницы (за один день)\r\n            const i0 = action.values.length <= 31 ? 1 : 0; //индекс начала итерации\r\n            for (let i = i0; i < action.values.length; i++) { // заполнение  массива dates\r\n                dates.push(DATE.dateTranslateFromApiToGraph(action.values[i].Date));// \"2020-07-11T00:00:00Z\" ---> '07.11'\r\n            }\r\n            return {...state, dates: dates}\r\n        }\r\n        case 'statistic/SET_VALUES': {\r\n            let valuesConfirmedNew = [] as Array<number | null>;\r\n            let valuesConfirmedTotal = [] as Array<number | null>;\r\n            let valuesRecoveredNew = [] as Array<number | null>;\r\n            let valuesRecoveredTotal = [] as Array<number | null>;\r\n            let valuesDeathsNew = [] as Array<number | null>;\r\n            let valuesDeathsTotal = [] as Array<number | null>;\r\n            // если period=7,14,30, длина массива данных равно period+1 для получения значений разницы (за один день)\r\n            const i0 = action.values.length <= 31 ? 1 : 0; //индекс начала итерации\r\n            for (let i = i0; i < action.values.length; i++) {\r\n                if (i0 === 0 && i === 0) {\r\n                    valuesConfirmedNew.push(action.values[i].Confirmed);\r\n                    valuesConfirmedTotal.push(action.values[i].Confirmed);\r\n                    valuesRecoveredNew.push(action.values[i].Recovered);\r\n                    valuesRecoveredTotal.push(action.values[i].Recovered);\r\n                    valuesDeathsNew.push(action.values[i].Deaths);\r\n                    valuesDeathsTotal.push(action.values[i].Deaths);\r\n                } else {\r\n                    // проверка присланных данных на ошибки\r\n                    // может быть общее послед. меньше, чем общее предыдущее, тогда устанавливаем null\r\n                    if (action.values[i].Confirmed >= action.values[i - 1].Confirmed) {\r\n                        valuesConfirmedTotal.push(action.values[i].Confirmed);\r\n                        valuesConfirmedNew.push(action.values[i].Confirmed - action.values[i - 1].Confirmed);\r\n                    } else {\r\n                        valuesConfirmedTotal.push(null);\r\n                        valuesConfirmedNew.push(null);\r\n                    }\r\n\r\n                    if (action.values[i].Recovered >= action.values[i - 1].Recovered) {\r\n                        valuesRecoveredTotal.push(action.values[i].Recovered);\r\n                        valuesRecoveredNew.push(action.values[i].Recovered - action.values[i - 1].Recovered);\r\n                    } else {\r\n                        valuesRecoveredTotal.push(null);\r\n                        valuesRecoveredNew.push(null);\r\n                    }\r\n\r\n                    if (action.values[i].Deaths >= action.values[i - 1].Deaths) {\r\n                        valuesDeathsTotal.push(action.values[i].Deaths);\r\n                        valuesDeathsNew.push(action.values[i].Deaths - action.values[i - 1].Deaths);\r\n                    } else {\r\n                        valuesDeathsTotal.push(null);\r\n                        valuesDeathsNew.push(null);\r\n                    }\r\n                }\r\n            }\r\n            const allValues = {\r\n                confirmed: {\r\n                    byDay: {values: valuesConfirmedNew},\r\n                    total: {values: valuesConfirmedTotal},\r\n                },\r\n                recovered: {\r\n                    byDay: {values: valuesRecoveredNew},\r\n                    total: {values: valuesRecoveredTotal},\r\n                },\r\n                deaths: {\r\n                    byDay: {values: valuesDeathsNew},\r\n                    total: {values: valuesDeathsTotal},\r\n                },\r\n            };\r\n            // текущее выбранное\r\n            const valuesCurrent = allValues[action.caseType][action.byDayOrTotal].values;\r\n            return {\r\n                ...state,\r\n                valuesCurrent: valuesCurrent,\r\n                allValues: allValues\r\n            };\r\n        }\r\n        case 'statistic/SET_MOUSE_XY': {\r\n            let showInfo;\r\n            // определение надо ли показывать Info\r\n            if (action.mouseX > CANVAS.marginLeftX + CANVAS.paddingLeftX\r\n                && action.mouseX < CANVAS.canvasW() - CANVAS.marginRightX\r\n                && action.mouseY < CANVAS.canvasH() - CANVAS.marginY) {\r\n                showInfo = true;\r\n            } else {\r\n                showInfo = false;\r\n            }\r\n            // определение infoValue и infoDate, определение координат вертикальной линии и точки\r\n            const valueMin = Math.min.apply(null, (state.valuesCurrent as Array<number>).filter(el => el !== null)) as number;\r\n            const valueMax = Math.max.apply(null, (state.valuesCurrent as Array<number>).filter(el => el !== null)) as number;\r\n            const DELTA = valueMax - valueMin;\r\n            const deltaGridY = CANVAS.deltaGridYf(DELTA); // шаг координатной сетки по оси Y\r\n            const valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);\r\n            const valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);\r\n            const deltaX = (CANVAS.canvasW() - CANVAS.marginLeftX - CANVAS.marginRightX - CANVAS.paddingLeftX) / (state.period - 1);\r\n            const deltaY = (CANVAS.canvasH() - CANVAS.marginY) / (valueMaxGrid - valueMinGrid);\r\n            const canvasX = (i: number): number => {\r\n                return CANVAS.marginLeftX + CANVAS.paddingLeftX + i * deltaX;\r\n            };\r\n            const canvasY = (value: number): number => {\r\n                return CANVAS.canvasH() - CANVAS.marginY - deltaY * (value - valueMinGrid);\r\n            };\r\n            const iPoint = Math.round((action.mouseX - CANVAS.paddingLeftX - CANVAS.marginLeftX) / deltaX);\r\n            const xPoint = canvasX(iPoint);// координата вертикальной линии и точки\r\n            let yPoint;// координата точки\r\n            if ((state.valuesCurrent as Array<number>)[iPoint] !== null) {\r\n                yPoint = canvasY((state.valuesCurrent as Array<number>)[iPoint]);\r\n            } else {\r\n                yPoint = null;\r\n            }\r\n            let infoValue: number | null | string = (state.valuesCurrent as Array<number | null>)[iPoint];\r\n            // if (infoValue === null) {\r\n            //     infoValue = 'no data';\r\n            // }\r\n            const infoDate = state.dates && state.dates[iPoint];\r\n            return {\r\n                ...state, mouseX: action.mouseX, mouseY: action.mouseY,\r\n                showInfo: showInfo, infoValue: infoValue, infoDate: infoDate,\r\n                xPoint: xPoint, yPoint: yPoint\r\n            }\r\n        }\r\n        case 'statistic/SET_MOUSE_HOVER_CANVAS': {\r\n            return {...state, mouseHoverCanvas: action.mouseHoverCanvas}\r\n        }\r\n        case 'statistic/SET_CURRENT_VALUES': {\r\n            console.log('statistic/SET_CURRENT_VALUES')\r\n            const valuesCurrent = state.allValues[action.caseType][action.byDayOrTotal].values;\r\n            return {...state, valuesCurrent: valuesCurrent}\r\n        }\r\n        case 'statistic/SET_SHOW_INFO': {\r\n            return {...state, showInfo: action.showInfo}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const statisticAC = {\r\n    setInitialized: () => ({type: 'statistic/SET_INITIALIZED'} as const),\r\n    setFormValues: (formValues: StatisticFormValuesType) => ({type: 'statistic/SET_FORM_VALUES', formValues} as const),\r\n    setCountriesData: (countriesData: Array<CountryType>) => ({\r\n        type: 'statistic/SET_COUNTRIES_DATA',\r\n        countriesData\r\n    } as const),\r\n    setPeriod: (period: number) => ({type: 'statistic/SET_PERIOD', period} as const),\r\n    setDateEnd: (dateEnd: string) => ({type: 'statistic/SET_DATE_END', dateEnd} as const),\r\n    setDates: (values: Array<CountryCasesByDayType>) => ({type: 'statistic/SET_DATES', values} as const),\r\n    setValues: (values: Array<CountryCasesByDayType>, byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType) => ({\r\n        type: 'statistic/SET_VALUES',\r\n        values,\r\n        byDayOrTotal,\r\n        caseType\r\n    } as const),\r\n    setMouseXY: (mouseX: number, mouseY: number) => ({type: 'statistic/SET_MOUSE_XY', mouseX, mouseY} as const),\r\n    setMouseHoverCanvas: (mouseHoverCanvas: boolean) => ({\r\n        type: 'statistic/SET_MOUSE_HOVER_CANVAS',\r\n        mouseHoverCanvas\r\n    } as const),\r\n    setCurrentValues: (byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType) => ({\r\n        type: 'statistic/SET_CURRENT_VALUES',\r\n        byDayOrTotal,\r\n        caseType\r\n    } as const),\r\n    setShowInfo: (showInfo: boolean) => ({type: 'statistic/SET_SHOW_INFO', showInfo} as const)\r\n};\r\n\r\n\r\n// 1 - получение списка стран, 2 - получение актуальной последней даты, 3 - получить значения\r\nexport const getInitial = (period: PeriodType, country: string, byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        // 1 - получение списка стран\r\n        const getCountriesResponse = await statisticAPI.getCountries()\r\n        dispatch(statisticAC.setCountriesData(getCountriesResponse));\r\n        // 2 - получение актуальной последней даты\r\n        const dateEndAPI = await statisticAPI.getDateEnd(country)\r\n        //let dateEndAPI = getDateEndResponse[getDateEndResponse.length - 1].Date;//API\r\n        dispatch(statisticAC.setDateEnd(dateEndAPI));\r\n        let dateEndJS = DATE.dateAPIToJs(dateEndAPI);\r\n        // массив values имеет длину period + 1 для определения величины за день\r\n        // valuesDay[0] = valuesTotal[0] - valuesTotal[-1]\r\n        // для этого начальная дата в запросе меньше на день\r\n        let dateStartJS = new Date(dateEndJS.getTime() - (+period) * 24 * 60 * 60 * 1000);\r\n        let dateStartAPI = DATE.dateJsToAPI(dateStartJS);\r\n        // 3 - получить значения\r\n        const getValuesByPeriodResponse = await statisticAPI.getValuesByPeriod(country, dateStartAPI, dateEndAPI)\r\n        dispatch(statisticAC.setValues(getValuesByPeriodResponse, byDayOrTotal, caseType));\r\n        dispatch(statisticAC.setDates(getValuesByPeriodResponse)); // установить массив дат\r\n        // 4 - окончательно - проинициализировать\r\n        dispatch(statisticAC.setInitialized())\r\n    } catch (error) {\r\n        dispatch(appAC.setLanError(true));\r\n        // Error 😨\r\n        if (error.response) {\r\n            // The request was made and the server responded with a\r\n            // status code that falls out of the range of 2xx\r\n            console.log(error.response.data);\r\n            console.log(error.response.status);\r\n            console.log(error.response.headers);\r\n\r\n            const lanErrorResponse: LanErrorResponseType = {\r\n                status: error.response.status,\r\n                message: error.response.data.message\r\n            };\r\n            dispatch(appAC.setLanErrorResponse(lanErrorResponse))\r\n        } else if (error.request) {\r\n            /*\r\n             * The request was made but no response was received, `error.request`\r\n             * is an instance of XMLHttpRequest in the browser and an instance\r\n             * of http.ClientRequest in Node.js\r\n             */\r\n            console.log(error.request);\r\n        } else {\r\n            // Something happened in setting up the request and triggered an Error\r\n            console.log('Error', error.message);\r\n        }\r\n        console.log(error);\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getValues = (dateEnd: string, period: PeriodType, country: string, byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        if (period === '7' || period === '14' || period === '30') {\r\n            let dateEndJS = DATE.dateAPIToJs(dateEnd);\r\n            let dateStartJS = new Date(dateEndJS.getTime() - (+period) * 24 * 60 * 60 * 1000);\r\n            let dateStartAPI = DATE.dateJsToAPI(dateStartJS);\r\n            const data = await statisticAPI.getValuesByPeriod(country, dateStartAPI, dateEnd)\r\n            dispatch(statisticAC.setValues(data, byDayOrTotal, caseType)); // установить значения\r\n            dispatch(statisticAC.setDates(data)); // установить даты\r\n        } else { // period === '-1'\r\n            //console.log('getValuesFromDayOne')\r\n            const data = await statisticAPI.getValuesFromDayOne(country)\r\n            dispatch(statisticAC.setPeriod(data.length));\r\n            dispatch(statisticAC.setValues(data, byDayOrTotal, caseType)); // установить значения\r\n            dispatch(statisticAC.setDates(data)); // установить массив дат\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default statisticReducer;","import {connect} from \"react-redux\";\r\nimport Info from \"./Info\";\r\nimport {statisticAC} from \"../../../../../store/statistic-reducer\";\r\nimport {CaseTypeType} from \"../../../../../types/types\";\r\nimport {StateType} from \"../../../../../store/store\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType  => ({\r\n    mouseX: state.statistic.mouseX,\r\n    period: state.statistic.period,\r\n    caseType: state.statistic.formValues.caseType,\r\n    mouseY: state.statistic.mouseY,\r\n    infoValue: state.statistic.infoValue,\r\n    infoDate: state.statistic.infoDate\r\n});\r\n\r\nconst setMouseHoverCanvas = statisticAC.setMouseHoverCanvas;\r\nconst InfoContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,{setMouseHoverCanvas})(Info);\r\n\r\nexport default InfoContainer;\r\n\r\n//=================== TYPE ========================\r\ntype MapStatePropsType = {\r\n    mouseX: number\r\n    mouseY: number\r\n    period: number\r\n    caseType: CaseTypeType\r\n    infoValue: null | number\r\n    infoDate: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    setMouseHoverCanvas: (mouseHoverCanvas: boolean) => void\r\n}\r\nexport type InfoType = MapStatePropsType & MapDispatchPropsType;","import React, {ReactElement, useEffect, useRef} from \"react\";\r\nimport {CANVAS} from \"../../../../helpers/canvas\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {CanvasPointPropsType} from \"./CanvasPointContainer\";\r\nimport throttle from 'lodash/throttle'\r\n\r\nexport const CanvasPoint: React.FC<CanvasPointPropsType> = (props): ReactElement => {\r\n    const {\r\n        mouseHoverCanvas, mouseX, xPoint, yPoint,\r\n        caseType, showInfo, setMouseXY, setMouseHoverCanvas\r\n    } = props;\r\n    const classes = useStyles();\r\n\r\n    let canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    let canvasCtxRef = useRef<CanvasRenderingContext2D | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (canvasRef.current && mouseHoverCanvas && showInfo) {\r\n            const marginLeftX = CANVAS.marginLeftX;\r\n            const paddingLeftX = CANVAS.paddingLeftX;\r\n            const marginRightX = CANVAS.marginRightX;\r\n            const marginY = CANVAS.marginY;\r\n            const canvasW = CANVAS.canvasW();\r\n            const canvasH = CANVAS.canvasH();\r\n            canvasCtxRef.current = canvasRef.current.getContext('2d');\r\n            let ctx = canvasCtxRef.current;\r\n            ctx!.clearRect(0, 0, canvasW, canvasH);// очистка перед перерисовкой\r\n            ctx!.fillStyle = 'transparent';\r\n            ctx!.fillRect(0, 0, canvasW, canvasH);\r\n\r\n            // вертикальная линия\r\n            ctx!.strokeStyle = '#000000';\r\n            ctx!.lineWidth = 1;\r\n            ctx!.setLineDash([2, 1]);\r\n            ctx!.beginPath();\r\n\r\n            if (mouseX > marginLeftX + paddingLeftX\r\n                && mouseX < canvasW - marginRightX) {\r\n                ctx!.moveTo(xPoint, 0);\r\n                ctx!.lineTo(xPoint, canvasH - marginY);\r\n                ctx!.stroke();\r\n            }\r\n\r\n            // точка\r\n            if (yPoint !== null) {\r\n                let color = '000';\r\n                if (caseType === 'confirmed') color = 'red';\r\n                if (caseType === 'recovered') color = 'green';\r\n                if (caseType === 'deaths') color = 'blue';\r\n                ctx!.strokeStyle = color;\r\n                ctx!.lineWidth = 4;\r\n                ctx!.lineJoin = 'round';\r\n                ctx!.setLineDash([]);\r\n                ctx!.beginPath();\r\n                ctx!.arc(xPoint, yPoint, 3, 0, 2 * Math.PI);\r\n                ctx!.stroke();\r\n                ctx!.fillStyle = color;\r\n                ctx!.fill();\r\n            }\r\n\r\n        }\r\n    }, [mouseHoverCanvas, mouseX, xPoint, yPoint, caseType, showInfo]);\r\n\r\n    const onMouseEnter = () => {\r\n        setMouseHoverCanvas(true)\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        setMouseHoverCanvas(false)\r\n    };\r\n\r\n    const onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\r\n        if (e.target) {\r\n            const canvas: DOMRect = e.currentTarget.getBoundingClientRect();\r\n            const x = e.clientX - canvas.left\r\n            const y = e.clientY - canvas.top;\r\n            setMouseXY(x, y);\r\n            //console.log('on CanvasPoint move')\r\n        }\r\n    };\r\n\r\n    const onMouseMoveThrottle = throttle(onMouseMove, 10);\r\n\r\n    return (\r\n        <canvas\r\n            className={classes.canvasGraph}\r\n            ref={canvasRef}\r\n            width={CANVAS.canvasW()}\r\n            height={CANVAS.canvasH()}\r\n            onMouseEnter={onMouseEnter}\r\n            onMouseLeave={onMouseLeave}\r\n            onMouseMove={onMouseMoveThrottle}\r\n        />\r\n\r\n    )\r\n};\r\nexport default CanvasPoint;\r\n\r\n//======================= STYLE ===================\r\nconst useStyles = makeStyles({\r\n    canvasGraph: {\r\n        zIndex: 5,\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n    },\r\n});","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CaseTypeType} from \"../../../../types/types\";\r\n\r\nimport CanvasPoint from \"./CanvasPoint\";\r\nimport {statisticAC} from \"../../../../store/statistic-reducer\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    mouseHoverCanvas: state.statistic.mouseHoverCanvas,\r\n    mouseX: state.statistic.mouseX,\r\n    xPoint: state.statistic.xPoint,\r\n    yPoint: state.statistic.yPoint,\r\n    caseType: state.statistic.formValues.caseType,\r\n    showInfo: state.statistic.showInfo,\r\n});\r\n\r\nconst setMouseXY = statisticAC.setMouseXY;\r\nconst setMouseHoverCanvas = statisticAC.setMouseHoverCanvas;\r\nconst CanvasPointContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setMouseXY, setMouseHoverCanvas})(CanvasPoint);\r\n\r\nexport default CanvasPointContainer;\r\n\r\n//======================== TYPE ==========================\r\ntype MapStatePropsType = {\r\n    mouseHoverCanvas: boolean\r\n    mouseX: number\r\n    xPoint: number\r\n    yPoint: number | null\r\n    caseType: CaseTypeType\r\n    showInfo: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    setMouseXY: (mouseX: number, mouseY: number) => void\r\n    setMouseHoverCanvas: (mouseHoverCanvas: boolean) => void\r\n}\r\nexport type CanvasPointPropsType = MapStatePropsType & MapDispatchPropsType","import React, {ReactElement, useEffect, useRef} from \"react\";\r\nimport {CANVAS} from \"../../../../helpers/canvas\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\n\r\n\r\nexport const CanvasAxis: React.FC = (): ReactElement => {\r\n    const classes = useStyles();\r\n\r\n\r\n    let canvasAxisRef = useRef<HTMLCanvasElement | null>(null);\r\n    let canvasAxisCtxRef = React.useRef<CanvasRenderingContext2D | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (canvasAxisRef.current) {\r\n            const canvasW = CANVAS.canvasW();\r\n            const canvasH = CANVAS.canvasH();\r\n            canvasAxisCtxRef.current = canvasAxisRef.current.getContext('2d');\r\n            let ctx = canvasAxisCtxRef.current;\r\n            ctx!.clearRect(0, 0, canvasW, canvasH);\r\n            ctx!.fillStyle = '#fff';\r\n            ctx!.fillRect(0, 0, canvasW, canvasH);\r\n            ctx!.strokeStyle = '#aaa';\r\n            ctx!.lineWidth = 4;\r\n            ctx!.setLineDash([]);\r\n            ctx!.beginPath();\r\n            ctx!.moveTo(CANVAS.marginLeftX, 0);\r\n            ctx!.lineTo(CANVAS.marginLeftX, CANVAS.canvasH() - CANVAS.marginY);\r\n            ctx!.moveTo(CANVAS.marginLeftX, CANVAS.canvasH() - CANVAS.marginY);\r\n            ctx!.lineTo(CANVAS.canvasW(), CANVAS.canvasH() - CANVAS.marginY);\r\n            ctx!.stroke();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n\r\n            </div>\r\n        <canvas\r\n            className={classes.canvasAxis}\r\n            ref={canvasAxisRef}\r\n            width={CANVAS.canvasW()}\r\n            height={CANVAS.canvasH()}\r\n        />\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nconst CanvasAxisMemo = React.memo(CanvasAxis)\r\n\r\nexport default CanvasAxisMemo;\r\n\r\n//======================= STYLE ===================\r\nconst useStyles = makeStyles({\r\n    canvasAxis: {\r\n        zIndex: 3,\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n    },\r\n});","import React, {ReactElement, useEffect, useRef} from \"react\";\r\nimport {CANVAS} from \"../../../../helpers/canvas\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {CanvasGraphPropsType} from \"./CanvasGraphContainer\";\r\nimport throttle from 'lodash/throttle';\r\n\r\nexport const CanvasGraph: React.FC<CanvasGraphPropsType> = (props: CanvasGraphPropsType): ReactElement => {\r\n    const {\r\n        setMouseXY, setMouseHoverCanvas,\r\n        valuesCurrent, period, caseType\r\n    } = props;\r\n    const classes = useStyles();\r\n\r\n    let canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    let canvasCtxRef = React.useRef<CanvasRenderingContext2D | null>(null);\r\n\r\n    useEffect(() => {\r\n        const marginLeftX = CANVAS.marginLeftX;\r\n        const paddingLeftX = CANVAS.paddingLeftX;\r\n        const marginRightX = CANVAS.marginRightX;\r\n        const marginY = CANVAS.marginY;\r\n        const canvasW = CANVAS.canvasW();\r\n        const canvasH = CANVAS.canvasH();\r\n\r\n        if (canvasRef.current) {\r\n            canvasCtxRef.current = canvasRef.current.getContext('2d');\r\n            let ctx = canvasCtxRef.current;\r\n            ctx!.clearRect(0, 0, canvasW, canvasH);// очистка перед перерисовкой\r\n            ctx!.fillStyle = 'transparent';\r\n            ctx!.fillRect(0, 0, canvasW, canvasH);\r\n\r\n            const valuesCurrentFilter = valuesCurrent.filter(el => el) as Array<number>\r\n            const valueMin = Math.min.apply(null, valuesCurrentFilter);// минимальное значение из массива\r\n            const valueMax = Math.max.apply(null, valuesCurrentFilter);// максимальное значение из массива\r\n            const DELTA = valueMax - valueMin; // разница между макс и мин\r\n            const deltaX = (canvasW - marginLeftX - marginRightX - paddingLeftX) / (period - 1);// коэффициэнт перевода в масштаб канваса по оси X\r\n            let canvasX = (i: number): number => {// функция пересчета значения X i-го элемента массива в масштаб канваса\r\n                return marginLeftX + paddingLeftX + i * deltaX;\r\n            };\r\n\r\n            let deltaGridY: number, valueMinGrid: number, valueMaxGrid: number, deltaY: number;\r\n            if (DELTA !== 0) {\r\n                deltaGridY = CANVAS.deltaGridYf(DELTA); // шаг координатной сетки по оси Y\r\n                valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);// значение по сетке, ограничивающее график снизу\r\n                valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);// значение по сетке, ограничивающее график сверху\r\n                deltaY = (canvasH - marginY) / (valueMaxGrid - valueMinGrid);// коэффициэнт перевода в масштаб канваса по оси Y\r\n\r\n                let canvasY = (value: number): number => {// функция пересчета значения Y i-го элемента массива в масштаб канваса\r\n                    return canvasH - marginY - deltaY * (value - valueMinGrid);\r\n                };\r\n\r\n                //горизонтальные линии\r\n                ctx!.strokeStyle = '#cccccc';\r\n                ctx!.lineWidth = 1;\r\n                ctx!.setLineDash([]);\r\n                let yLineStart = valueMinGrid;\r\n                while (true) {\r\n                    ctx!.beginPath();\r\n                    ctx!.moveTo(marginLeftX, canvasY(yLineStart));\r\n                    ctx!.lineTo(canvasW, canvasY(yLineStart));\r\n                    ctx!.stroke();\r\n                    yLineStart += deltaGridY;\r\n                    if (yLineStart > valueMaxGrid) {\r\n                        break\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                deltaGridY = 1;\r\n                valueMinGrid = valueMin;\r\n                valueMaxGrid = valueMax;\r\n            }\r\n\r\n            let canvasY = (value: number): number => {\r\n                if (DELTA !== 0) {\r\n                    return canvasH - marginY - deltaY * (value - valueMinGrid);\r\n                } else {\r\n                    return (canvasH) / 2 - marginY;\r\n                }\r\n            }\r\n\r\n            // график 'confirmed', 'recovered', 'deaths'\r\n            if (caseType === 'confirmed') ctx!.strokeStyle = 'red';\r\n            if (caseType === 'recovered') ctx!.strokeStyle = 'green';\r\n            if (caseType === 'deaths') ctx!.strokeStyle = 'blue';\r\n            ctx!.lineWidth = 3;\r\n            ctx!.setLineDash([]);\r\n            for (let i = 0; i < period; i++) {\r\n                if (i === 0) {\r\n                    ctx!.beginPath();\r\n                    if (valuesCurrent[0] !== null) {\r\n                        ctx!.moveTo(canvasX(i), canvasY(valuesCurrent[0]));\r\n                    } else {\r\n                        ctx!.moveTo(canvasX(i), canvasY(valueMinGrid))\r\n                    }\r\n\r\n                }\r\n                if (i > 0) {\r\n                    const valuePrev = valuesCurrent[i-1];\r\n                    const valueNow = valuesCurrent[i];\r\n\r\n                    if (valuePrev !== null && valueNow !== null) {\r\n                        ctx!.lineTo(canvasX(i), canvasY(valueNow));\r\n                    }\r\n                    if (valuePrev !== null && valueNow === null) {\r\n                        ctx!.lineTo(canvasX(i - 1), canvasY(valueMinGrid));\r\n                        ctx!.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                    }\r\n                    if (valuePrev == null && valueNow !== null) {\r\n                        ctx!.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                        ctx!.lineTo(canvasX(i), canvasY(valueNow));\r\n                    }\r\n                    if (valuePrev == null && valuesCurrent[i] == null) {\r\n                        ctx!.moveTo(canvasX(i), canvasY(valueMinGrid));\r\n                    }\r\n                }\r\n                if (i === period - 1) {\r\n                    ctx!.stroke();\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n    }, [valuesCurrent, period, caseType]);\r\n\r\n    const onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\r\n        if (e.target) {\r\n            const canvas: DOMRect = e.currentTarget.getBoundingClientRect();\r\n            const x = e.clientX - canvas.left;\r\n            const y = e.clientY - canvas.top;\r\n            //console.log('on CanvasGraph move')\r\n            setMouseXY(x, y);\r\n        }\r\n    };\r\n\r\n    const onMouseMoveThrottle = throttle(onMouseMove, 10);\r\n\r\n    const onMouseEnter = () => {\r\n        setMouseHoverCanvas(true)\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        setMouseHoverCanvas(false)\r\n    };\r\n\r\n    return (\r\n        <canvas\r\n            className={classes.canvasGraph}\r\n            ref={canvasRef}\r\n            width={CANVAS.canvasW()}\r\n            height={CANVAS.canvasH()}\r\n            onMouseMove={onMouseMoveThrottle}\r\n            onMouseEnter={onMouseEnter}\r\n            onMouseLeave={onMouseLeave}\r\n\r\n        />\r\n\r\n    )\r\n};\r\nexport default CanvasGraph;\r\n\r\n//======================= STYLE ===================\r\nconst useStyles = makeStyles({\r\n    canvasGraph: {\r\n        zIndex: 4,\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n    },\r\n});","import {connect} from \"react-redux\";\r\nimport {statisticAC} from \"../../../../store/statistic-reducer\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CaseTypeType} from \"../../../../types/types\";\r\nimport CanvasGraph from \"./CanvasGraph\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    period: state.statistic.period,\r\n    valuesCurrent: state.statistic.valuesCurrent,\r\n    caseType: state.statistic.formValues.caseType\r\n});\r\n\r\nconst setMouseXY = statisticAC.setMouseXY;\r\nconst setMouseHoverCanvas = statisticAC.setMouseHoverCanvas;\r\nconst CanvasGraphContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setMouseXY, setMouseHoverCanvas})(CanvasGraph);\r\n\r\nexport default CanvasGraphContainer;\r\n\r\n//======================== TYPE ==========================\r\ntype MapStatePropsType = {\r\n    period: number\r\n    valuesCurrent: Array<number | null>\r\n    caseType: CaseTypeType\r\n}\r\ntype MapDispatchPropsType = {\r\n    setMouseXY: (mouseX: number, mouseY: number) => void\r\n    setMouseHoverCanvas: (mouseHoverCanvas: boolean) => void\r\n}\r\nexport type CanvasGraphPropsType = MapStatePropsType & MapDispatchPropsType","import React from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {addCommaToNumber} from \"../../../../../helpers/addCommaToNumber\";\r\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\n\r\nconst Value: React.FC<PropsType> = (props: PropsType) => {\r\n    const {top, left, value} = props;\r\n    const classes = useStyles();\r\n    let styleInline = {top: top, left: left}\r\n    return (\r\n        <div className={classes.value} style={styleInline}>\r\n            {addCommaToNumber(value)}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Value;\r\n\r\n//====================== TYPE ==========================\r\ntype PropsType = {\r\n    top: number\r\n    left: number\r\n    value: number\r\n}\r\n//======================= STYLE =======================\r\nconst useStyles = makeStyles({\r\n    value: {\r\n        position: 'absolute',\r\n        transform: 'translate(-100%, -50%)',\r\n        backgroundColor: blueGrey[600],\r\n        color: grey[50],\r\n        zIndex: 100,\r\n        padding: '2px 4px',\r\n        borderRadius: 1\r\n    },\r\n});","import React, {ReactElement} from 'react';\r\nimport Value from \"./Value\";\r\nimport {CANVAS} from \"../../../../../helpers/canvas\";\r\nimport {ValuesPropsType} from \"./ValuesContainer\";\r\n\r\nconst Values: React.FC<ValuesPropsType> = (props: ValuesPropsType): ReactElement => {\r\n    const {valuesCurrent} = props;\r\n\r\n    const marginY = CANVAS.marginY;\r\n    const canvasH = CANVAS.canvasH();\r\n\r\n    const valuesCurrentFilter = valuesCurrent.filter(el => el) as Array<number>\r\n    const valueMin = Math.min.apply(null, valuesCurrentFilter);// минимальное значение из массива\r\n    const valueMax = Math.max.apply(null, valuesCurrentFilter);// максимальное значение из массива\r\n    const DELTA = valueMax - valueMin; // разница между макс и мин\r\n\r\n    let deltaGridY: number; // шаг координатной сетки по оси Y\r\n    let valueMinGrid: number; // значение по сетке, ограничивающее график снизу\r\n    let valueMaxGrid: number; // значение по сетке, ограничивающее график сверху\r\n    let deltaY: number; // коэффициэнт перевода в масштаб канваса по оси Y\r\n    let valuesArr = [] as Array<number>; // массив значений на шкале Y\r\n    let topArr = [] as Array<number>; // массив свойства top абсолютного позиционирования\r\n\r\n    if (DELTA !== 0) {\r\n        deltaGridY = CANVAS.deltaGridYf(DELTA);\r\n        valueMinGrid = deltaGridY * Math.floor(valueMin / deltaGridY);\r\n        valueMaxGrid = deltaGridY * (Math.ceil(valueMax / deltaGridY) + 0 * 1);\r\n        deltaY = (canvasH - marginY) / (valueMaxGrid - valueMinGrid);\r\n        const canvasY = (value: number): number => {// функция пересчета значения Y i-го элемента массива в масштаб канваса\r\n            return canvasH - marginY - deltaY * (value - valueMinGrid);\r\n        };\r\n\r\n        let y = valueMinGrid;\r\n        while (true) {\r\n            valuesArr.push(y);\r\n            topArr.push(canvasY(y));\r\n            y += deltaGridY;\r\n            if (y > valueMaxGrid - deltaGridY) {\r\n                valuesArr.push(y);\r\n                topArr.push(canvasY(y));\r\n                break\r\n            }\r\n        }\r\n    } else { // если все значения одинаковы\r\n        valuesArr = [valueMax];\r\n        topArr = [CANVAS.canvasH() / 2 - CANVAS.marginY]\r\n    }\r\n\r\n    let left = CANVAS.marginLeftX - 5; // значение left абсолютного позиционирования\r\n\r\n    let valuesElements = valuesArr.map((el, i) => (\r\n        <Value key={i}\r\n               value={el}\r\n               top={topArr[i]}\r\n               left={left}/>\r\n    ));\r\n\r\n    return (\r\n        <>\r\n            {valuesElements}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Values;","import {connect} from \"react-redux\";\r\nimport Values from \"./Values\";\r\nimport {StateType} from \"../../../../../store/store\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    valuesCurrent: state.statistic.valuesCurrent,\r\n});\r\n\r\nconst ValuesContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {})(Values);\r\n\r\nexport default ValuesContainer;\r\n\r\n//======================== TYPE ==========================\r\ntype MapStatePropsType = {\r\n    valuesCurrent: Array<number | null>\r\n}\r\ntype MapDispatchPropsType = {}\r\nexport type ValuesPropsType = MapStatePropsType & MapDispatchPropsType","import React from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\n\r\nconst Date: React.FC<PropsType> = (props: PropsType) => {\r\n    const {top, left, date} = props;\r\n    const classes = useStyles();\r\n\r\n    let styleInline = {\r\n        top: top,\r\n        left: left\r\n    };\r\n\r\n    return (\r\n        <div className={classes.date} style={styleInline}>\r\n            {date}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Date;\r\n\r\n//==================== TYPE ======================\r\ntype PropsType = {\r\n    top: number\r\n    left: number\r\n    date: string\r\n}\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    date: {\r\n        position: 'absolute',\r\n        transform: 'translate(-50%, 5px)',\r\n        backgroundColor: blueGrey[600],\r\n        color: grey[50],\r\n        zIndex: 100,\r\n        padding: '2px 4px',\r\n        borderRadius: 1,\r\n    },\r\n});","import React, {ReactElement} from 'react';\r\nimport Date from \"./Date\";\r\nimport {CANVAS} from \"../../../../../helpers/canvas\";\r\nimport {DatesPropsType} from \"./DatesContainer\";\r\n\r\nconst Dates: React.FC<DatesPropsType> = (props: DatesPropsType): ReactElement => {\r\n    const {dates, period} = props;\r\n\r\n    const canvasW = CANVAS.canvasW();\r\n    const canvasH = CANVAS.canvasH();\r\n    const marginY = CANVAS.marginY\r\n    const marginLeftX = CANVAS.marginLeftX;\r\n    const marginRightX = CANVAS.marginRightX;\r\n    const paddingLeftX = CANVAS.paddingLeftX\r\n\r\n    const deltaX = (canvasW - marginLeftX - marginRightX - paddingLeftX) / (period - 1);\r\n    let canvasX = (i: number): number => {\r\n        return marginLeftX + paddingLeftX + i * deltaX;\r\n    };\r\n    let top = canvasH - marginY;\r\n    let leftArr = [] as Array<number>;\r\n    for (let i = 0; i < props.dates.length; i++){\r\n        leftArr.push(canvasX(i));\r\n    }\r\n\r\n    let k = 1;\r\n    if (+period === 30) {\r\n        k = 2\r\n    } else if (+period > 30) {\r\n        k = Math.floor(+period/16);\r\n    }\r\n    let datesElements = dates.map((date, i) => (\r\n        (i % k === 0)\r\n            ? <Date key={i}\r\n                    date={date}\r\n                    top={top}\r\n                    left={leftArr[i]}\r\n            />\r\n            : null)\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {datesElements}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Dates;\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../../store/store\";\r\nimport Dates from \"./Dates\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    dates: state.statistic.dates,\r\n    period: state.statistic.period,\r\n});\r\n\r\nconst DatesContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {})(Dates);\r\n\r\nexport default DatesContainer;\r\n\r\n//======================== TYPE ==========================\r\ntype MapStatePropsType = {\r\n    dates: Array<string>\r\n    period: number\r\n}\r\ntype MapDispatchPropsType = {}\r\nexport type DatesPropsType = MapStatePropsType & MapDispatchPropsType","import {CanvasPropsType} from \"./CanvasContainer\";\r\nimport {ReactElement} from \"react\";\r\nimport React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {CANVAS} from \"../../../../helpers/canvas\";\r\nimport InfoContainer from \"./Info/InfoContainer\";\r\nimport CanvasPointContainer from \"./CanvasPointContainer\";\r\nimport CanvasAxisMemo from \"./CanvasAxis\";\r\nimport CanvasGraphContainer from \"./CanvasGraphContainer\";\r\nimport ValuesContainer from \"./Values/ValuesContainer\";\r\nimport DatesContainer from \"./Dates/DatesContainer\";\r\nimport Preloader from \"../../../common/Preloader\";\r\n\r\nexport const CanvasAll: React.FC<CanvasPropsType> = (props: CanvasPropsType): ReactElement => {\r\n    const {\r\n        valuesCurrent, mouseHoverCanvas, showInfo,\r\n        isLoading, lanError\r\n    } = props;\r\n    const classes = useStyles();\r\n    //let valueIsExists = !!valuesCurrent.length;\r\n\r\n    return (\r\n        <div className={classes.canvasBlock}>\r\n            <div className={classes.canvasAll}>\r\n                <CanvasAxisMemo/>\r\n\r\n                {\r\n                    !lanError &&\r\n                    <>\r\n                        {\r\n                            isLoading\r\n                                ? <Preloader/>\r\n                                : <>\r\n                                    <CanvasGraphContainer/>\r\n                                    {showInfo && mouseHoverCanvas && <CanvasPointContainer/>}\r\n                                    <ValuesContainer/>\r\n                                    {showInfo && mouseHoverCanvas && <InfoContainer/>}\r\n                                    <DatesContainer/>\r\n                                </>\r\n                        }\r\n                    </>\r\n                }\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\nexport default CanvasAll;\r\n\r\n//========================= STYLE ==================\r\nconst useStyles = makeStyles({\r\n    canvasBlock: {\r\n        backgroundColor: 'white',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        marginBottom: 5\r\n    },\r\n    canvasAll: {\r\n        margin: '50px auto 30px',\r\n        position: 'relative',\r\n        width: CANVAS.canvasW(),\r\n        height: CANVAS.canvasH()\r\n    },\r\n});","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport CanvasAll from \"./CanvasAll\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    valuesCurrent: state.statistic.valuesCurrent,\r\n    mouseHoverCanvas: state.statistic.mouseHoverCanvas,\r\n    showInfo: state.statistic.showInfo,\r\n    isLoading: state.app.isLoading,\r\n    lanError: state.app.lanError\r\n});\r\n\r\nconst CanvasContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {})(CanvasAll);\r\n\r\nexport default CanvasContainer;\r\n\r\n//======================== TYPE ==========================\r\ntype MapStatePropsType = {\r\n    valuesCurrent: Array<number | null>\r\n    mouseHoverCanvas: boolean\r\n    showInfo: boolean\r\n    isLoading: boolean\r\n    lanError: boolean\r\n}\r\ntype MapDispatchPropsType = {}\r\nexport type CanvasPropsType = MapStatePropsType & MapDispatchPropsType","import Typography from \"@material-ui/core/Typography\";\r\nimport {Field, submit} from \"redux-form\";\r\nimport renderSelectField from \"../../../common/renderSelectField\";\r\nimport React, {ReactElement} from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport {StatisticFormValuesType} from \"../../../../types/types\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\r\n\r\nconst StatisticFormRow: React.FC<PropsType> = (props): ReactElement => {\r\n    const {fieldTitle, name, elements} = props;\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const onChangeHandler = () => {\r\n        setTimeout(() => dispatch(submit('statistic')));\r\n    };\r\n    return (\r\n        <div className={classes.row}>\r\n            <div className={classes.fieldName}>\r\n                <Typography className={classes.typography}>\r\n                    {fieldTitle}\r\n                </Typography>\r\n            </div>\r\n\r\n            <Field name={name}\r\n                   component={renderSelectField}\r\n                   className={classes.selectField}\r\n                   onChange={onChangeHandler}\r\n            >\r\n                {elements}\r\n            </Field>\r\n        </div>\r\n    )\r\n};\r\nexport default StatisticFormRow;\r\n//============================= TYPE ============================\r\ntype PropsType = {\r\n    fieldTitle: string\r\n    name: keyof StatisticFormValuesType\r\n    elements: Array<JSX.Element> | null\r\n}\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    row: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr 1fr',\r\n        gridColumnGap: 5,\r\n        marginBottom: 2\r\n    },\r\n    fieldName: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        alignItems: 'center',\r\n        backgroundColor: blueGrey[900],\r\n        paddingRight: 15\r\n    },\r\n    typography: {\r\n        color: grey[50],\r\n    },\r\n    selectField: {\r\n        backgroundColor: grey[50],\r\n        //paddingLeft: 10\r\n    }\r\n});\r\n","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {CountryType, LangType, StatisticFormValuesType} from \"../../../../types/types\";\r\nimport React, {ReactElement} from \"react\";\r\nimport {StatisticFormPropsType} from \"./StatisticFormContainer\";\r\nimport StatisticFormRow from \"./StatisticFormRow\";\r\nimport {translate} from \"../../../../helpers/translate\";\r\n\r\n//================================= FORM ===================================\r\nconst Form: React.FC<FormPropsType> = (props: FormPropsType): ReactElement => {\r\n    const {\r\n        handleSubmit, countriesData, lang\r\n    } = props;\r\n    const countryElements = countriesData && countriesData.map((el, i) => <option key={i}\r\n                                                                                  value={el.Slug}>\r\n        {el.Country}\r\n    </option>);\r\n\r\n    const periodArray = [\r\n        {label: translate(lang, '1 week'), value: 7},\r\n        {label: translate(lang, '2 week'), value: 14},\r\n        {label: translate(lang, '30 days'), value: 30},\r\n        {label: translate(lang, 'By start'), value: -1}\r\n    ];\r\n    const periodElements = periodArray.map(\r\n        (el, i) => (\r\n            <option key={i}\r\n                    value={el.value}>\r\n                {el.label}\r\n            </option>\r\n        ));\r\n\r\n    const byDayOrTotalArray = [\r\n        {label: translate(lang, 'By day'), value: 'byDay'},\r\n        {label: translate(lang, 'Total'), value: 'total'},\r\n    ];\r\n    const byDayOrTotalElements = byDayOrTotalArray.map(\r\n        (el, i) => (\r\n            <option key={i}\r\n                    value={el.value}>\r\n                {el.label}\r\n            </option>\r\n        ));\r\n\r\n    const caseTypeArray = [\r\n        {label: translate(lang, 'Confirmed'), value: 'confirmed'},\r\n        {label: translate(lang, 'Recovered'), value: 'recovered'},\r\n        {label: translate(lang, 'Deaths'), value: 'deaths'},\r\n    ];\r\n    const caseTypeElements = caseTypeArray.map(\r\n        (el, i) => (\r\n            <option key={i}\r\n                    value={el.value}>\r\n                {el.label}\r\n            </option>\r\n        ));\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <StatisticFormRow fieldTitle={translate(lang, 'Country')} name='country' elements={countryElements}/>\r\n            <StatisticFormRow fieldTitle={translate(lang, 'Period')} name='period' elements={periodElements}/>\r\n            <StatisticFormRow fieldTitle={translate(lang, 'By day / Total')} name='byDayOrTotal'\r\n                              elements={byDayOrTotalElements}/>\r\n            <StatisticFormRow fieldTitle={translate(lang, 'Case type')} name='caseType' elements={caseTypeElements}/>\r\n        </form>\r\n    )\r\n};\r\n\r\n//============================ REDUX-FORM ====================================\r\nconst ReduxForm = reduxForm<StatisticFormValuesType, FormOwnPropsType>({\r\n    form: 'statistic',\r\n})(Form);\r\n\r\n//=========================== COMPONENT =====================================\r\nconst StatisticForm: React.FC<StatisticFormPropsType> = (props: StatisticFormPropsType): ReactElement => {\r\n    const {countriesData, formValues, setFormValues, setPeriod, lang} = props;\r\n    const onSubmit = (newFormValue: StatisticFormValuesType) => {\r\n        setFormValues(newFormValue);\r\n        // если formValues.period = -1 (старое значение, из стора)\r\n        // и изменилось ByDayOrTotal или caseType - что не приводит к загрузке данных с сервера\r\n        // и пересчету period на реальное значение,\r\n        // state.period переписывать на значение из формы (-1) нельзя\r\n        if (\r\n            !(formValues.period === '-1' &&\r\n                (formValues.caseType !== newFormValue.caseType || formValues.byDayOrTotal !== newFormValue.byDayOrTotal))\r\n        ) {\r\n            setPeriod(+newFormValue.period);\r\n        }\r\n    };\r\n    const initialValues: StatisticFormValuesType = formValues;\r\n    return (\r\n        <ReduxForm onSubmit={onSubmit}\r\n                   enableReinitialize\r\n                   initialValues={initialValues}\r\n                   countriesData={countriesData}\r\n                   lang={lang}\r\n        />\r\n    )\r\n};\r\n\r\nexport default StatisticForm;\r\n\r\n//============================= TYPE ============================\r\ntype FormPropsType = InjectedFormProps<StatisticFormValuesType, FormOwnPropsType> & FormOwnPropsType\r\ntype FormOwnPropsType = {\r\n    countriesData: null | Array<CountryType>\r\n    lang: LangType\r\n};\r\n\r\n","import {StateType} from \"../../../../store/store\";\r\nimport {CountryType, LangType, StatisticFormValuesType} from \"../../../../types/types\";\r\nimport {connect} from \"react-redux\";\r\nimport StatisticForm from \"./StatisticForm\";\r\nimport {statisticAC} from \"../../../../store/statistic-reducer\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    countriesData: state.statistic.countriesData,\r\n    formValues: state.statistic.formValues,\r\n    lang: state.app.lang\r\n});\r\n\r\nconst setFormValues = statisticAC.setFormValues;\r\nconst setPeriod = statisticAC.setPeriod;\r\nconst StatisticFormContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setFormValues, setPeriod})(StatisticForm);\r\n\r\nexport default StatisticFormContainer;\r\n\r\n//==================== TYPE ===================\r\ntype MapStatePropsType = {\r\n    countriesData: null | Array<CountryType>\r\n    formValues: StatisticFormValuesType\r\n    lang: LangType\r\n}\r\ntype MapDispatchPropsType = {\r\n    setFormValues: (formValues: StatisticFormValuesType) => void\r\n    setPeriod: (period: number) => void\r\n}\r\nexport type StatisticFormPropsType = MapStatePropsType & MapDispatchPropsType;","import {connect, useDispatch} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {appAC} from \"../../../../store/app-reducer\";\r\nimport * as React from \"react\";\r\nimport {FormValuesType, LanErrorResponseType, LangType, PeriodType} from \"../../../../types/types\";\r\nimport {Dialog} from \"@material-ui/core\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {getInitial} from \"../../../../store/statistic-reducer\";\r\nimport {translate} from \"../../../../helpers/translate\";\r\n\r\nconst LanErrorDialog: React.FC<PropsType> = (props: PropsType) => {\r\n    const {\r\n        lanErrorResponse, setLanError, setLanErrorResponse,\r\n        lanErrorDialogOpen, setLanErrorDialogOpen, formValues,\r\n        lanError, lang\r\n    } = props;\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const [count, setCount] = useState(10);\r\n\r\n    useEffect(() => {\r\n        if (lanError) {\r\n            if (count > 0) {\r\n                setTimeout(() => {\r\n                    setCount(count - 1)\r\n                }, 1000)\r\n            } else {\r\n                setLanErrorDialogOpen(false);// закрыть форму\r\n                setLanError(false);// снять флаг сетевой ошибки\r\n                setLanErrorResponse(null);// обнулить сообщение об ошибке\r\n                setCount(10);//\r\n                dispatch(getInitial(formValues.period, formValues.country, formValues.byDayOrTotal, formValues.caseType))\r\n            }\r\n        }\r\n\r\n    }, [count, lanError, dispatch])\r\n\r\n    const onReloadHandle = () => {\r\n        setLanErrorDialogOpen(false);// закрыть форму\r\n        setLanError(false);// снять флаг сетевой ошибки\r\n        setLanErrorResponse(null);// обнулить сообщение об ошибке\r\n        setCount(10);//\r\n        dispatch(getInitial(formValues.period, formValues.country, formValues.byDayOrTotal, formValues.caseType))\r\n    };\r\n\r\n    const OnExitHandle = () => {\r\n        setLanErrorDialogOpen(false);// закрыть форму\r\n    };\r\n\r\n    const label01 = translate(lang, 'Automatically retry server request in');\r\n    const label02 = translate(lang, 'sec');\r\n\r\n    return (\r\n        <>\r\n            {\r\n                lanErrorResponse &&\r\n                <Dialog\r\n                    disableBackdropClick\r\n                    disableEscapeKeyDown\r\n                    maxWidth=\"xs\"\r\n                    aria-labelledby=\"confirmation-dialog-title\"\r\n                    open={lanErrorDialogOpen}\r\n                    className={classes.dialog}\r\n                >\r\n                    <DialogTitle id=\"confirmation-dialog-title\"\r\n                                 className={classes.dialogTitle}\r\n                    >\r\n                        <div className={classes.dialogTitleInner}>\r\n                            <ErrorOutlineIcon className={classes.icon}/>\r\n                            <Typography>\r\n                                Lan error with status {lanErrorResponse.status}\r\n                            </Typography>\r\n                        </div>\r\n\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <Typography>\r\n                            {lanErrorResponse.message}\r\n                        </Typography>\r\n                        <Typography color='secondary'>\r\n                            {label01}:\r\n                        </Typography>\r\n                        <Typography color='secondary' align='center'>\r\n                            {count} {label02}\r\n                        </Typography>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <div className={classes.buttonWrapper}>\r\n                            <Button onClick={onReloadHandle}\r\n                                    variant='contained'\r\n                                    color=\"primary\"\r\n                                    fullWidth\r\n                                    className={classes.button}\r\n                            >\r\n                                Reload data from server\r\n                            </Button>\r\n                            <Button onClick={OnExitHandle}\r\n                                    variant='contained'\r\n                                    color=\"primary\"\r\n                                    fullWidth\r\n                                    className={classes.button}\r\n                            >\r\n                                Exit\r\n                            </Button>\r\n                        </div>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n//====================== CONTAINER ============================\r\nconst mapStateToProps = (state: StateType) => ({\r\n    lanErrorResponse: state.app.lanErrorResponse,\r\n    formValues: state.statistic.formValues,\r\n    lanError: state.app.lanError,\r\n    lang: state.app.lang\r\n});\r\nconst setLanError = appAC.setLanError;\r\nconst setLanErrorResponse = appAC.setLanErrorResponse;\r\nconst LanErrorDialogContainer = connect<MapStatePropsType, MapDispatchPropsType,\r\n    OwnPropsType, StateType>\r\n(mapStateToProps, {setLanError, setLanErrorResponse})(LanErrorDialog);\r\n\r\nexport default LanErrorDialogContainer;\r\n\r\n//====================== TYPE ========================\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\ntype MapStatePropsType = {\r\n    lanErrorResponse: null | LanErrorResponseType\r\n    formValues: FormValuesType\r\n    lanError: boolean\r\n    lang: LangType\r\n}\r\ntype MapDispatchPropsType = {\r\n    setLanError: (lanError: boolean) => void\r\n    setLanErrorResponse: (lanErrorResponse: null | LanErrorResponseType) => void\r\n}\r\ntype OwnPropsType = {\r\n    lanErrorDialogOpen: boolean\r\n    setLanErrorDialogOpen: (lanErrorDialogOpen: boolean) => void\r\n}\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    dialog: {\r\n        //maxWidth: 550\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        '&:not(:last-child)': {\r\n            marginBottom: 10\r\n        }\r\n    },\r\n    dialogTitle: {\r\n        backgroundColor: red[500],\r\n    },\r\n    dialogTitleInner: {\r\n        color: grey[50],\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    icon: {\r\n        marginRight: 10,\r\n    },\r\n    buttonWrapper: {\r\n        flexGrow: 1\r\n    }\r\n\r\n});","import React, {ReactElement, useEffect, useState} from 'react';\r\nimport CanvasContainer from \"./Canvas/CanvasContainer\";\r\nimport StatisticFormContainer from \"./StatisticForm/StatisticFormContainer\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport LanErrorDialogContainer from \"./LanErrorDialog/LanErrorDialog\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport useCommonQueryParams from \"../../../hooks/useCommonQueryParams\";\r\nimport {StringParam, useQueryParam} from \"use-query-params\";\r\nimport {statisticAC} from \"../../../store/statistic-reducer\";\r\nimport {ByDayOrTotalType, CaseTypeType, PeriodType} from \"../../../types/types\";\r\n\r\n//================== CUSTOM HOOK ==================\r\nconst useStatistic = () => {\r\n    useCommonQueryParams();\r\n    const classes = useStyles();\r\n    const [lanErrorDialogOpen, setLanErrorDialogOpen] = useState(false);\r\n    const lanError = useSelector((state: StateType) => state.app.lanError)\r\n\r\n    useEffect(() => {\r\n        if (lanError) {\r\n            setLanErrorDialogOpen(true)\r\n        }\r\n    }, [lanError]);\r\n\r\n    const dispatch = useDispatch();\r\n    const formValues = useSelector((state: StateType) => state.statistic.formValues);\r\n    const dateEnd = useSelector((state: StateType) => state.statistic.dateEnd);\r\n    const [countryQuery, setCountryQuery] = useQueryParam('country', StringParam);\r\n    const [periodQuery, setPeriodQuery] = useQueryParam('period', StringParam);\r\n    const [byDayOrTotalQuery, setByDayOrTotalQuery] = useQueryParam('byDayOrTotal', StringParam);\r\n    const [caseTypeQuery, setCaseTypeQuery] = useQueryParam('caseType', StringParam);\r\n    const [dateEndQuery, setDateEndQuery] = useQueryParam('dateEnd', StringParam);\r\n\r\n    // URL => STATE\r\n    useEffect(() => {\r\n        dispatch(statisticAC.setFormValues({\r\n            country: countryQuery ? countryQuery : formValues.country,\r\n            period: periodQuery ? periodQuery as PeriodType : formValues.period,\r\n            byDayOrTotal: byDayOrTotalQuery ? byDayOrTotalQuery as ByDayOrTotalType : formValues.byDayOrTotal,\r\n            caseType: caseTypeQuery ? caseTypeQuery as CaseTypeType : formValues.caseType,\r\n        }));\r\n        dispatch(statisticAC.setDateEnd(dateEndQuery ? dateEndQuery : dateEnd as string));\r\n\r\n        // if (\r\n        //     !(formValues.period === '-1' &&\r\n        //         (formValues.caseType !== newFormValue.caseType || formValues.byDayOrTotal !== newFormValue.byDayOrTotal))\r\n        // ) {\r\n        //     setPeriod(+newFormValue.period);\r\n        // }\r\n\r\n\r\n\r\n    }, [dispatch]);\r\n    // STATE => URL\r\n    useEffect(() => {\r\n        setCountryQuery(formValues.country !== 'russia' ? formValues.country : undefined);\r\n        setPeriodQuery(formValues.period !== '14' ? formValues.period : undefined);\r\n        setByDayOrTotalQuery(formValues.byDayOrTotal !== 'byDay' ? formValues.byDayOrTotal : undefined);\r\n        setCaseTypeQuery(formValues.caseType !== 'confirmed' ? formValues.caseType : undefined);\r\n        setDateEndQuery(dateEnd ? dateEnd : undefined)\r\n        }, [\r\n        formValues,\r\n        dateEnd\r\n    ]);\r\n\r\n    return {\r\n        classes, lanErrorDialogOpen, setLanErrorDialogOpen\r\n    }\r\n};\r\n\r\n//================== COMPONENT ====================\r\nconst Statistic: React.FC = (): ReactElement => {\r\n    const {\r\n        classes, lanErrorDialogOpen, setLanErrorDialogOpen\r\n    } = useStatistic();\r\n\r\n    return (\r\n        <div className={classes.statistic}>\r\n            <div>\r\n                <CanvasContainer/>\r\n            </div>\r\n            <div>\r\n                <StatisticFormContainer/>\r\n            </div>\r\n            <LanErrorDialogContainer lanErrorDialogOpen={lanErrorDialogOpen}\r\n                                     setLanErrorDialogOpen={setLanErrorDialogOpen}\r\n            />\r\n        </div>\r\n    )\r\n};\r\nexport default Statistic;\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    statistic: {\r\n        padding: '10px 10px 20px'\r\n    },\r\n});","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport Statistic from \"./Statistic\";\r\nimport {getInitial, getValues, statisticAC} from \"../../../store/statistic-reducer\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {ByDayOrTotalType, CaseTypeType, PeriodType, StatisticFormValuesType} from \"../../../types/types\";\r\n\r\nclass StatisticAJAX extends React.Component<StatisticContainerPropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        const {country, period, byDayOrTotal, caseType} = this.props.formValues;\r\n        this.props.getInitial(period, country, byDayOrTotal, caseType);\r\n        console.log('componentDidMount')\r\n        // this.props.getInitial(period, country, byDayOrTotal, caseType);\r\n        // this.props.getInitial(period, country, byDayOrTotal, caseType);\r\n        // this.props.getInitial(period, country, byDayOrTotal, caseType);\r\n        // this.props.getInitial(period, country, byDayOrTotal, caseType);\r\n        // this.props.getInitial(period, country, byDayOrTotal, caseType);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: StatisticContainerPropsType, prevState: StatisticContainerPropsType) {\r\n        console.log(`prevProps.formValues.caseType = ${prevProps.formValues.caseType}`);\r\n        console.log(`this.props.formValues.caseType = ${this.props.formValues.caseType}`);\r\n        console.log('')\r\n        const {country, period, byDayOrTotal, caseType} = this.props.formValues;\r\n        // если изменилась страна или период - запрос на сервер\r\n        if (this.props.dateEnd\r\n            && (prevProps.formValues.period !== period\r\n            || prevProps.formValues.country !== country)) {\r\n            this.props.getValues(this.props.dateEnd, period, country, byDayOrTotal, caseType)\r\n        }\r\n        // если изменился только или тип за день/общее или тип случая - получить из стора\r\n        if (\r\n            prevProps.formValues.country === country\r\n            && prevProps.formValues.period === period\r\n            && (prevProps.formValues.byDayOrTotal !== byDayOrTotal\r\n            || prevProps.formValues.caseType !== caseType)\r\n        ) {\r\n            this.props.setCurrentValues(byDayOrTotal, caseType);\r\n            console.log('test')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Statistic />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    isInitialized: state.statistic.isInitialized,\r\n    isLoading: state.app.isLoading,\r\n    dateEnd: state.statistic.dateEnd,\r\n    formValues: state.statistic.formValues\r\n});\r\n\r\nconst setCurrentValues = statisticAC.setCurrentValues;\r\nlet StatisticContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {getInitial, getValues, setCurrentValues})(StatisticAJAX);\r\nexport default StatisticContainer;\r\n\r\n//====================== TYPE =========================\r\ntype MapStatePropsType = {\r\n    isInitialized: boolean\r\n    isLoading: boolean\r\n    dateEnd: string | null\r\n    formValues: StatisticFormValuesType\r\n}\r\ntype MapDispatchPropsType = {\r\n    getInitial: (period: PeriodType, country: string, byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType) => void\r\n    getValues: (dateEnd: string, period: PeriodType, country: string, byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType) => void\r\n    setCurrentValues: (byDayOrTotal: ByDayOrTotalType, caseType: CaseTypeType) => void\r\n}\r\ntype StatisticContainerPropsType = MapStatePropsType & MapDispatchPropsType;","import React, {ReactElement} from 'react';\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {translate} from \"../../../helpers/translate\";\r\nimport {HomePropsType} from \"./HomeContainer\";\r\nimport useCommonQueryParams from \"../../../hooks/useCommonQueryParams\";\r\n\r\nconst Home: React.FC<HomePropsType> = (props: HomePropsType): ReactElement => {\r\n    useCommonQueryParams();\r\n    const {lang} = props;\r\n    return (\r\n        <div>\r\n            <Typography variant='h4' align='center'>\r\n                {translate(lang, 'Coronavirus statistic')}\r\n            </Typography>\r\n        </div>\r\n    )\r\n}\r\nexport default Home;\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {LangType} from \"../../../types/types\";\r\nimport Home from \"./Home\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    lang: state.app.lang,\r\n});\r\n\r\nconst HomeContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {})(Home);\r\n\r\nexport default HomeContainer;\r\n\r\n//======================== TYPE ==========================\r\ntype MapStatePropsType = {\r\n    lang: LangType\r\n}\r\ntype MapDispatchPropsType = {}\r\nexport type HomePropsType = MapStatePropsType & MapDispatchPropsType","import React, {ReactElement} from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport SummaryContainer from \"./Summary/SummaryContainer\";\r\nimport StatisticContainer from \"./Statistic/StatisticContainer\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport HomeContainer from \"./Home/HomeContainer\";\r\n\r\nconst Main: React.FC = (): ReactElement => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.main}>\r\n            <Switch>\r\n                <Route exact path='/' render={() => <HomeContainer/>}/>\r\n                <Route path='/summary' render={() => <SummaryContainer/>}/>\r\n                <Route path='/statistic' render={() => <StatisticContainer/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n};\r\nexport default Main;\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        backgroundColor: grey[400],\r\n        padding: '10px 10px 20px',\r\n        flexGrow: 1,\r\n    },\r\n});\r\n","import {FormControlLabel} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport {LangSwitcherPropsType} from \"./LangSwitcherContainer\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\n\r\nconst LangSwitcher: React.FC<LangSwitcherPropsType> = (props: LangSwitcherPropsType) => {\r\n    const {lang, setLang} = props;\r\n    const classes = useStyles();\r\n    const checked = lang === 'eng'\r\n    const handleChange = () => {\r\n        if (lang === 'eng') {\r\n            setLang('rus')\r\n        } else {\r\n            setLang('eng')\r\n        }\r\n    };\r\n    const label = lang === 'eng' ? 'ENG' : 'RUS';\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <FormControlLabel\r\n                control={\r\n                    <Switch checked={checked}\r\n                            onChange={handleChange}\r\n                            name=\"checkedA\"\r\n                            classes={{\r\n                                root: classes.root,\r\n                                track: classes.track,\r\n                            }}\r\n                    />\r\n                }\r\n                label={label}\r\n                className={classes.label}\r\n            />\r\n        </div>\r\n    )\r\n};\r\nexport default LangSwitcher\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n       color: 'white'\r\n    },\r\n    label: {\r\n        color: 'white',\r\n        //width: 32\r\n    },\r\n    wrapper: {\r\n        width: 100,\r\n        marginLeft: 10\r\n    },\r\n    track: {\r\n       backgroundColor: grey[200],\r\n    }\r\n});\r\n\r\n","import {StateType} from \"../../../store/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {LangType} from \"../../../types/types\";\r\nimport LangSwitcher from \"./LangSwitcher\";\r\nimport {appAC} from \"../../../store/app-reducer\";\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    lang: state.app.lang\r\n});\r\n\r\nconst setLang = appAC.setLang;\r\nlet LangSwitcherContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setLang})(LangSwitcher);\r\nexport default LangSwitcherContainer;\r\n\r\n//====================== TYPE =========================\r\ntype MapStatePropsType = {\r\n    lang: LangType\r\n}\r\ntype MapDispatchPropsType = {\r\n    setLang: (lang: LangType) => void\r\n}\r\nexport type LangSwitcherPropsType = MapStatePropsType & MapDispatchPropsType;","import React, {ReactElement} from 'react';\r\nimport style from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport LangSwitcherContainer from \"./LangSwitcher/LangSwitcherContainer\";\r\nimport {HeaderPropsType} from \"./HeaderContainer\";\r\nimport {translate} from \"../../helpers/translate\";\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props: HeaderPropsType): ReactElement => {\r\n    const {lang} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <header className={classes.header}>\r\n            <Typography className={classes.logo}\r\n                        variant='h5'\r\n            >\r\n                Covid\r\n            </Typography>\r\n\r\n            <div className={classes.menu}>\r\n                <nav className={style.nav}>\r\n                    <NavLink to='/' className={style.navItem}>\r\n                        {translate(lang, 'Home')}\r\n                    </NavLink>\r\n                    <NavLink to='/summary' className={style.navItem} activeClassName={style.active}>\r\n                        {translate(lang, 'Summary')}\r\n                    </NavLink>\r\n                    <NavLink to='/statistic' className={style.navItem} activeClassName={style.active}>\r\n                        {translate(lang, 'Statistic')}\r\n                    </NavLink>\r\n                </nav>\r\n                <LangSwitcherContainer/>\r\n            </div>\r\n\r\n\r\n        </header>\r\n    )\r\n};\r\nexport default Header;\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        height: 60,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        backgroundColor: blueGrey[900],\r\n        padding: '0 10px 0 20px',\r\n    },\r\n    logo: {\r\n        color: grey[50],\r\n        textTransform: 'uppercase'\r\n    },\r\n    menu: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    }\r\n});","import Header from \"./Header\";\r\nimport {LangType} from \"../../types/types\";\r\nimport {StateType} from \"../../store/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {appAC} from \"../../store/app-reducer\";\r\n\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    lang: state.app.lang\r\n});\r\n\r\nconst setLang = appAC.setLang;\r\nlet HeaderContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setLang})(Header);\r\nexport default HeaderContainer;\r\n\r\n//====================== TYPE =========================\r\ntype MapStatePropsType = {\r\n    lang: LangType\r\n}\r\ntype MapDispatchPropsType = {}\r\nexport type HeaderPropsType = MapStatePropsType & MapDispatchPropsType;","import React from 'react';\r\nimport Main from \"./components/Main/Main\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\n\r\n//================ CONTAINER =================\r\nconst App = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.appWrapper}>\r\n            <div className={classes.app}>\r\n                <HeaderContainer/>\r\n                <Main/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default App;\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    appWrapper: {\r\n        backgroundColor: grey[100]\r\n    },\r\n    app: {\r\n        maxWidth: 1120,\r\n        width: '100%',\r\n        margin: '0 auto',\r\n        minHeight: '100vh',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n});","import thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {Action, applyMiddleware, combineReducers, createStore, Middleware} from \"redux\";\r\nimport summaryReducer from \"./summary-reducer\";\r\nimport statisticReducer from \"./statistic-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport appReducer from \"./app-reducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nlet rootReducer = combineReducers({\r\n    summary: summaryReducer,\r\n    statistic: statisticReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n});\r\nconst middleware: Array<Middleware> = [thunkMiddleware];\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;\r\n\r\n//======================== TYPE ==========================\r\nexport type StateType = ReturnType<typeof rootReducer>\r\nexport type GetActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, StateType, unknown, A>","import * as React from 'react';\r\nimport {ErrorInfo} from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component<PropsType, StateType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            errorInfo: null\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n        this.setState({\r\n            error: error,\r\n            errorInfo: errorInfo\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.errorInfo) {\r\n            return (\r\n                <div>\r\n                    <h2>Something went wrong</h2>\r\n                    <details style={{whiteSpace: 'pre-wrap'}}>\r\n                        {this.state.error && this.state.error.toString()}\r\n                    </details>\r\n                </div>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n//==================== TYPES ========================\r\ntype PropsType = {\r\n\r\n};\r\ntype StateType = {\r\n    error: null | Error\r\n    errorInfo: null | ErrorInfo\r\n}\r\n\r\n//\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {HashRouter, Route} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from './store/store'\r\nimport ErrorBoundary from \"./components/common/ErrorBoundary\";\r\nimport {CssBaseline} from \"@material-ui/core\";\r\nimport {QueryParamProvider} from \"use-query-params\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <QueryParamProvider ReactRouterRoute={Route}>\r\n                <ErrorBoundary>\r\n                    <CssBaseline/>\r\n                    <App/>\r\n                </ErrorBoundary>\r\n            </QueryParamProvider>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__FqsW2\",\"navItem\":\"Header_navItem__2y3HY\",\"active\":\"Header_active__fu_PZ\"};"],"sourceRoot":""}